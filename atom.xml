<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0ccola.𐂂</title>
  
  <subtitle>零度可乐</subtitle>
  <link href="http://gonejack.github.io/atom.xml" rel="self"/>
  
  <link href="http://gonejack.github.io/"/>
  <updated>2020-12-01T04:52:09.853Z</updated>
  <id>http://gonejack.github.io/</id>
  
  <author>
    <name>John Youi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go程序初始化顺序</title>
    <link href="http://gonejack.github.io/2020/12/01/%E6%8A%80%E6%9C%AF/go%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>http://gonejack.github.io/2020/12/01/%E6%8A%80%E6%9C%AF/go%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</id>
    <published>2020-12-01T04:51:14.000Z</published>
    <updated>2020-12-01T04:52:09.853Z</updated>
    
    <content type="html"><![CDATA[<p>在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。</p><h3 id="包的执行顺序"><a href="#包的执行顺序" class="headerlink" title="包的执行顺序"></a>包的执行顺序</h3><ul><li>在 main 包中的 go 文件默认总是会被执行</li><li>同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行</li><li>其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行</li><li>被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main</li><li>一个包被其它多个包 import，但只能被初始化一次</li><li>main 包总是被最后一个初始化，因为它总是依赖别的包</li><li>避免出现循环 import，例如：A –&gt; B –&gt; C –&gt; A</li></ul><p>go 程序的初始化顺序见下图：</p><p><img src="assets/20170831112523944.jpeg"></p><h3 id="init-和-main-函数"><a href="#init-和-main-函数" class="headerlink" title="init 和 main 函数"></a>init 和 main 函数</h3><p>init()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：<br>相同点：</p><ul><li>两个函数在定义时不能有任何的参数和返回值</li><li>该函数只能由 go 程序自动调用，不可以被引用</li></ul><p>不同点：</p><ul><li>init 可以应用于任意包中，且可以重复定义多个。</li><li>main 函数只能用于 main 包中，且只能定义一个。</li></ul><p>两个函数的执行顺序：</p><ul><li>对同一个 go 文件的 init( ) 调用顺序是从上到下的</li><li>对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数</li><li>对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数</li><li>如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main，一次执行对应的 init 方法。</li></ul><h3 id="常量、变量、init-、main"><a href="#常量、变量、init-、main" class="headerlink" title="常量、变量、init()、main()"></a>常量、变量、init()、main()</h3><p>在同一个文件中，常量、变量、init()、main() 依次进行初始化。</p><p><a href="https://blog.csdn.net/claram/article/details/77745665">go编程：浅析go程序初始化顺序</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可</summary>
      
    
    
    
    <category term="默认" scheme="http://gonejack.github.io/categories/%E9%BB%98%E8%AE%A4/"/>
    
    
    <category term="无标" scheme="http://gonejack.github.io/tags/%E6%97%A0%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>解决git status不能显示中文</title>
    <link href="http://gonejack.github.io/2020/12/01/%E6%8A%80%E6%9C%AF/git-show-chinese-filenames/"/>
    <id>http://gonejack.github.io/2020/12/01/%E6%8A%80%E6%9C%AF/git-show-chinese-filenames/</id>
    <published>2020-12-01T04:39:34.000Z</published>
    <updated>2020-12-01T04:45:30.015Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>现象<br>status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：<br><img src="assets/status-dig.jpg"></p></li><li><p>原因<br>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p></li><li><p>解决办法<br>将git 配置文件 core.quotepath项设置为false</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config —global core.quotepath false</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;现象&lt;br&gt;status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：&lt;br&gt;&lt;img src=&quot;assets/status-dig.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原因&lt;br&gt;在默认设置下，中文文件名在工</summary>
      
    
    
    
    <category term="技术" scheme="http://gonejack.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="git" scheme="http://gonejack.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 87 新功能：标签页分组，可自动分组同网站下标签页</title>
    <link href="http://gonejack.github.io/2020/12/01/%E6%8A%80%E6%9C%AF/chrome_87_%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>http://gonejack.github.io/2020/12/01/%E6%8A%80%E6%9C%AF/chrome_87_%E6%96%B0%E5%8A%9F%E8%83%BD/</id>
    <published>2020-12-01T03:59:36.000Z</published>
    <updated>2020-12-01T04:13:26.116Z</updated>
    
    <content type="html"><![CDATA[<p>2020 年的最后一个版本 <a href="https://www.appinn.com/chrome-87-released/">Chrome 87</a> 新增了很多实用性的功能，在支持 <a href="https://www.appinn.com/chrome-87-search-tabs-in-addressbar/">地址栏切换标签页</a> 之后， <strong>标签页分组</strong> 功能页正式上线了，并且还可以为 <strong>同网站</strong> 自动创建标签页分组。@Appinn </p><p><img src="assets/image1.jpeg"></p><p>倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。</p><h2 id="标签页分组"><a href="#标签页分组" class="headerlink" title="标签页分组"></a>标签页分组</h2><p>升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 <strong>向新群组中添加标签页</strong> ，即可创建分组： </p><p><img src="assets/image2.jpeg"></p><p>之后便可在其他标签页标题右键时，同样选择 <strong>向新群组中添加标签页</strong> 就能移动至分组中： </p><p><img src="assets/image3.jpeg"></p><p>之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：</p><p><img src="assets/image4.jpeg"></p><h2 id="自动分组"><a href="#自动分组" class="headerlink" title="自动分组"></a>自动分组</h2><p>自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：</p><p><img src="assets/image5.jpeg"></p><p>开启后，新打开的标签页如果是同网站下，就会自动创建分组。</p><hr><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><ul><li><a href="https://www.appinn.com/lzzxt-game4/">3000时代来临，赢空间活动继续</a></li><li><a href="https://www.appinn.com/chrome-4-extensions-setup/">Chrome 4.0，用扩展武装它</a></li><li><a href="https://www.appinn.com/save-pinned-tabs-for-chrome/">Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步</a></li><li><a href="https://www.appinn.com/lzzxt-game3/">赢空间游戏新高 3432 分</a></li><li><a href="https://www.appinn.com/automatic-scrolling-tabs-for-chrome/">求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件</a></li></ul><hr><p><a href="http://www.appinn.com/copyright/?&amp;&amp;">©</a> 2019 青小蛙 for <a href="http://www.appinn.com/?&amp;&amp;">小众软件</a> | <a href="http://www.appinn.com/join-us/?&amp;&amp;">加入我们</a> | <a href="https://meta.appinn.com/c/faxian/?&amp;&amp;">投稿</a> | <a href="http://www.appinn.com/feeds-subscribe/?&amp;&amp;">订阅指南</a><br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href="https://www.appinn.com/chrome-87-tabs-group/#comments">点击这里留言、和原作者一起评论</a> <a href="https://www.appinn.com/chrome-87-tabs-group/">https://www.appinn.com/chrome-87-tabs-group/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020 年的最后一个版本 &lt;a href=&quot;https://www.appinn.com/chrome-87-released/&quot;&gt;Chrome 87&lt;/a&gt; 新增了很多实用性的功能，在支持 &lt;a href=&quot;https://www.appinn.com/chrome-8</summary>
      
    
    
    
    <category term="新闻记录" scheme="http://gonejack.github.io/categories/%E6%96%B0%E9%97%BB%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="chrome" scheme="http://gonejack.github.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://gonejack.github.io/2020/11/14/hello-world/"/>
    <id>http://gonejack.github.io/2020/11/14/hello-world/</id>
    <published>2020-11-14T20:37:58.507Z</published>
    <updated>2020-11-14T20:37:58.508Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
