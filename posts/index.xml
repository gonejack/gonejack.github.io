<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Gonejack</title><link>https://gonejack.github.io/posts/</link><description>Recent content in Posts on Gonejack</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://gonejack.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>复古游戏攻略</title><link>https://gonejack.github.io/posts/retrogames/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>https://gonejack.github.io/posts/retrogames/</guid><description>在线游玩 https://play.webrcade.com/</description></item><item><title>氧OS刷回氢OS</title><link>https://gonejack.github.io/posts/oxygen-or-hydrogen-os/</link><pubDate>Fri, 01 Jan 2021 12:56:34 +0000</pubDate><guid>https://gonejack.github.io/posts/oxygen-or-hydrogen-os/</guid><description>因氧OS的版本一般比同期的氢OS略高，所以从氢OS刷到氧OS算是升级，去氧OS官网下载安装包，在系统设置里的系统升级界面执行本地安装就可以。
但因此也造成了要从氢刷回氧算是降级，会被系统检测到安装包的版本比系统当前系统版本老，被系统拒绝安装。
这时需要刷一加官方出的，给测试人员用的降级包，系统不会阻止安装这种专用降级包。这是是用于从开发预览版 氢OS 11 降回 氢OS 10 的包，但 氧OS 上同样可以使用：
http://download.h2os.com/OnePlus8/DP/OnePlus8Hydrogen_15.H.15_OTA_015_all_2005301406_downgrade_435674d7bc234e1a.zip
注意：
刷降级包会清空手机所有数据，所有数据。 可以安装一加官方的备份App做系统备份，再把备份文件复制到电脑上。备份App中文叫一加搬家，英文叫 OnePlus Switch。 刷完之后手机会降到 氢OS，然后去一加官网下载最新的 氢OS 包，系统更新界面里安装就可以。
参考信息：https://www.oneplusbbs.com/thread-5538884-1.html</description></item><item><title>一文读懂 HTTP/2 及 HTTP/3 特性</title><link>https://gonejack.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E5%8D%8F%E8%AE%AE/http-123/</link><pubDate>Wed, 02 Dec 2020 16:57:35 +0000</pubDate><guid>https://gonejack.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E5%8D%8F%E8%AE%AE/http-123/</guid><description>摘要： 学习 HTTP/2 与 HTTP/3。
原文： 一文读懂 HTTP/2 及 HTTP/3 特性 作者： 浪里行舟 Fundebug 经授权转载，版权归原作者所有。
前言 HTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。
虽然 HTTP/2 提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。
一、HTTP 协议 HTTP 协议是 HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。伴随着计算机网络和浏览器的诞生，HTTP1.0 也随之而来，处于计算机网络中的应用层，HTTP 是建立在 TCP 协议之上，所以 HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性 ，例如 tcp 建立连接的 3 次握手和断开连接的 4 次挥手以及每次建立连接带来的 RTT 延迟时间。
二、HTTP/1.x 的缺陷 连接无法复用 ：连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。
HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。 HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。 Head-Of-Line Blocking（HOLB） ：导致带宽无法被充分利用，以及后续健康请求被阻塞。 HOLB 是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。
HTTP 1.0：下个请求必须在前一个请求返回后才能发出， request-response 对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。 HTTP 1.</description></item><item><title>P2P 网络核心技术：Gossip 协议</title><link>https://gonejack.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E5%8D%8F%E8%AE%AE/gossip%E5%8D%8F%E8%AE%AE/</link><pubDate>Tue, 01 Dec 2020 14:13:04 +0000</pubDate><guid>https://gonejack.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E5%8D%8F%E8%AE%AE/gossip%E5%8D%8F%E8%AE%AE/</guid><description>背景
Gossip protocol 也叫 Epidemic Protocol （流行病协议），实际上它还有很多别名，比如：“流言算法”、“疫情传播算法”等。
这个协议的作用就像其名字表示的意思一样，非常容易理解，它的方式其实在我们日常生活中也很常见，比如电脑病毒的传播，森林大火，细胞扩散等等。
Gossip protocol 最早是在 1987 年发表在 ACM 上的论文 《Epidemic Algorithms for Replicated Database Maintenance》中被提出。主要用在分布式数据库系统中各个副本节点同步数据之用，这种场景的一个最大特点就是组成的网络的节点都是对等节点，是非结构化网络，这区别与之前介绍的用于结构化网络中的 DHT 算法 Kadmelia。
我们知道，很多知名的 P2P 网络或区块链项目，比如 IPFS，Ethereum 等，都使用了 Kadmelia 算法，而大名鼎鼎的 Bitcoin 则是使用了 Gossip 协议来传播交易和区块信息。
实际上，只要仔细分析一下场景就知道，Ethereum 使用 DHT 算法并不是很合理，因为它使用节点保存整个链数据，不像 IPFS 那样分片保存数据，因此 Ethereum 真正适合的协议应该像 Bitcoin 那样，是 Gossip 协议。
这里先简单介绍一下 Gossip 协议的执行过程：
Gossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。
Gossip 演示
现在，我们通过一个具体的实例来深入体会一下 Gossip 传播的完整过程
为了表述清楚，我们先做一些前提设定
1、Gossip 是周期性的散播消息，把周期限定为 1 秒
2、被感染节点随机选择 k 个邻接节点（fan-out）散播消息，这里把 fan-out 设置为 3，每次最多往 3 个节点散播。</description></item><item><title>堆排序算法（图解详细流程）</title><link>https://gonejack.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E5%8D%8F%E8%AE%AE/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 01 Dec 2020 14:08:40 +0000</pubDate><guid>https://gonejack.github.io/posts/%E7%AE%97%E6%B3%95%E4%B8%8E%E5%8D%8F%E8%AE%AE/%E5%A0%86%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid><description>堆排序的时间复杂度O(N*logN),额外空间复杂度O(1)，是一个不稳定性的排序
一 准备知识 堆的结构可以分为大根堆和小根堆，是一个 完全二叉树 ，而堆排序是根据堆的这种数据结构设计的一种排序，下面先来看看什么是大根堆和小根堆
大根堆和小根堆 性质：每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆；每个结点的值都小于其左孩子和右孩子结点的值，称之为小根堆。如下图
我们对上面的图中每个数都进行了标记，上面的结构映射成数组就变成了下面这个样子
还有一个基本概念：查找数组中某个数的父结点和左右孩子结点，比如已知索引为 i 的数，那么
父结点索引：( i -1)/2（这里计算机中的除以2，省略掉小数） 左孩子索引：2* i +1 右孩子索引：2* i +2 所以上面两个数组可以脑补成堆结构，因为他们满足堆的定义性质：
大根堆： arr(i)&amp;gt;arr(2i+1) &amp;amp;&amp;amp; arr(i)&amp;gt;arr(2i+2)
小根堆： arr(i)&amp;lt;arr(2i+1) &amp;amp;&amp;amp; arr(i)&amp;lt;arr(2i+2)
二 堆排序基本步骤 基本思想： 首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端 将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1 将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组 构造堆 将无序数组构造成一个大根堆（升序用大根堆，降序就用小根堆）
假设存在以下数组
主要思路：第一次保证0~0位置大根堆结构（废话），第二次保证0~1位置大根堆结构，第三次保证0~2位置大根堆结构&amp;hellip;直到保证0~n-1位置大根堆结构（每次新插入的数据都与其父结点进行比较，如果插入的数比父结点大，则与父结点交换，否则一直向上交换，直到小于等于父结点，或者来到了顶端）
插入6的时候，6大于他的父结点3，即arr(1)&amp;gt;arr(0)，则交换；此时，保证了0~1位置是大根堆结构，如下图：
(友情提示：待交换的数为蓝色，交换后的数为绿色)
插入8的时候，8大于其父结点6，即arr(2)&amp;gt;arr(0),则交换；此时，保证了0~2位置是大根堆结构，如下图
插入5的时候，5大于其父结点3，则交换，交换之后，5又发现比8小，所以不交换；此时，保证了0~3位置大根堆结构，如下图
插入7的时候，7大于其父结点5，则交换，交换之后，7又发现比8小，所以不交换；此时 整个数组已经是大根堆结构
固定最大值再构造堆 此时，我们已经得到一个大根堆，下面将顶端的数与最后一位数交换，然后将剩余的数再构造成一个大根堆
（友情提示：黑色的为固定好的数字，不再参与排序）
此时最大数8已经来到末尾，则固定不动，后面只需要对顶端的数据进行操作即可，拿顶端的数与其左右孩子较大的数进行比较，如果顶端的数大于其左右孩子较大的数，则停止，如果顶端的数小于其左右孩子较大的数，则交换，然后继续与下面的孩子进行比较
下图中，5的左右孩子中，左孩子7比右孩子6大，则5与7进行比较，发现5&amp;lt;7，则交换；交换后，发现5已经大于他的左孩子，说明剩余的数已经构成大根堆，后面就是重复固定最大值，然后构造大根堆
如下图：顶端数7与末尾数3进行交换，固定好7，
剩余的数开始构造大根堆 ，然后顶端数与末尾数交换，固定最大值再构造大根堆，重复执行上面的操作，最终会得到有序数组
三 总结 到这里，大家应该对堆排序都有了自己的见解，我们对上面的流程总结下：
首先将无需数组构造成一个大根堆（新插入的数据与其父结点比较） 固定一个最大值，将剩余的数重新构造成一个大根堆，重复这样的过程 四 代码 代码中主要两个方法：
将待排序数组构造成一个大根堆（元素上升） 固定一个最大值，将剩余的数再构造成一个大根堆（元素下降） //堆排序 public static void heapSort(int[] arr) { //构造大根堆 heapInsert(arr); int size = arr.</description></item><item><title>go逃逸分析</title><link>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</link><pubDate>Tue, 01 Dec 2020 13:23:07 +0000</pubDate><guid>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/</guid><description>Go 逃逸分析 堆和栈 要理解什么是逃逸分析会涉及堆和栈的一些基本知识，如果忘记的同学我们可以简单的回顾一下：
堆（Heap）：一般来讲是人为手动进行管理，手动申请、分配、释放。堆适合不可预知大小的内存分配，这也意味着为此付出的代价是分配速度较慢，而且会形成内存碎片。 栈（Stack）：由编译器进行管理，自动申请、分配、释放。一般不会太大，因此栈的分配和回收速度非常快；我们常见的函数参数（不同平台允许存放的数量不同），局部变量等都会存放在栈上。 栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。
通俗比喻的说，栈就如我们去饭馆吃饭，只需要点菜（发出申请）&amp;ndash;》吃吃吃（使用内存）&amp;ndash;》吃饱就跑剩下的交给饭馆（操作系统自动回收），而堆就如在家里做饭，大到家，小到买什么菜，每一个环节都需要自己来实现，但是自由度会大很多。
什么是逃逸分析 在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。
再往简单的说，Go是通过在编译器里做逃逸分析（escape analysis）来决定一个对象放栈上还是放堆上，不逃逸的对象放栈上，可能逃逸的放堆上；即我发现变量在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配和回收比堆上快很多；反之，函数内的普通变量经过逃逸分析后，发现在函数退出后变量还有在其他地方上引用，那就将变量分配在堆上。做到按需分配（哪里的人民需要我，我就往哪去~~，一个党员的呐喊）。
为何需要逃逸分析 ok，了解完堆和栈各自的优缺点后，我们就可以更好的知道逃逸分析存在的目的了：
减少gc压力，栈上的变量，随着函数退出后系统直接回收，不需要gc标记后再清除。 减少内存碎片的产生。 减轻分配堆内存的开销，提高程序的运行速度。 如何确定是否逃逸 在Go中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志：
go run -gcflags &amp;#39;-m -l&amp;#39; main.go -m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了。 -l 会禁用函数内联，在这里禁用掉内联能更好的观察逃逸情况，减少干扰。 逃逸案例 案例一：取地址发生逃逸 package main type UserData struct { Name string } func main() { var info UserData info.Name = &amp;#34;WilburXu&amp;#34; _ = GetUserInfo(info) } func GetUserInfo(userInfo UserData) *UserData { return &amp;amp;userInfo } 执行 go run -gcflags '-m -l' main.</description></item><item><title>golang 逃逸分析与栈、堆分配分析</title><link>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B8%8E%E6%A0%88%E5%A0%86%E5%88%86%E9%85%8D%E5%88%86%E6%9E%90/</link><pubDate>Tue, 01 Dec 2020 13:19:18 +0000</pubDate><guid>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B8%8E%E6%A0%88%E5%A0%86%E5%88%86%E9%85%8D%E5%88%86%E6%9E%90/</guid><description>我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。
还是从实际使用场景出发：
Question package main type User struct { ID int64 Name string Avatar string } func GetUserInfo() *User { return &amp;amp;User{ ID: 666666, Name: &amp;#34;sim lou&amp;#34;, Avatar: &amp;#34;https://www.baidu.com/avatar/666666&amp;#34;, } } func main() { u := GetUserInfo() println(u.Name) } 这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？
什么是堆？什么是栈？ 简单说：
堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多 栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上 今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点
逃逸分析 逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。
通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：
是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上 即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上 对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。
在什么阶段确立逃逸 go 在编译阶段确立逃逸，注意并不是在运行时
为什么需要逃逸 其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：
垃圾回收（GC）的压力不断增大 申请、分配、回收内存的系统开销增大（相对于栈） 动态分配产生一定量的内存碎片 其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？</description></item><item><title>go垃圾回收</title><link>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link><pubDate>Tue, 01 Dec 2020 13:10:16 +0000</pubDate><guid>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid><description>搞懂Go垃圾回收 本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。
什么是垃圾回收 垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 维基百科
简单地说， 垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。
go的垃圾回收 当前Golang使用的垃圾回收机制是 三色标记发 配合 写屏障 和 辅助GC ，三色标记法是 标记-清除法 的一种增强版本。
标记清除法(mark and sweep) 原始的标记清楚法分为两个步骤：
标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记 清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。 这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。
三色标记法 三色标记法是对标记阶段的改进，原理如下：
初始状态所有对象都是白色。 从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B） 那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。
分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D） 重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。 也可以参考下面的动图辅助理解：
Go GC如何工作 上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 Golang GC的大部分处理是和用户代码并行的 。
GC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：
Mark:
Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 这个过程需要STW GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 该过程后台并行执行 Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 这个过程也是会STW的。
Sweep: 按照标记结果回收所有的白色对象， 该过程后台并行执行
Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？</description></item><item><title>go程序初始化顺序</title><link>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</link><pubDate>Tue, 01 Dec 2020 12:51:14 +0000</pubDate><guid>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/go%E7%A8%8B%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</guid><description>在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。
包的执行顺序 在 main 包中的 go 文件默认总是会被执行 同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行 其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行 被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –&amp;gt; A –&amp;gt; B –&amp;gt; C，则初始化顺序为 C –&amp;gt; B –&amp;gt; A –&amp;gt; main 一个包被其它多个包 import，但只能被初始化一次 main 包总是被最后一个初始化，因为它总是依赖别的包 避免出现循环 import，例如：A –&amp;gt; B –&amp;gt; C –&amp;gt; A go 程序的初始化顺序见下图：
init 和 main 函数 init()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下： 相同点：
两个函数在定义时不能有任何的参数和返回值 该函数只能由 go 程序自动调用，不可以被引用 不同点：</description></item><item><title>解决git status不能显示中文</title><link>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/git-show-chinese-filenames/</link><pubDate>Tue, 01 Dec 2020 12:39:34 +0000</pubDate><guid>https://gonejack.github.io/posts/%E5%BC%80%E5%8F%91/git-show-chinese-filenames/</guid><description> 现象 status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图： 原因 在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。
解决办法 将 git 配置文件 core.quotepath 项设置为 false
git config —global core.quotepath false</description></item><item><title>Chrome 87 新功能：标签页分组，可自动分组同网站下标签页</title><link>https://gonejack.github.io/posts/%E5%B7%A5%E5%85%B7/chrome_87_%E6%96%B0%E5%8A%9F%E8%83%BD/</link><pubDate>Tue, 01 Dec 2020 11:59:36 +0000</pubDate><guid>https://gonejack.github.io/posts/%E5%B7%A5%E5%85%B7/chrome_87_%E6%96%B0%E5%8A%9F%E8%83%BD/</guid><description>2020 年的最后一个版本 Chrome 87 新增了很多实用性的功能，在支持 地址栏切换标签页 之后， 标签页分组 功能页正式上线了，并且还可以为 同网站 自动创建标签页分组。@Appinn
倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。
标签页分组 升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 向新群组中添加标签页 ，即可创建分组：
之后便可在其他标签页标题右键时，同样选择 向新群组中添加标签页 就能移动至分组中：
之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：
自动分组 自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：
开启后，新打开的标签页如果是同网站下，就会自动创建分组。
相关阅读 3000时代来临，赢空间活动继续 Chrome 4.0，用扩展武装它 Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步 赢空间游戏新高 3432 分 求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件 © 2019 青小蛙 for 小众软件 | 加入我们 | 投稿 | 订阅指南 3659b075e72a5b7b1b87ea74aa7932ff 点击这里留言、和原作者一起评论 https://www.appinn.com/chrome-87-tabs-group/</description></item><item><title>Hello World</title><link>https://gonejack.github.io/posts/hello-world/</link><pubDate>Sun, 15 Nov 2020 03:43:01 +0000</pubDate><guid>https://gonejack.github.io/posts/hello-world/</guid><description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server $ hexo server More info: Server
Generate static files $ hexo generate More info: Generating
Deploy to remote sites $ hexo deploy More info: Deployment</description></item></channel></rss>