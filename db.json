{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"620a7b9377db1941eab1acfc8c624b879fa37e8d","modified":1606025789031},{"_id":"source/_data/projects.json","hash":"ca5c89357d627550822526f565773dad52554855","modified":1605414554096},{"_id":"source/_posts/技术/chrome_87_新功能.md","hash":"35ed4a2416516bdf0c4e551469e37b72330111e3","modified":1606796006116},{"_id":"source/_posts/技术/git-show-chinese-filenames.md","hash":"9e56ebc5d186b1da9122191723b67dceecc38e0b","modified":1606797930015},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1605386278508},{"_id":"source/about/index.md","hash":"15f849ba974df0f15c0c4d1a65df5448f989e8c9","modified":1606797399979},{"_id":"source/_posts/技术/go程序初始化顺序.md","hash":"836d1cbd35f733eb9dc5ad9d4e2690c49d37d698","modified":1606798699193},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606794927670},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606794927671},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606794927671},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606794927671},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606794927672},{"_id":"source/_posts/技术/go程序初始化顺序/assets/20170831112523944.jpeg","hash":"aefafe5e4be8c3b20aab75edc05e5935ea98b29b","modified":1606798109039},{"_id":"source/_posts/技术/git-show-chinese-filenames/assets/status-dig.jpg","hash":"a02f9dd03f2085fd60d8fbc0d2cd039c95f86f9a","modified":1606797530688},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1605386278509},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1605386278509},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1605386278510},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1605386278510},{"_id":"themes/cactus/README.md","hash":"65f5c6be4424b6c8f9071ea0c125070943a3fd1e","modified":1605386278510},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1605386278526},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1605386278512},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1605386278526},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1605386278527},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1605386278524},{"_id":"themes/cactus/_config.yml","hash":"7f540bd6ae7b697b5faf898b8cd4acc62b8b5f73","modified":1605386278511},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1605386278527},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1605386278523},{"_id":"themes/cactus/layout/index.ejs","hash":"d5d42dc8e01328fe215f9043292a0696a92db35c","modified":1605386278523},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1605386278524},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1605386278523},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1605386278524},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1605386278512},{"_id":"themes/cactus/languages/en.yml","hash":"c9eaa60af3189ecdb9ccaeface14d569b0a07c0c","modified":1605386278513},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1605386278513},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1605386278513},{"_id":"themes/cactus/languages/default.yml","hash":"c9eaa60af3189ecdb9ccaeface14d569b0a07c0c","modified":1605386278513},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1605386278514},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1605386278514},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1605386278515},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1605386278515},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1605386278516},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1605386278515},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1605386278516},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1605386278517},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1605386278517},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1605386278516},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1605386278518},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1605386278518},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1605386278518},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"ab38dbf9b11f829e165f1a0aa6a60d556f94a0a6","modified":1605386278519},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1605386278517},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1605386278519},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"b60f6bf5fd8aa0aa1425ff6425532c01d1354045","modified":1605386278522},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"cb3ca34fb0db2578c6c64e14922c17de1cf2afcc","modified":1605386278519},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1605386278522},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1605386278523},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1605386278530},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1605386278530},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1605386278562},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1605386278567},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1605386278567},{"_id":"themes/cactus/source/css/style.styl","hash":"18b22cfdc7457d81db7694aef5850cc36ff87a77","modified":1605386278567},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1605386278567},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1605386278568},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1605386278568},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1605386278569},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1605386278571},{"_id":"themes/cactus/source/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1605386278572},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1605386278519},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1605386278521},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1605386278521},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1605386278522},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1605386278528},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1605386278529},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1605386278529},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1605386278530},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1605386278562},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1605386278563},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1605386278562},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1605386278564},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1605386278563},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1605386278564},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1605386278564},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1605386278565},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1605386278566},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1605386278566},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1605386278566},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1605386278530},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1605386278532},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1605386278532},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1605386278532},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1605386278534},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1605386278534},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1605386278534},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1605386278537},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1605386278538},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1605386278538},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1605386278538},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1605386278537},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1605386278540},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1605386278540},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1605386278541},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1605386278541},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1605386278540},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1605386278541},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1605386278542},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1605386278542},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1605386278543},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1605386278544},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1605386278545},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1605386278546},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1605386278547},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1605386278549},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1605386278550},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1605386278550},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1605386278551},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1605386278551},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1605386278552},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1605386278553},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1605386278553},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1605386278554},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1605386278555},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1605386278555},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1605386278556},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1605386278556},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1605386278556},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1605386278557},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1605386278557},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1605386278557},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1605386278558},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1605386278558},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1605386278558},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1605386278559},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1605386278560},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1605386278560},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1605386278560},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1605386278561},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1605386278561},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1605386278561},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1605386278572},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1605386278660},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1605386278660},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1605386278663},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1605386278664},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1605386278666},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1605386278667},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1605386278669},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1605386278669},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1605386278672},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1605386278672},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1605386278675},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1605386278675},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1605386278675},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"ae3d9090bf4d934d443c0a431cb09d009743155a","modified":1605386278565},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1605386278566},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1605386278573},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1605386278584},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1605386278586},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1605386278585},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1605386278586},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1605386278606},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1605386278607},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1605386278605},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1605386278658},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1605386278659},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1605386278661},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1605386278662},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1605386278665},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1605386278666},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1605386278668},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1605386278668},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1605386278670},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1605386278672},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1605386278673},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1605386278674},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1605386278583},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1605386278583},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1605386278600},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1605386278602},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1605386278574},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1605386278582},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1605386278585},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1605386278598},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1605386278588},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1605386278571},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1605386278631},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1605386278616},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1605386278619},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1605386278634},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1605386278651},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1605386278645},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1605386278640},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1605386278622},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1605386278637},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1605386278656},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1605386278612},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1605386278627},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1605386278581},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1605386278594},{"_id":"public/atom.xml","hash":"7a5d978dcf3356b9f6cfde845b4f9788fedc0ea0","modified":1609300392040},{"_id":"public/about/index.html","hash":"5d70741aa79fdfc477efea305a203455409fe64b","modified":1609300392040},{"_id":"public/2020/12/01/技术/go程序初始化顺序/index.html","hash":"c045610ed476e93c733a18817da1f4d87c20cfcf","modified":1606799512583},{"_id":"public/2020/12/01/技术/git-show-chinese-filenames/index.html","hash":"330e5449619dcf910f8594988d1154cd6c8a4fc3","modified":1606799512583},{"_id":"public/2020/12/01/技术/chrome_87_新功能/index.html","hash":"056eeb347ffd32ca8d67fc34ec01bd73e216ef6e","modified":1606798521754},{"_id":"public/2020/11/15/hello-world/index.html","hash":"0a6f26bd898e2add8279ac048735f6ab2cfe231f","modified":1609300392040},{"_id":"public/archives/index.html","hash":"8a19625e11618265178ce7050eadf71c1a4110e8","modified":1609300392040},{"_id":"public/archives/2020/index.html","hash":"4901376abcad65df145300e1de4596618e633eef","modified":1609300392040},{"_id":"public/archives/2020/11/index.html","hash":"08cb73275601459acdeb138dfced5e4b5315b399","modified":1609300392040},{"_id":"public/archives/2020/12/index.html","hash":"16e4daa931ed17859729523f967ffaee3773f41f","modified":1609300392040},{"_id":"public/categories/技术/index.html","hash":"73d72709e6ab9c97c18e72ff643fd34b0258c5aa","modified":1609300392040},{"_id":"public/categories/新闻记录/index.html","hash":"08ebaa97703db6b3e626feed122b826c729d452b","modified":1609300392040},{"_id":"public/categories/默认/index.html","hash":"2bbd71ea3643cdd478eeb25e510e00a3a3d69627","modified":1606798521754},{"_id":"public/index.html","hash":"bac962e7d8d98d6542d7aa0addf3184b114bb90a","modified":1609300392040},{"_id":"public/tags/git/index.html","hash":"7cb22057625b57db72036079a2fa76004a3f6b81","modified":1609300392040},{"_id":"public/tags/chrome/index.html","hash":"b96d6972cce9f32e34a7ed69d48681cb4cbd0930","modified":1609300392040},{"_id":"public/tags/无标/index.html","hash":"2a32c314b9a0418e5f0e44ac60099b6d2d012a5b","modified":1606798521754},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1606798521754},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1606798521754},{"_id":"public/2020/12/01/技术/git-show-chinese-filenames/assets/status-dig.jpg","hash":"a02f9dd03f2085fd60d8fbc0d2cd039c95f86f9a","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606798521754},{"_id":"public/2020/12/01/技术/go程序初始化顺序/assets/20170831112523944.jpeg","hash":"aefafe5e4be8c3b20aab75edc05e5935ea98b29b","modified":1606798521754},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1606798521754},{"_id":"public/css/style.css","hash":"faf67a4d2240378e4b490da3c61e1c7796f798df","modified":1606798521754},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1606798521754},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1606798521754},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1606798521754},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1606798521754},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1606798521754},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1606798521754},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1606798521754},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1606798521754},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1606798521754},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1606798521754},{"_id":"source/_posts/技术/go垃圾回收.md","hash":"57a0bf58d087bb716785a42cf18381de9473bd34","modified":1606799508389},{"_id":"source/_posts/工具/chrome_87_新功能.md","hash":"35ed4a2416516bdf0c4e551469e37b72330111e3","modified":1606796006116},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606794927670},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606794927672},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606794927671},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606794927671},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606794927671},{"_id":"source/_posts/技术/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","hash":"3851089bdcb0f0f75e6b80230dbdc728e6c2ee01","modified":1606799348300},{"_id":"source/_posts/技术/go垃圾回收/assets/16c9abaa4032c7ea.gif","hash":"3020b7605e5ba904b832f4df180c620996d97963","modified":1606799348301},{"_id":"public/2020/12/01/技术/go垃圾回收/index.html","hash":"6d47b76bacdb0adb9d40bb30d890eac6e43bdac5","modified":1606800009017},{"_id":"public/2020/12/01/工具/chrome_87_新功能/index.html","hash":"34ff83112c09d155c60b5182cd202138e1a1e51f","modified":1609300392040},{"_id":"public/categories/开发/index.html","hash":"bb91669c94031be82955f91aec60c105217ebb8d","modified":1609300392040},{"_id":"public/tags/golang/index.html","hash":"38328751bb66a882ea8d180ef762dec3dd48ac6b","modified":1609300392040},{"_id":"public/tags/内存管理/index.html","hash":"c535ffcc91059a623e68b506ec81b3eba907e11c","modified":1609300392040},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606799512583},{"_id":"public/2020/12/01/技术/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","hash":"3851089bdcb0f0f75e6b80230dbdc728e6c2ee01","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606799512583},{"_id":"public/2020/12/01/技术/go垃圾回收/assets/16c9abaa4032c7ea.gif","hash":"3020b7605e5ba904b832f4df180c620996d97963","modified":1606799512583},{"_id":"source/_posts/技术/go逃逸分析与栈、堆分配分析.md","hash":"1041bb80025c67d8d95825e9da74d245b198819f","modified":1606800000784},{"_id":"public/2020/12/01/技术/go逃逸分析与栈、堆分配分析/index.html","hash":"e012830b61dc32699f92c9426d31e9cb00c0df3c","modified":1606800009017},{"_id":"source/_posts/开发/git-show-chinese-filenames.md","hash":"ce1900d5958550a00c5af0a7bad68196c82b74bc","modified":1609298908624},{"_id":"source/_posts/开发/go垃圾回收.md","hash":"57a0bf58d087bb716785a42cf18381de9473bd34","modified":1606799508389},{"_id":"source/_posts/开发/go程序初始化顺序.md","hash":"836d1cbd35f733eb9dc5ad9d4e2690c49d37d698","modified":1606798699193},{"_id":"source/_posts/开发/go逃逸分析.md","hash":"d8beb8a1470f4b403e55ec470d6c2fa2567fa79b","modified":1606800321106},{"_id":"source/_posts/算法与协议/Gossip协议.md","hash":"7d244cdcb3ccceb63917bf69f5ef21ffa81db7b6","modified":1606803246540},{"_id":"source/_posts/算法与协议/http-123.md","hash":"36eab3f6f18465047982438d06192fadeb0a9622","modified":1606899556327},{"_id":"source/_posts/开发/go逃逸分析与栈、堆分配分析.md","hash":"5cfa7377e0142efcea3fade1b92113adfd5c8ad0","modified":1606800177454},{"_id":"source/_posts/算法与协议/堆排序算法.md","hash":"144e5bb39e0857a2bd2be5bf29f1f599f6f9ace8","modified":1606803322517},{"_id":"source/_posts/开发/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","hash":"3851089bdcb0f0f75e6b80230dbdc728e6c2ee01","modified":1606799348300},{"_id":"source/_posts/开发/go程序初始化顺序/assets/20170831112523944.jpeg","hash":"aefafe5e4be8c3b20aab75edc05e5935ea98b29b","modified":1606798109039},{"_id":"source/_posts/开发/git-show-chinese-filenames/assets/status-dig.jpg","hash":"a02f9dd03f2085fd60d8fbc0d2cd039c95f86f9a","modified":1606797530688},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg","hash":"2ca83b4ff55a81528478d1e4010006cd4ece47ec","modified":1606803136165},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg","hash":"fa5445eb6fd617463b46c5d6e87b2370f7feb18e","modified":1606803136167},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg","hash":"8c5d7a0e48161096c2fc76205de8a581eb934a5a","modified":1606803136166},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801211245720.jpeg","hash":"48977c130a7a3d4ed3166691b37819084559ef7f","modified":1606802885110},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801223317483.jpeg","hash":"600c01a911ea93b1d212ce2cff8aeab5434cf7dd","modified":1606802885111},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801213938728.jpeg","hash":"c7d44aa8ed97080fb65a51415cd25e9b5bae9cf2","modified":1606802885111},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801230208709.jpeg","hash":"3f0f5132fbac4ae13d93f05c9c2c84b2fbfc0876","modified":1606802885111},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801230101207.jpeg","hash":"e43caf1052d8287dc3905bc93f2d58f9d1a968b6","modified":1606802885111},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801231815212.jpeg","hash":"78647cdcbbb927a99d4041e55425be0ad08c7a42","modified":1606802885112},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801231139446.jpeg","hash":"8a42367dc2a37a8f81cd1b541714b7498e281e13","modified":1606802885111},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802134614132.jpeg","hash":"b025db5d8121d11521a288012d358e72e928d94c","modified":1606802885112},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802140239955.jpeg","hash":"229b4ae3c3c188aeccde627dc36e19911b23abff","modified":1606802885112},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802141542496.jpeg","hash":"0f37ed546de192e44f653cd85165f31ba6cd77a2","modified":1606802885113},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802140857754.jpeg","hash":"0d529f9fcb38a07bbfd7a8130154bfc8fe3dda3f","modified":1606802885112},{"_id":"source/_posts/开发/go垃圾回收/assets/16c9abaa4032c7ea.gif","hash":"3020b7605e5ba904b832f4df180c620996d97963","modified":1606799348301},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg","hash":"b5a0884acaa0b5e3a05a86d5404a4be9b096f25c","modified":1606803136166},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-2.png","hash":"1f0cbeeb2b1534b7c2cc812f5a3971d3535f8665","modified":1606899393701},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-5.png","hash":"57f63a1442afb51df1c5c6a19f7d4d3880c259cc","modified":1606899393702},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-6.png","hash":"79637060494be3c4849ef3de66e75a1be9af2981","modified":1606899393703},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-4.png","hash":"cb29a437af7ce94046c1de95acd735e8e40cfe9a","modified":1606899393702},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-7.png","hash":"df43528fa61b57134d64f88ce01fcafee92ac303","modified":1606899393703},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-8.png","hash":"42fa59ee262c624d1537928be3ae3ccefa7f1411","modified":1606899393704},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-9.png","hash":"ebcb40fe5a59ac9e51dd2dec81775d3455e21af5","modified":1606899393704},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-1.png","hash":"ce1786e22a9ba76aad49f3ba6925f229dc59fc81","modified":1606899393700},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif","hash":"2e6b76eca4730bd3d0867980cb5321fbb2c247ee","modified":1606803136166},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-3.gif","hash":"def04f1f0019430598555c62b8062b0585d5dc4a","modified":1606899393702},{"_id":"public/categories/算法/index.html","hash":"3cb542438f664d5600b3274120eb003da4ef2c9d","modified":1609300392040},{"_id":"public/categories/协议/index.html","hash":"de9a2befe2761287ff5fc010fb3f6ee220c26d7b","modified":1609300392040},{"_id":"public/tags/分布式协议/index.html","hash":"e083904212f81753ceb3b66ccb74060e5d8f40b5","modified":1609300392040},{"_id":"public/tags/网络协议/index.html","hash":"372e73cd06c7b154a4e19d9bf0a7532a47bc74f0","modified":1609300392040},{"_id":"public/tags/堆排序/index.html","hash":"c8f195ef50b537a18d94356ea7db18d1c8601fba","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/index.html","hash":"98015c8a9d676cc8f00bde9e0ea8b2c33f93772b","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/index.html","hash":"bfdc8755da9a76bbfde830f598641d573f6b5da6","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/Gossip协议/index.html","hash":"34b3b15c1c338313304a01b4b971f7c2396e9bf6","modified":1609300392040},{"_id":"public/2020/12/01/开发/go逃逸分析/index.html","hash":"e67f4b66586600f83f1478a5ccc8f84781b4181d","modified":1609300392040},{"_id":"public/2020/12/01/开发/go逃逸分析与栈、堆分配分析/index.html","hash":"cc51238abc6edb761bf9d85db4c6364d14e22aa5","modified":1609300392040},{"_id":"public/2020/12/01/开发/go垃圾回收/index.html","hash":"e3943e8fa52425f301df8c528c75551a41eab9d4","modified":1609300392040},{"_id":"public/2020/12/01/开发/go程序初始化顺序/index.html","hash":"c5933e3b7c4cd389058921620ed05976716be206","modified":1609300392040},{"_id":"public/2020/12/01/开发/git-show-chinese-filenames/index.html","hash":"3cf34dc7cf22bbda48e5244d254b6c0620c6629b","modified":1609300392040},{"_id":"public/tags/数据结构/index.html","hash":"2a08ab9d9ff4f48d22ad9900fe45250207c4934e","modified":1609300392040},{"_id":"public/2020/12/01/开发/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","hash":"3851089bdcb0f0f75e6b80230dbdc728e6c2ee01","modified":1609300392040},{"_id":"public/2020/12/01/开发/go程序初始化顺序/assets/20170831112523944.jpeg","hash":"aefafe5e4be8c3b20aab75edc05e5935ea98b29b","modified":1609300392040},{"_id":"public/2020/12/01/开发/git-show-chinese-filenames/assets/status-dig.jpg","hash":"a02f9dd03f2085fd60d8fbc0d2cd039c95f86f9a","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/Gossip协议/assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg","hash":"fa5445eb6fd617463b46c5d6e87b2370f7feb18e","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/Gossip协议/assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg","hash":"2ca83b4ff55a81528478d1e4010006cd4ece47ec","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/Gossip协议/assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg","hash":"8c5d7a0e48161096c2fc76205de8a581eb934a5a","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801211245720.jpeg","hash":"48977c130a7a3d4ed3166691b37819084559ef7f","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801223317483.jpeg","hash":"600c01a911ea93b1d212ce2cff8aeab5434cf7dd","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801213938728.jpeg","hash":"c7d44aa8ed97080fb65a51415cd25e9b5bae9cf2","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801230101207.jpeg","hash":"e43caf1052d8287dc3905bc93f2d58f9d1a968b6","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801231139446.jpeg","hash":"8a42367dc2a37a8f81cd1b541714b7498e281e13","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801230208709.jpeg","hash":"3f0f5132fbac4ae13d93f05c9c2c84b2fbfc0876","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180801231815212.jpeg","hash":"78647cdcbbb927a99d4041e55425be0ad08c7a42","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180802140239955.jpeg","hash":"229b4ae3c3c188aeccde627dc36e19911b23abff","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180802134614132.jpeg","hash":"b025db5d8121d11521a288012d358e72e928d94c","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180802141542496.jpeg","hash":"0f37ed546de192e44f653cd85165f31ba6cd77a2","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/堆排序算法/assets/20180802140857754.jpeg","hash":"0d529f9fcb38a07bbfd7a8130154bfc8fe3dda3f","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-2.png","hash":"1f0cbeeb2b1534b7c2cc812f5a3971d3535f8665","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-4.png","hash":"cb29a437af7ce94046c1de95acd735e8e40cfe9a","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-6.png","hash":"79637060494be3c4849ef3de66e75a1be9af2981","modified":1609300392040},{"_id":"public/2020/12/01/开发/go垃圾回收/assets/16c9abaa4032c7ea.gif","hash":"3020b7605e5ba904b832f4df180c620996d97963","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/Gossip协议/assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg","hash":"b5a0884acaa0b5e3a05a86d5404a4be9b096f25c","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-8.png","hash":"42fa59ee262c624d1537928be3ae3ccefa7f1411","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-7.png","hash":"df43528fa61b57134d64f88ce01fcafee92ac303","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-5.png","hash":"57f63a1442afb51df1c5c6a19f7d4d3880c259cc","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-9.png","hash":"ebcb40fe5a59ac9e51dd2dec81775d3455e21af5","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-1.png","hash":"ce1786e22a9ba76aad49f3ba6925f229dc59fc81","modified":1609300392040},{"_id":"public/2020/12/01/算法与协议/Gossip协议/assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif","hash":"2e6b76eca4730bd3d0867980cb5321fbb2c247ee","modified":1609300392040},{"_id":"public/2020/12/02/算法与协议/http-123/assets/2019-03-06-3.gif","hash":"def04f1f0019430598555c62b8062b0585d5dc4a","modified":1609300392040}],"Category":[{"name":"技术","_id":"cki5icqqo0004ifpw7y024st8"},{"name":"新闻记录","_id":"cki5icqqs0007ifpwdjco0okt"},{"name":"默认","_id":"cki5icqqt000bifpweg0ue7kr"},{"name":"开发","_id":"cki5ixzjl0003qjpw1heqcm2e"},{"name":"算法","_id":"ckjavsend000k4kpwebnd7gxv"},{"name":"协议","_id":"ckjavsenj000n4kpw15qlan5z"}],"Data":[{"_id":"projects","data":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}],"Page":[{"title":"about","date":"2020-11-14T19:43:01.000Z","_content":"\nAbout Me\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-11-15 03:43:01\n---\n\nAbout Me\n","updated":"2020-12-01T04:36:39.979Z","path":"about/index.html","comments":1,"layout":"page","_id":"cki5icqqd0000ifpwbzui82qx","content":"<p>About Me</p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>About Me</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-11-14T20:37:58.507Z","updated":"2020-11-14T20:37:58.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5icqqh0001ifpwcsfbc43z","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Chrome 87 新功能：标签页分组，可自动分组同网站下标签页","date":"2020-12-01T03:59:36.000Z","_content":"2020 年的最后一个版本 [Chrome 87](https://www.appinn.com/chrome-87-released/) 新增了很多实用性的功能，在支持 [地址栏切换标签页](https://www.appinn.com/chrome-87-search-tabs-in-addressbar/) 之后， **标签页分组** 功能页正式上线了，并且还可以为 **同网站** 自动创建标签页分组。@Appinn \n\n![](assets/image1.jpeg)\n\n倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。\n\n## 标签页分组\n\n升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 **向新群组中添加标签页** ，即可创建分组： \n\n![](assets/image2.jpeg)\n\n之后便可在其他标签页标题右键时，同样选择 **向新群组中添加标签页** 就能移动至分组中： \n\n![](assets/image3.jpeg)\n\n之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：\n\n![](assets/image4.jpeg)\n\n## 自动分组\n\n自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：\n\n![](assets/image5.jpeg)\n\n开启后，新打开的标签页如果是同网站下，就会自动创建分组。\n\n- - - -\n\n## 相关阅读\n\n* [3000时代来临，赢空间活动继续](https://www.appinn.com/lzzxt-game4/)\n* [Chrome 4.0，用扩展武装它](https://www.appinn.com/chrome-4-extensions-setup/)\n* [Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步](https://www.appinn.com/save-pinned-tabs-for-chrome/)\n* [赢空间游戏新高 3432 分](https://www.appinn.com/lzzxt-game3/)\n* [求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件](https://www.appinn.com/automatic-scrolling-tabs-for-chrome/)\n\n- - - -\n\n[©](http://www.appinn.com/copyright/?&amp;&amp;) 2019 青小蛙 for [小众软件](http://www.appinn.com/?&amp;&amp;) | [加入我们](http://www.appinn.com/join-us/?&amp;&amp;) | [投稿](https://meta.appinn.com/c/faxian/?&amp;&amp;) | [订阅指南](http://www.appinn.com/feeds-subscribe/?&amp;&amp;)\n3659b075e72a5b7b1b87ea74aa7932ff\n[点击这里留言、和原作者一起评论](https://www.appinn.com/chrome-87-tabs-group/#comments) https://www.appinn.com/chrome-87-tabs-group/\n","source":"_posts/工具/chrome_87_新功能.md","raw":"---\ntitle: Chrome 87 新功能：标签页分组，可自动分组同网站下标签页\ndate: 2020-12-01 11:59:36\ncategories:\n  - 新闻记录\ntags:\n  - chrome\n---\n2020 年的最后一个版本 [Chrome 87](https://www.appinn.com/chrome-87-released/) 新增了很多实用性的功能，在支持 [地址栏切换标签页](https://www.appinn.com/chrome-87-search-tabs-in-addressbar/) 之后， **标签页分组** 功能页正式上线了，并且还可以为 **同网站** 自动创建标签页分组。@Appinn \n\n![](assets/image1.jpeg)\n\n倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。\n\n## 标签页分组\n\n升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 **向新群组中添加标签页** ，即可创建分组： \n\n![](assets/image2.jpeg)\n\n之后便可在其他标签页标题右键时，同样选择 **向新群组中添加标签页** 就能移动至分组中： \n\n![](assets/image3.jpeg)\n\n之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：\n\n![](assets/image4.jpeg)\n\n## 自动分组\n\n自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：\n\n![](assets/image5.jpeg)\n\n开启后，新打开的标签页如果是同网站下，就会自动创建分组。\n\n- - - -\n\n## 相关阅读\n\n* [3000时代来临，赢空间活动继续](https://www.appinn.com/lzzxt-game4/)\n* [Chrome 4.0，用扩展武装它](https://www.appinn.com/chrome-4-extensions-setup/)\n* [Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步](https://www.appinn.com/save-pinned-tabs-for-chrome/)\n* [赢空间游戏新高 3432 分](https://www.appinn.com/lzzxt-game3/)\n* [求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件](https://www.appinn.com/automatic-scrolling-tabs-for-chrome/)\n\n- - - -\n\n[©](http://www.appinn.com/copyright/?&amp;&amp;) 2019 青小蛙 for [小众软件](http://www.appinn.com/?&amp;&amp;) | [加入我们](http://www.appinn.com/join-us/?&amp;&amp;) | [投稿](https://meta.appinn.com/c/faxian/?&amp;&amp;) | [订阅指南](http://www.appinn.com/feeds-subscribe/?&amp;&amp;)\n3659b075e72a5b7b1b87ea74aa7932ff\n[点击这里留言、和原作者一起评论](https://www.appinn.com/chrome-87-tabs-group/#comments) https://www.appinn.com/chrome-87-tabs-group/\n","slug":"工具/chrome_87_新功能","published":1,"updated":"2020-12-01T04:13:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5ixzjf0000qjpwd4nwa526","content":"<p>2020 年的最后一个版本 <a href=\"https://www.appinn.com/chrome-87-released/\">Chrome 87</a> 新增了很多实用性的功能，在支持 <a href=\"https://www.appinn.com/chrome-87-search-tabs-in-addressbar/\">地址栏切换标签页</a> 之后， <strong>标签页分组</strong> 功能页正式上线了，并且还可以为 <strong>同网站</strong> 自动创建标签页分组。@Appinn </p>\n<p><img src=\"assets/image1.jpeg\"></p>\n<p>倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。</p>\n<h2 id=\"标签页分组\"><a href=\"#标签页分组\" class=\"headerlink\" title=\"标签页分组\"></a>标签页分组</h2><p>升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 <strong>向新群组中添加标签页</strong> ，即可创建分组： </p>\n<p><img src=\"assets/image2.jpeg\"></p>\n<p>之后便可在其他标签页标题右键时，同样选择 <strong>向新群组中添加标签页</strong> 就能移动至分组中： </p>\n<p><img src=\"assets/image3.jpeg\"></p>\n<p>之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：</p>\n<p><img src=\"assets/image4.jpeg\"></p>\n<h2 id=\"自动分组\"><a href=\"#自动分组\" class=\"headerlink\" title=\"自动分组\"></a>自动分组</h2><p>自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：</p>\n<p><img src=\"assets/image5.jpeg\"></p>\n<p>开启后，新打开的标签页如果是同网站下，就会自动创建分组。</p>\n<hr>\n<h2 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h2><ul>\n<li><a href=\"https://www.appinn.com/lzzxt-game4/\">3000时代来临，赢空间活动继续</a></li>\n<li><a href=\"https://www.appinn.com/chrome-4-extensions-setup/\">Chrome 4.0，用扩展武装它</a></li>\n<li><a href=\"https://www.appinn.com/save-pinned-tabs-for-chrome/\">Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步</a></li>\n<li><a href=\"https://www.appinn.com/lzzxt-game3/\">赢空间游戏新高 3432 分</a></li>\n<li><a href=\"https://www.appinn.com/automatic-scrolling-tabs-for-chrome/\">求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件</a></li>\n</ul>\n<hr>\n<p><a href=\"http://www.appinn.com/copyright/?&amp;&amp;\">©</a> 2019 青小蛙 for <a href=\"http://www.appinn.com/?&amp;&amp;\">小众软件</a> | <a href=\"http://www.appinn.com/join-us/?&amp;&amp;\">加入我们</a> | <a href=\"https://meta.appinn.com/c/faxian/?&amp;&amp;\">投稿</a> | <a href=\"http://www.appinn.com/feeds-subscribe/?&amp;&amp;\">订阅指南</a><br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href=\"https://www.appinn.com/chrome-87-tabs-group/#comments\">点击这里留言、和原作者一起评论</a> <a href=\"https://www.appinn.com/chrome-87-tabs-group/\">https://www.appinn.com/chrome-87-tabs-group/</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>2020 年的最后一个版本 <a href=\"https://www.appinn.com/chrome-87-released/\">Chrome 87</a> 新增了很多实用性的功能，在支持 <a href=\"https://www.appinn.com/chrome-87-search-tabs-in-addressbar/\">地址栏切换标签页</a> 之后， <strong>标签页分组</strong> 功能页正式上线了，并且还可以为 <strong>同网站</strong> 自动创建标签页分组。@Appinn </p>\n<p><img src=\"assets/image1.jpeg\"></p>\n<p>倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。</p>\n<h2 id=\"标签页分组\"><a href=\"#标签页分组\" class=\"headerlink\" title=\"标签页分组\"></a>标签页分组</h2><p>升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 <strong>向新群组中添加标签页</strong> ，即可创建分组： </p>\n<p><img src=\"assets/image2.jpeg\"></p>\n<p>之后便可在其他标签页标题右键时，同样选择 <strong>向新群组中添加标签页</strong> 就能移动至分组中： </p>\n<p><img src=\"assets/image3.jpeg\"></p>\n<p>之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：</p>\n<p><img src=\"assets/image4.jpeg\"></p>\n<h2 id=\"自动分组\"><a href=\"#自动分组\" class=\"headerlink\" title=\"自动分组\"></a>自动分组</h2><p>自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：</p>\n<p><img src=\"assets/image5.jpeg\"></p>\n<p>开启后，新打开的标签页如果是同网站下，就会自动创建分组。</p>\n<hr>\n<h2 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h2><ul>\n<li><a href=\"https://www.appinn.com/lzzxt-game4/\">3000时代来临，赢空间活动继续</a></li>\n<li><a href=\"https://www.appinn.com/chrome-4-extensions-setup/\">Chrome 4.0，用扩展武装它</a></li>\n<li><a href=\"https://www.appinn.com/save-pinned-tabs-for-chrome/\">Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步</a></li>\n<li><a href=\"https://www.appinn.com/lzzxt-game3/\">赢空间游戏新高 3432 分</a></li>\n<li><a href=\"https://www.appinn.com/automatic-scrolling-tabs-for-chrome/\">求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件</a></li>\n</ul>\n<hr>\n<p><a href=\"http://www.appinn.com/copyright/?&amp;&amp;\">©</a> 2019 青小蛙 for <a href=\"http://www.appinn.com/?&amp;&amp;\">小众软件</a> | <a href=\"http://www.appinn.com/join-us/?&amp;&amp;\">加入我们</a> | <a href=\"https://meta.appinn.com/c/faxian/?&amp;&amp;\">投稿</a> | <a href=\"http://www.appinn.com/feeds-subscribe/?&amp;&amp;\">订阅指南</a><br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href=\"https://www.appinn.com/chrome-87-tabs-group/#comments\">点击这里留言、和原作者一起评论</a> <a href=\"https://www.appinn.com/chrome-87-tabs-group/\">https://www.appinn.com/chrome-87-tabs-group/</a></p>\n"},{"title":"解决git status不能显示中文","date":"2020-12-01T04:39:34.000Z","_content":"* 现象\nstatus查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：\n![](assets/status-dig.jpg)\n\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n\n* 解决办法\n将 git 配置文件`core.quotepath`项设置为`false`\n```shell script\ngit config —global core.quotepath false\n```\n","source":"_posts/开发/git-show-chinese-filenames.md","raw":"---\ntitle: 解决git status不能显示中文\ndate: 2020-12-01 12:39:34\ncategories:\n  - 技术\ntags:\n  - git\n---\n* 现象\nstatus查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：\n![](assets/status-dig.jpg)\n\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n\n* 解决办法\n将 git 配置文件`core.quotepath`项设置为`false`\n```shell script\ngit config —global core.quotepath false\n```\n","slug":"开发/git-show-chinese-filenames","published":1,"updated":"2020-12-30T03:28:28.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsemy00004kpwf9qy8tsr","content":"<ul>\n<li><p>现象<br>status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：<br><img src=\"assets/status-dig.jpg\"></p>\n</li>\n<li><p>原因<br>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p>\n</li>\n<li><p>解决办法<br>将 git 配置文件<code>core.quotepath</code>项设置为<code>false</code></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config —global core.quotepath false</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<ul>\n<li><p>现象<br>status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：<br><img src=\"assets/status-dig.jpg\"></p>\n</li>\n<li><p>原因<br>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p>\n</li>\n<li><p>解决办法<br>将 git 配置文件<code>core.quotepath</code>项设置为<code>false</code></p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config —global core.quotepath false</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"go垃圾回收","date":"2020-12-01T05:10:16.000Z","_content":"# 搞懂Go垃圾回收\n本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。\n\n\n## 什么是垃圾回收\n垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 [维基百科](https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29)\n\n简单地说， **垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。**\n\n\n## go的垃圾回收\n当前Golang使用的垃圾回收机制是 **三色标记发** 配合 **写屏障** 和 **辅助GC** ，三色标记法是 **标记-清除法** 的一种增强版本。\n\n\n### 标记清除法(mark and sweep)\n原始的标记清楚法分为两个步骤：\n\n1. 标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记\n2. 清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。\n\n这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。\n\n\n### 三色标记法\n三色标记法是对标记阶段的改进，原理如下：\n\n1. 初始状态所有对象都是白色。\n2. 从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）\n\n> 那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  \n\n![](assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png)\n\n1. 分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）\n2. 重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。\n\n也可以参考下面的动图辅助理解：\n\n![](assets/16c9abaa4032c7ea.gif)\n\n\n## Go GC如何工作\n上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 **Golang GC的大部分处理是和用户代码并行的** 。\n\nGC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：\n\n1. Mark:\n\t* Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 **这个过程需要STW**\n\t* GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 **该过程后台并行执行**\n\n2. Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 **这个过程也是会STW的。**\n\n3. Sweep: 按照标记结果回收所有的白色对象， **该过程后台并行执行**\n\n4. Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？\n\n\n## 写屏障(Write Barrier)\n写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。\n\n\n## 辅助GC\n从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码-->⼤段GC-->⽤户代码”，那么分散以后实际上变成了“⽤户代码-->⼩段 GC-->⽤户代码-->⼩段GC-->⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。\n\n\n## 如何进行GC调优\n衡量GC对程序的影响可以参考这篇文章， [Go 程序的性能调试问题](https://www.oschina.net/translate/debugging-performance-issues-in-go-programs) 。\n\n减少对象的分配，合理重复利用； 避免string与[]byte转化；\n\n> 两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  \n\n少量使用+连接 string；\n\n> Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  \n\n\n## GC触发条件\n自动垃圾回收的触发条件有两个：\n\n1. 超过内存大小阈值\n2. 达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。\n\n## 最后\n虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用`runtime.GC()`触发GC。\n\n参考：\n\n[string讨论](https://gocn.vip/question/265)\n\n[Go语言——垃圾回收GC](https://www.jianshu.com/p/8b0c0f7772da)\n\n[Golang 垃圾回收剖析](https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ)\n\n[Golang垃圾回收机制详解](https://blog.csdn.net/u010649766/article/details/80582153)\n\n[go垃圾回收概要](https://lihaoquan.me/2016/11/3/go-gc-general.html)\n\n[常见GC算法及Golang GC](https://wudaijun.com/2017/12/gc-study/)\n\n[搞懂Go垃圾回收](https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com%3Futm_campaign%3Dstudygolang.com&utm_source=studygolang.com)\n","source":"_posts/开发/go垃圾回收.md","raw":"---\ntitle: go垃圾回收\ncategories:\n  - 开发\ntags:\n  - golang\n  - 内存管理\ndate: 2020-12-01 13:10:16\n---\n# 搞懂Go垃圾回收\n本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。\n\n\n## 什么是垃圾回收\n垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 [维基百科](https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29)\n\n简单地说， **垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。**\n\n\n## go的垃圾回收\n当前Golang使用的垃圾回收机制是 **三色标记发** 配合 **写屏障** 和 **辅助GC** ，三色标记法是 **标记-清除法** 的一种增强版本。\n\n\n### 标记清除法(mark and sweep)\n原始的标记清楚法分为两个步骤：\n\n1. 标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记\n2. 清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。\n\n这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。\n\n\n### 三色标记法\n三色标记法是对标记阶段的改进，原理如下：\n\n1. 初始状态所有对象都是白色。\n2. 从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）\n\n> 那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  \n\n![](assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png)\n\n1. 分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）\n2. 重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。\n\n也可以参考下面的动图辅助理解：\n\n![](assets/16c9abaa4032c7ea.gif)\n\n\n## Go GC如何工作\n上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 **Golang GC的大部分处理是和用户代码并行的** 。\n\nGC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：\n\n1. Mark:\n\t* Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 **这个过程需要STW**\n\t* GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 **该过程后台并行执行**\n\n2. Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 **这个过程也是会STW的。**\n\n3. Sweep: 按照标记结果回收所有的白色对象， **该过程后台并行执行**\n\n4. Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？\n\n\n## 写屏障(Write Barrier)\n写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。\n\n\n## 辅助GC\n从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码-->⼤段GC-->⽤户代码”，那么分散以后实际上变成了“⽤户代码-->⼩段 GC-->⽤户代码-->⼩段GC-->⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。\n\n\n## 如何进行GC调优\n衡量GC对程序的影响可以参考这篇文章， [Go 程序的性能调试问题](https://www.oschina.net/translate/debugging-performance-issues-in-go-programs) 。\n\n减少对象的分配，合理重复利用； 避免string与[]byte转化；\n\n> 两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  \n\n少量使用+连接 string；\n\n> Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  \n\n\n## GC触发条件\n自动垃圾回收的触发条件有两个：\n\n1. 超过内存大小阈值\n2. 达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。\n\n## 最后\n虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用`runtime.GC()`触发GC。\n\n参考：\n\n[string讨论](https://gocn.vip/question/265)\n\n[Go语言——垃圾回收GC](https://www.jianshu.com/p/8b0c0f7772da)\n\n[Golang 垃圾回收剖析](https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ)\n\n[Golang垃圾回收机制详解](https://blog.csdn.net/u010649766/article/details/80582153)\n\n[go垃圾回收概要](https://lihaoquan.me/2016/11/3/go-gc-general.html)\n\n[常见GC算法及Golang GC](https://wudaijun.com/2017/12/gc-study/)\n\n[搞懂Go垃圾回收](https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com%3Futm_campaign%3Dstudygolang.com&utm_source=studygolang.com)\n","slug":"开发/go垃圾回收","published":1,"updated":"2020-12-01T05:11:48.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsen100014kpwd00w3cll","content":"<h1 id=\"搞懂Go垃圾回收\"><a href=\"#搞懂Go垃圾回收\" class=\"headerlink\" title=\"搞懂Go垃圾回收\"></a>搞懂Go垃圾回收</h1><p>本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。</p>\n<h2 id=\"什么是垃圾回收\"><a href=\"#什么是垃圾回收\" class=\"headerlink\" title=\"什么是垃圾回收\"></a>什么是垃圾回收</h2><p>垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29\">维基百科</a></p>\n<p>简单地说， <strong>垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。</strong></p>\n<h2 id=\"go的垃圾回收\"><a href=\"#go的垃圾回收\" class=\"headerlink\" title=\"go的垃圾回收\"></a>go的垃圾回收</h2><p>当前Golang使用的垃圾回收机制是 <strong>三色标记发</strong> 配合 <strong>写屏障</strong> 和 <strong>辅助GC</strong> ，三色标记法是 <strong>标记-清除法</strong> 的一种增强版本。</p>\n<h3 id=\"标记清除法-mark-and-sweep\"><a href=\"#标记清除法-mark-and-sweep\" class=\"headerlink\" title=\"标记清除法(mark and sweep)\"></a>标记清除法(mark and sweep)</h3><p>原始的标记清楚法分为两个步骤：</p>\n<ol>\n<li>标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记</li>\n<li>清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。</li>\n</ol>\n<p>这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。</p>\n<h3 id=\"三色标记法\"><a href=\"#三色标记法\" class=\"headerlink\" title=\"三色标记法\"></a>三色标记法</h3><p>三色标记法是对标记阶段的改进，原理如下：</p>\n<ol>\n<li>初始状态所有对象都是白色。</li>\n<li>从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）</li>\n</ol>\n<blockquote>\n<p>那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  </p>\n</blockquote>\n<p><img src=\"assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png\"></p>\n<ol>\n<li>分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）</li>\n<li>重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。</li>\n</ol>\n<p>也可以参考下面的动图辅助理解：</p>\n<p><img src=\"assets/16c9abaa4032c7ea.gif\"></p>\n<h2 id=\"Go-GC如何工作\"><a href=\"#Go-GC如何工作\" class=\"headerlink\" title=\"Go GC如何工作\"></a>Go GC如何工作</h2><p>上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 <strong>Golang GC的大部分处理是和用户代码并行的</strong> 。</p>\n<p>GC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：</p>\n<ol>\n<li><p>Mark:</p>\n<ul>\n<li>Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 <strong>这个过程需要STW</strong></li>\n<li>GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 <strong>该过程后台并行执行</strong></li>\n</ul>\n</li>\n<li><p>Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 <strong>这个过程也是会STW的。</strong></p>\n</li>\n<li><p>Sweep: 按照标记结果回收所有的白色对象， <strong>该过程后台并行执行</strong></p>\n</li>\n<li><p>Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？</p>\n</li>\n</ol>\n<h2 id=\"写屏障-Write-Barrier\"><a href=\"#写屏障-Write-Barrier\" class=\"headerlink\" title=\"写屏障(Write Barrier)\"></a>写屏障(Write Barrier)</h2><p>写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。</p>\n<h2 id=\"辅助GC\"><a href=\"#辅助GC\" class=\"headerlink\" title=\"辅助GC\"></a>辅助GC</h2><p>从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码–&gt;⼤段GC–&gt;⽤户代码”，那么分散以后实际上变成了“⽤户代码–&gt;⼩段 GC–&gt;⽤户代码–&gt;⼩段GC–&gt;⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。</p>\n<h2 id=\"如何进行GC调优\"><a href=\"#如何进行GC调优\" class=\"headerlink\" title=\"如何进行GC调优\"></a>如何进行GC调优</h2><p>衡量GC对程序的影响可以参考这篇文章， <a href=\"https://www.oschina.net/translate/debugging-performance-issues-in-go-programs\">Go 程序的性能调试问题</a> 。</p>\n<p>减少对象的分配，合理重复利用； 避免string与[]byte转化；</p>\n<blockquote>\n<p>两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  </p>\n</blockquote>\n<p>少量使用+连接 string；</p>\n<blockquote>\n<p>Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  </p>\n</blockquote>\n<h2 id=\"GC触发条件\"><a href=\"#GC触发条件\" class=\"headerlink\" title=\"GC触发条件\"></a>GC触发条件</h2><p>自动垃圾回收的触发条件有两个：</p>\n<ol>\n<li>超过内存大小阈值</li>\n<li>达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用<code>runtime.GC()</code>触发GC。</p>\n<p>参考：</p>\n<p><a href=\"https://gocn.vip/question/265\">string讨论</a></p>\n<p><a href=\"https://www.jianshu.com/p/8b0c0f7772da\">Go语言——垃圾回收GC</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ\">Golang 垃圾回收剖析</a></p>\n<p><a href=\"https://blog.csdn.net/u010649766/article/details/80582153\">Golang垃圾回收机制详解</a></p>\n<p><a href=\"https://lihaoquan.me/2016/11/3/go-gc-general.html\">go垃圾回收概要</a></p>\n<p><a href=\"https://wudaijun.com/2017/12/gc-study/\">常见GC算法及Golang GC</a></p>\n<p><a href=\"https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com?utm_campaign=studygolang.com&utm_source=studygolang.com\">搞懂Go垃圾回收</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<h1 id=\"搞懂Go垃圾回收\"><a href=\"#搞懂Go垃圾回收\" class=\"headerlink\" title=\"搞懂Go垃圾回收\"></a>搞懂Go垃圾回收</h1><p>本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。</p>\n<h2 id=\"什么是垃圾回收\"><a href=\"#什么是垃圾回收\" class=\"headerlink\" title=\"什么是垃圾回收\"></a>什么是垃圾回收</h2><p>垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29\">维基百科</a></p>\n<p>简单地说， <strong>垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。</strong></p>\n<h2 id=\"go的垃圾回收\"><a href=\"#go的垃圾回收\" class=\"headerlink\" title=\"go的垃圾回收\"></a>go的垃圾回收</h2><p>当前Golang使用的垃圾回收机制是 <strong>三色标记发</strong> 配合 <strong>写屏障</strong> 和 <strong>辅助GC</strong> ，三色标记法是 <strong>标记-清除法</strong> 的一种增强版本。</p>\n<h3 id=\"标记清除法-mark-and-sweep\"><a href=\"#标记清除法-mark-and-sweep\" class=\"headerlink\" title=\"标记清除法(mark and sweep)\"></a>标记清除法(mark and sweep)</h3><p>原始的标记清楚法分为两个步骤：</p>\n<ol>\n<li>标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记</li>\n<li>清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。</li>\n</ol>\n<p>这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。</p>\n<h3 id=\"三色标记法\"><a href=\"#三色标记法\" class=\"headerlink\" title=\"三色标记法\"></a>三色标记法</h3><p>三色标记法是对标记阶段的改进，原理如下：</p>\n<ol>\n<li>初始状态所有对象都是白色。</li>\n<li>从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）</li>\n</ol>\n<blockquote>\n<p>那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  </p>\n</blockquote>\n<p><img src=\"assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png\"></p>\n<ol>\n<li>分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）</li>\n<li>重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。</li>\n</ol>\n<p>也可以参考下面的动图辅助理解：</p>\n<p><img src=\"assets/16c9abaa4032c7ea.gif\"></p>\n<h2 id=\"Go-GC如何工作\"><a href=\"#Go-GC如何工作\" class=\"headerlink\" title=\"Go GC如何工作\"></a>Go GC如何工作</h2><p>上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 <strong>Golang GC的大部分处理是和用户代码并行的</strong> 。</p>\n<p>GC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：</p>\n<ol>\n<li><p>Mark:</p>\n<ul>\n<li>Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 <strong>这个过程需要STW</strong></li>\n<li>GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 <strong>该过程后台并行执行</strong></li>\n</ul>\n</li>\n<li><p>Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 <strong>这个过程也是会STW的。</strong></p>\n</li>\n<li><p>Sweep: 按照标记结果回收所有的白色对象， <strong>该过程后台并行执行</strong></p>\n</li>\n<li><p>Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？</p>\n</li>\n</ol>\n<h2 id=\"写屏障-Write-Barrier\"><a href=\"#写屏障-Write-Barrier\" class=\"headerlink\" title=\"写屏障(Write Barrier)\"></a>写屏障(Write Barrier)</h2><p>写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。</p>\n<h2 id=\"辅助GC\"><a href=\"#辅助GC\" class=\"headerlink\" title=\"辅助GC\"></a>辅助GC</h2><p>从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码–&gt;⼤段GC–&gt;⽤户代码”，那么分散以后实际上变成了“⽤户代码–&gt;⼩段 GC–&gt;⽤户代码–&gt;⼩段GC–&gt;⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。</p>\n<h2 id=\"如何进行GC调优\"><a href=\"#如何进行GC调优\" class=\"headerlink\" title=\"如何进行GC调优\"></a>如何进行GC调优</h2><p>衡量GC对程序的影响可以参考这篇文章， <a href=\"https://www.oschina.net/translate/debugging-performance-issues-in-go-programs\">Go 程序的性能调试问题</a> 。</p>\n<p>减少对象的分配，合理重复利用； 避免string与[]byte转化；</p>\n<blockquote>\n<p>两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  </p>\n</blockquote>\n<p>少量使用+连接 string；</p>\n<blockquote>\n<p>Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  </p>\n</blockquote>\n<h2 id=\"GC触发条件\"><a href=\"#GC触发条件\" class=\"headerlink\" title=\"GC触发条件\"></a>GC触发条件</h2><p>自动垃圾回收的触发条件有两个：</p>\n<ol>\n<li>超过内存大小阈值</li>\n<li>达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用<code>runtime.GC()</code>触发GC。</p>\n<p>参考：</p>\n<p><a href=\"https://gocn.vip/question/265\">string讨论</a></p>\n<p><a href=\"https://www.jianshu.com/p/8b0c0f7772da\">Go语言——垃圾回收GC</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ\">Golang 垃圾回收剖析</a></p>\n<p><a href=\"https://blog.csdn.net/u010649766/article/details/80582153\">Golang垃圾回收机制详解</a></p>\n<p><a href=\"https://lihaoquan.me/2016/11/3/go-gc-general.html\">go垃圾回收概要</a></p>\n<p><a href=\"https://wudaijun.com/2017/12/gc-study/\">常见GC算法及Golang GC</a></p>\n<p><a href=\"https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com?utm_campaign=studygolang.com&utm_source=studygolang.com\">搞懂Go垃圾回收</a></p>\n"},{"title":"go程序初始化顺序","date":"2020-12-01T04:51:14.000Z","_content":"在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。\n\n### 包的执行顺序\n\n* 在 main 包中的 go 文件默认总是会被执行\n* 同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行\n* 其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行\n* 被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main\n* 一个包被其它多个包 import，但只能被初始化一次\n* main 包总是被最后一个初始化，因为它总是依赖别的包\n* 避免出现循环 import，例如：A –> B –> C –> A\n\ngo 程序的初始化顺序见下图：\n\n![](assets/20170831112523944.jpeg)\n\n### init 和 main 函数\n\ninit()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：\n相同点：\n\n* 两个函数在定义时不能有任何的参数和返回值\n* 该函数只能由 go 程序自动调用，不可以被引用\n\n不同点：\n\n* init 可以应用于任意包中，且可以重复定义多个。\n* main 函数只能用于 main 包中，且只能定义一个。\n\n两个函数的执行顺序：\n\n* 对同一个 go 文件的 init( ) 调用顺序是从上到下的\n* 对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数\n* 对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数\n* 如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main，一次执行对应的 init 方法。\n\n### 常量、变量、init()、main()\n\n在同一个文件中，常量、变量、init()、main() 依次进行初始化。\n\n[go编程：浅析go程序初始化顺序](https://blog.csdn.net/claram/article/details/77745665)\n","source":"_posts/开发/go程序初始化顺序.md","raw":"---\ntitle: go程序初始化顺序\ncategories:\n  - 开发\ntags:\n  - golang\ndate: 2020-12-01 12:51:14\n---\n在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。\n\n### 包的执行顺序\n\n* 在 main 包中的 go 文件默认总是会被执行\n* 同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行\n* 其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行\n* 被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main\n* 一个包被其它多个包 import，但只能被初始化一次\n* main 包总是被最后一个初始化，因为它总是依赖别的包\n* 避免出现循环 import，例如：A –> B –> C –> A\n\ngo 程序的初始化顺序见下图：\n\n![](assets/20170831112523944.jpeg)\n\n### init 和 main 函数\n\ninit()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：\n相同点：\n\n* 两个函数在定义时不能有任何的参数和返回值\n* 该函数只能由 go 程序自动调用，不可以被引用\n\n不同点：\n\n* init 可以应用于任意包中，且可以重复定义多个。\n* main 函数只能用于 main 包中，且只能定义一个。\n\n两个函数的执行顺序：\n\n* 对同一个 go 文件的 init( ) 调用顺序是从上到下的\n* 对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数\n* 对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数\n* 如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main，一次执行对应的 init 方法。\n\n### 常量、变量、init()、main()\n\n在同一个文件中，常量、变量、init()、main() 依次进行初始化。\n\n[go编程：浅析go程序初始化顺序](https://blog.csdn.net/claram/article/details/77745665)\n","slug":"开发/go程序初始化顺序","published":1,"updated":"2020-12-01T04:58:19.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsen300034kpwbiwk0r65","content":"<p>在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。</p>\n<h3 id=\"包的执行顺序\"><a href=\"#包的执行顺序\" class=\"headerlink\" title=\"包的执行顺序\"></a>包的执行顺序</h3><ul>\n<li>在 main 包中的 go 文件默认总是会被执行</li>\n<li>同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行</li>\n<li>其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行</li>\n<li>被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main</li>\n<li>一个包被其它多个包 import，但只能被初始化一次</li>\n<li>main 包总是被最后一个初始化，因为它总是依赖别的包</li>\n<li>避免出现循环 import，例如：A –&gt; B –&gt; C –&gt; A</li>\n</ul>\n<p>go 程序的初始化顺序见下图：</p>\n<p><img src=\"assets/20170831112523944.jpeg\"></p>\n<h3 id=\"init-和-main-函数\"><a href=\"#init-和-main-函数\" class=\"headerlink\" title=\"init 和 main 函数\"></a>init 和 main 函数</h3><p>init()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：<br>相同点：</p>\n<ul>\n<li>两个函数在定义时不能有任何的参数和返回值</li>\n<li>该函数只能由 go 程序自动调用，不可以被引用</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>init 可以应用于任意包中，且可以重复定义多个。</li>\n<li>main 函数只能用于 main 包中，且只能定义一个。</li>\n</ul>\n<p>两个函数的执行顺序：</p>\n<ul>\n<li>对同一个 go 文件的 init( ) 调用顺序是从上到下的</li>\n<li>对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数</li>\n<li>对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数</li>\n<li>如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main，一次执行对应的 init 方法。</li>\n</ul>\n<h3 id=\"常量、变量、init-、main\"><a href=\"#常量、变量、init-、main\" class=\"headerlink\" title=\"常量、变量、init()、main()\"></a>常量、变量、init()、main()</h3><p>在同一个文件中，常量、变量、init()、main() 依次进行初始化。</p>\n<p><a href=\"https://blog.csdn.net/claram/article/details/77745665\">go编程：浅析go程序初始化顺序</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。</p>\n<h3 id=\"包的执行顺序\"><a href=\"#包的执行顺序\" class=\"headerlink\" title=\"包的执行顺序\"></a>包的执行顺序</h3><ul>\n<li>在 main 包中的 go 文件默认总是会被执行</li>\n<li>同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行</li>\n<li>其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行</li>\n<li>被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main</li>\n<li>一个包被其它多个包 import，但只能被初始化一次</li>\n<li>main 包总是被最后一个初始化，因为它总是依赖别的包</li>\n<li>避免出现循环 import，例如：A –&gt; B –&gt; C –&gt; A</li>\n</ul>\n<p>go 程序的初始化顺序见下图：</p>\n<p><img src=\"assets/20170831112523944.jpeg\"></p>\n<h3 id=\"init-和-main-函数\"><a href=\"#init-和-main-函数\" class=\"headerlink\" title=\"init 和 main 函数\"></a>init 和 main 函数</h3><p>init()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：<br>相同点：</p>\n<ul>\n<li>两个函数在定义时不能有任何的参数和返回值</li>\n<li>该函数只能由 go 程序自动调用，不可以被引用</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>init 可以应用于任意包中，且可以重复定义多个。</li>\n<li>main 函数只能用于 main 包中，且只能定义一个。</li>\n</ul>\n<p>两个函数的执行顺序：</p>\n<ul>\n<li>对同一个 go 文件的 init( ) 调用顺序是从上到下的</li>\n<li>对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数</li>\n<li>对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数</li>\n<li>如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main，一次执行对应的 init 方法。</li>\n</ul>\n<h3 id=\"常量、变量、init-、main\"><a href=\"#常量、变量、init-、main\" class=\"headerlink\" title=\"常量、变量、init()、main()\"></a>常量、变量、init()、main()</h3><p>在同一个文件中，常量、变量、init()、main() 依次进行初始化。</p>\n<p><a href=\"https://blog.csdn.net/claram/article/details/77745665\">go编程：浅析go程序初始化顺序</a></p>\n"},{"title":"go逃逸分析","date":"2020-12-01T05:23:07.000Z","_content":"# Go 逃逸分析\n\n## 堆和栈\n\n要理解什么是逃逸分析会涉及堆和栈的一些基本知识，如果忘记的同学我们可以简单的回顾一下：\n\n- 堆（Heap）：一般来讲是人为手动进行管理，手动申请、分配、释放。堆适合不可预知大小的内存分配，这也意味着为此付出的代价是分配速度较慢，而且会形成内存碎片。\n- 栈（Stack）：由编译器进行管理，自动申请、分配、释放。一般不会太大，因此栈的分配和回收速度非常快；我们常见的函数参数（不同平台允许存放的数量不同），局部变量等都会存放在栈上。\n\n栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。\n\n通俗比喻的说，`栈`就如我们去饭馆吃饭，只需要点菜（发出申请）--》吃吃吃（使用内存）--》吃饱就跑剩下的交给饭馆（操作系统自动回收），而`堆`就如在家里做饭，大到家，小到买什么菜，每一个环节都需要自己来实现，但是自由度会大很多。\n\n\n\n## 什么是逃逸分析\n\n在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。\n\n再往简单的说，Go是通过在编译器里做逃逸分析（escape analysis）来决定一个对象放栈上还是放堆上，不逃逸的对象放栈上，可能逃逸的放堆上；即我发现`变量`在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配和回收比堆上快很多；反之，函数内的普通变量经过`逃逸分析`后，发现在函数退出后`变量`还有在其他地方上引用，那就将`变量`分配在堆上。做到按需分配（哪里的人民需要我，我就往哪去~~，一个党员的呐喊）。\n\n\n\n## 为何需要逃逸分析\n\nok，了解完`堆`和`栈`各自的优缺点后，我们就可以更好的知道`逃逸分析`存在的目的了：\n\n1. 减少`gc`压力，栈上的变量，随着函数退出后系统直接回收，不需要`gc`标记后再清除。\n2. 减少内存碎片的产生。\n3. 减轻分配堆内存的开销，提高程序的运行速度。\n\n\n\n## 如何确定是否逃逸\n\n在`Go`中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志：\n\n```shell\ngo run -gcflags '-m -l' main.go\n```\n\n- `-m` 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 `-m`，但是信息量较大，一般用 1 个就可以了。\n- `-l` 会禁用函数内联，在这里禁用掉`内联`能更好的观察逃逸情况，减少干扰。\n\n\n\n## 逃逸案例\n\n### 案例一：取地址发生逃逸\n\n```go\npackage main\n\ntype UserData struct {\n\tName  string\n}\n\nfunc main() {\n\tvar info UserData\n\tinfo.Name = \"WilburXu\"\n\t_ = GetUserInfo(info)\n}\n\nfunc GetUserInfo(userInfo UserData) *UserData {\n\treturn &userInfo\n}\n```\n\n执行 `go run -gcflags '-m -l' main.go` 后返回以下结果：\n\n```shell\n# command-line-arguments\n.\\main.go:14:9: &userInfo escapes to heap\n.\\main.go:13:18: moved to heap: userInfo\n```\n\n> GetUserInfo函数里面的变量 `userInfo` 逃到堆上了（分配到堆内存空间上了）。\n>\n> GetUserInfo 函数的返回值为 *UserData 指针类型，然后 将值变量`userInfo` 的地址返回，此时编译器会判断该值可能会在函数外使用，就将其分配到了堆上，所以变量`userInfo`就逃逸了。\n\n#### 优化方案\n\n```go\nfunc main() {\n\tvar info UserData\n\tinfo.Name = \"WilburXu\"\n\t_ = GetUserInfo(&info)\n}\n\nfunc GetUserInfo(userInfo *UserData) *UserData {\n\treturn userInfo\n}\n```\n\n```shell\n# command-line-arguments\n.\\main.go:13:18: leaking param: userInfo to result ~r1 level=0\n.\\main.go:10:18: main &info does not escape\n```\n\n对一个变量取地址，可能会被分配到堆上。但是编译器进行逃逸分析后，如果发现到在函数返回后，此变量不会被引用，那么还是会被分配到栈上。套个取址符，就想骗补助？\n\n编译器傲娇的说：Too young，Too Cool...！\n\n\n\n### 案例二 ：未确定类型\n\n```go\npackage main\n\ntype User struct {\n\tname interface{}\n}\n\nfunc main() {\n\tname := \"WilburXu\"\n\tMyPrintln(name)\n}\n\nfunc MyPrintln(one interface{}) (n int, err error) {\n\tvar userInfo = new(User)\n\tuserInfo.name = one // 泛型赋值 逃逸咯\n\treturn\n}\n```\n\n执行 `go run -gcflags '-m -l' main.go` 后返回以下结果：\n\n```shell\n# command-line-arguments\n./main.go:12:16: leaking param: one\n./main.go:13:20: MyPrintln new(User) does not escape\n./main.go:9:11: name escapes to heap\n```\n\n这里可能有同学会好奇，`MyPrintln`函数内并没有被引用的便利，为什么变了`name`会被分配到了`堆`上呢？\n\n上一个案例我们知道了，普通的手法想去\"骗取补助\"，聪明灵利的编译器是不会“上当受骗的噢”；但是对于`interface`类型，很遗憾，go 编译器或者链接器不可能在编译的时候计算两者的对应关系，因此只能分配到`堆`上。\n\n### 优化方案\n\n将结构体`User`的成员`name`的类型、函数`MyPringLn`参数`one`的类型改为 `string`，将得出：\n\n```shell\n# command-line-arguments\n./main.go:12:16: leaking param: one\n./main.go:13:20: MyPrintln new(User) does not escape\n```\n\n### 拓展分析\n\n对于案例二的分析，我们还可以通过反编译命令`go tool compile -S main.go`查看，会发现如果为`interface`类型，main主函数在编译后会`额外`多出以下指令：\n\n```shell\n# main.go:9 -> MyPrintln(name)\n\t0x001d 00029 (main.go:9)\tPCDATA\t$2, $1\n\t0x001d 00029 (main.go:9)\tPCDATA\t$0, $1\n\t0x001d 00029 (main.go:9)\tLEAQ\tgo.string.\"WilburXu\"(SB), AX\n\t0x0024 00036 (main.go:9)\tPCDATA\t$2, $0\n\t0x0024 00036 (main.go:9)\tMOVQ\tAX, \"\"..autotmp_5+32(SP)\n\t0x0029 00041 (main.go:9)\tMOVQ\t$8, \"\"..autotmp_5+40(SP)\n\t0x0032 00050 (main.go:9)\tPCDATA\t$2, $1\n\t0x0032 00050 (main.go:9)\tLEAQ\ttype.string(SB), AX\n\t0x0039 00057 (main.go:9)\tPCDATA\t$2, $0\n\t0x0039 00057 (main.go:9)\tMOVQ\tAX, (SP)\n\t0x003d 00061 (main.go:9)\tPCDATA\t$2, $1\n\t0x003d 00061 (main.go:9)\tLEAQ\t\"\"..autotmp_5+32(SP), AX\n\t0x0042 00066 (main.go:9)\tPCDATA\t$2, $0\n\t0x0042 00066 (main.go:9)\tMOVQ\tAX, 8(SP)\n\t0x0047 00071 (main.go:9)\tCALL\truntime.convT2Estring(SB)\n```\n\n对于`Go汇编语法`不熟悉的可以参考 [Golang汇编快速指南](https://studygolang.com/articles/2917)\n\n\n\n### 案例三：间接赋值（Assignment to indirection escapes）\n\n对某个引用类对象中的引用类成员进行赋值。Go 语言中的引用类数据类型有 `func`, `interface`, `slice`, `map`, `chan`, `*Type(指针)`。\n\n```go\npackage main\n\ntype User struct {\n\tname interface{}\n\tage *int\n}\n\nfunc main() {\n\tvar (\n\t\tuserOne User\n\t\tuserTwo = new(User)\n\t)\n\tuserOne.name = \"WilburXuOne\"\t// 不逃逸\n\tuserTwo.name = \"WilburXuTwo\"\t// 逃逸\n\n\tuserOne.age = new(int)\t// 不逃逸\n\tuserTwo.age = new(int)\t// 逃逸\n}\n```\n\n执行 `go run -gcflags '-m -l' main.go` 后返回以下结果：\n\n```shell\n# command-line-arguments\n.\\main.go:14:17: \"WilburXuTwo\" escapes to heap\n.\\main.go:17:19: new(int) escapes to heap\n.\\main.go:11:16: main new(User) does not escape\n.\\main.go:13:17: main \"WilburXuOne\" does not escape\n.\\main.go:16:19: main new(int) does not escape\n```\n\n为什么这里`值`类型不会逃逸而`引用类型`会逃逸呢？这是因为在 `userTwo = new(User)` 对象的创建时，编译器先是分析`userTwo` 对象可能分配在`堆`上，同时成员变量 `name` 和 `age` 也为`引用类型`，为了保证不出现`栈`回收后，导致对象`userTwo`的成员值也被回收，所以`name`和`age`需要逃逸。\n\n但是，如果`name`和`age`为值类型，那么编译器虽然初步分析`userTwo`会分配在`堆`上，但由于`main`主函数结束后，变量都会被回收，也就是说对象没有被其他引用，那么就都会分配在`栈`上，所以`name`和`age`没有发生逃逸。\n\n#### 优化建议\n\n尽量不要将`引用对象`赋值给`引用对象`。\n\n\n\n## 总结\n\n不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。\n\nGo的编译器就如一个聪明的`孩子`一般，大多时候在逃逸分析问题上的处理都令人眼前一亮，但有时`闹性子`的时候处理也是非常粗糙的分析或完全放弃，毕竟这是孩子天性不是吗？ 所以也需要我们在编写代码的时候多多观察，多多留意了。\n\n\n\n## 参考文章\n\nhttp://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html\n\nhttps://segmentfault.com/a/1190000019234268\n\nhttps://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview#heading=h.3i6ywlgy4wrw\n\nhttp://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html\n\n[golang 逃逸分析(https://studygolang.com/articles/21880)\n","source":"_posts/开发/go逃逸分析.md","raw":"---\ntitle: go逃逸分析\ncategories:\n  - 开发\ntags:\n  - golang\n  - 内存管理\ndate: 2020-12-01 13:23:07\n---\n# Go 逃逸分析\n\n## 堆和栈\n\n要理解什么是逃逸分析会涉及堆和栈的一些基本知识，如果忘记的同学我们可以简单的回顾一下：\n\n- 堆（Heap）：一般来讲是人为手动进行管理，手动申请、分配、释放。堆适合不可预知大小的内存分配，这也意味着为此付出的代价是分配速度较慢，而且会形成内存碎片。\n- 栈（Stack）：由编译器进行管理，自动申请、分配、释放。一般不会太大，因此栈的分配和回收速度非常快；我们常见的函数参数（不同平台允许存放的数量不同），局部变量等都会存放在栈上。\n\n栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。\n\n通俗比喻的说，`栈`就如我们去饭馆吃饭，只需要点菜（发出申请）--》吃吃吃（使用内存）--》吃饱就跑剩下的交给饭馆（操作系统自动回收），而`堆`就如在家里做饭，大到家，小到买什么菜，每一个环节都需要自己来实现，但是自由度会大很多。\n\n\n\n## 什么是逃逸分析\n\n在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。\n\n再往简单的说，Go是通过在编译器里做逃逸分析（escape analysis）来决定一个对象放栈上还是放堆上，不逃逸的对象放栈上，可能逃逸的放堆上；即我发现`变量`在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配和回收比堆上快很多；反之，函数内的普通变量经过`逃逸分析`后，发现在函数退出后`变量`还有在其他地方上引用，那就将`变量`分配在堆上。做到按需分配（哪里的人民需要我，我就往哪去~~，一个党员的呐喊）。\n\n\n\n## 为何需要逃逸分析\n\nok，了解完`堆`和`栈`各自的优缺点后，我们就可以更好的知道`逃逸分析`存在的目的了：\n\n1. 减少`gc`压力，栈上的变量，随着函数退出后系统直接回收，不需要`gc`标记后再清除。\n2. 减少内存碎片的产生。\n3. 减轻分配堆内存的开销，提高程序的运行速度。\n\n\n\n## 如何确定是否逃逸\n\n在`Go`中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志：\n\n```shell\ngo run -gcflags '-m -l' main.go\n```\n\n- `-m` 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 `-m`，但是信息量较大，一般用 1 个就可以了。\n- `-l` 会禁用函数内联，在这里禁用掉`内联`能更好的观察逃逸情况，减少干扰。\n\n\n\n## 逃逸案例\n\n### 案例一：取地址发生逃逸\n\n```go\npackage main\n\ntype UserData struct {\n\tName  string\n}\n\nfunc main() {\n\tvar info UserData\n\tinfo.Name = \"WilburXu\"\n\t_ = GetUserInfo(info)\n}\n\nfunc GetUserInfo(userInfo UserData) *UserData {\n\treturn &userInfo\n}\n```\n\n执行 `go run -gcflags '-m -l' main.go` 后返回以下结果：\n\n```shell\n# command-line-arguments\n.\\main.go:14:9: &userInfo escapes to heap\n.\\main.go:13:18: moved to heap: userInfo\n```\n\n> GetUserInfo函数里面的变量 `userInfo` 逃到堆上了（分配到堆内存空间上了）。\n>\n> GetUserInfo 函数的返回值为 *UserData 指针类型，然后 将值变量`userInfo` 的地址返回，此时编译器会判断该值可能会在函数外使用，就将其分配到了堆上，所以变量`userInfo`就逃逸了。\n\n#### 优化方案\n\n```go\nfunc main() {\n\tvar info UserData\n\tinfo.Name = \"WilburXu\"\n\t_ = GetUserInfo(&info)\n}\n\nfunc GetUserInfo(userInfo *UserData) *UserData {\n\treturn userInfo\n}\n```\n\n```shell\n# command-line-arguments\n.\\main.go:13:18: leaking param: userInfo to result ~r1 level=0\n.\\main.go:10:18: main &info does not escape\n```\n\n对一个变量取地址，可能会被分配到堆上。但是编译器进行逃逸分析后，如果发现到在函数返回后，此变量不会被引用，那么还是会被分配到栈上。套个取址符，就想骗补助？\n\n编译器傲娇的说：Too young，Too Cool...！\n\n\n\n### 案例二 ：未确定类型\n\n```go\npackage main\n\ntype User struct {\n\tname interface{}\n}\n\nfunc main() {\n\tname := \"WilburXu\"\n\tMyPrintln(name)\n}\n\nfunc MyPrintln(one interface{}) (n int, err error) {\n\tvar userInfo = new(User)\n\tuserInfo.name = one // 泛型赋值 逃逸咯\n\treturn\n}\n```\n\n执行 `go run -gcflags '-m -l' main.go` 后返回以下结果：\n\n```shell\n# command-line-arguments\n./main.go:12:16: leaking param: one\n./main.go:13:20: MyPrintln new(User) does not escape\n./main.go:9:11: name escapes to heap\n```\n\n这里可能有同学会好奇，`MyPrintln`函数内并没有被引用的便利，为什么变了`name`会被分配到了`堆`上呢？\n\n上一个案例我们知道了，普通的手法想去\"骗取补助\"，聪明灵利的编译器是不会“上当受骗的噢”；但是对于`interface`类型，很遗憾，go 编译器或者链接器不可能在编译的时候计算两者的对应关系，因此只能分配到`堆`上。\n\n### 优化方案\n\n将结构体`User`的成员`name`的类型、函数`MyPringLn`参数`one`的类型改为 `string`，将得出：\n\n```shell\n# command-line-arguments\n./main.go:12:16: leaking param: one\n./main.go:13:20: MyPrintln new(User) does not escape\n```\n\n### 拓展分析\n\n对于案例二的分析，我们还可以通过反编译命令`go tool compile -S main.go`查看，会发现如果为`interface`类型，main主函数在编译后会`额外`多出以下指令：\n\n```shell\n# main.go:9 -> MyPrintln(name)\n\t0x001d 00029 (main.go:9)\tPCDATA\t$2, $1\n\t0x001d 00029 (main.go:9)\tPCDATA\t$0, $1\n\t0x001d 00029 (main.go:9)\tLEAQ\tgo.string.\"WilburXu\"(SB), AX\n\t0x0024 00036 (main.go:9)\tPCDATA\t$2, $0\n\t0x0024 00036 (main.go:9)\tMOVQ\tAX, \"\"..autotmp_5+32(SP)\n\t0x0029 00041 (main.go:9)\tMOVQ\t$8, \"\"..autotmp_5+40(SP)\n\t0x0032 00050 (main.go:9)\tPCDATA\t$2, $1\n\t0x0032 00050 (main.go:9)\tLEAQ\ttype.string(SB), AX\n\t0x0039 00057 (main.go:9)\tPCDATA\t$2, $0\n\t0x0039 00057 (main.go:9)\tMOVQ\tAX, (SP)\n\t0x003d 00061 (main.go:9)\tPCDATA\t$2, $1\n\t0x003d 00061 (main.go:9)\tLEAQ\t\"\"..autotmp_5+32(SP), AX\n\t0x0042 00066 (main.go:9)\tPCDATA\t$2, $0\n\t0x0042 00066 (main.go:9)\tMOVQ\tAX, 8(SP)\n\t0x0047 00071 (main.go:9)\tCALL\truntime.convT2Estring(SB)\n```\n\n对于`Go汇编语法`不熟悉的可以参考 [Golang汇编快速指南](https://studygolang.com/articles/2917)\n\n\n\n### 案例三：间接赋值（Assignment to indirection escapes）\n\n对某个引用类对象中的引用类成员进行赋值。Go 语言中的引用类数据类型有 `func`, `interface`, `slice`, `map`, `chan`, `*Type(指针)`。\n\n```go\npackage main\n\ntype User struct {\n\tname interface{}\n\tage *int\n}\n\nfunc main() {\n\tvar (\n\t\tuserOne User\n\t\tuserTwo = new(User)\n\t)\n\tuserOne.name = \"WilburXuOne\"\t// 不逃逸\n\tuserTwo.name = \"WilburXuTwo\"\t// 逃逸\n\n\tuserOne.age = new(int)\t// 不逃逸\n\tuserTwo.age = new(int)\t// 逃逸\n}\n```\n\n执行 `go run -gcflags '-m -l' main.go` 后返回以下结果：\n\n```shell\n# command-line-arguments\n.\\main.go:14:17: \"WilburXuTwo\" escapes to heap\n.\\main.go:17:19: new(int) escapes to heap\n.\\main.go:11:16: main new(User) does not escape\n.\\main.go:13:17: main \"WilburXuOne\" does not escape\n.\\main.go:16:19: main new(int) does not escape\n```\n\n为什么这里`值`类型不会逃逸而`引用类型`会逃逸呢？这是因为在 `userTwo = new(User)` 对象的创建时，编译器先是分析`userTwo` 对象可能分配在`堆`上，同时成员变量 `name` 和 `age` 也为`引用类型`，为了保证不出现`栈`回收后，导致对象`userTwo`的成员值也被回收，所以`name`和`age`需要逃逸。\n\n但是，如果`name`和`age`为值类型，那么编译器虽然初步分析`userTwo`会分配在`堆`上，但由于`main`主函数结束后，变量都会被回收，也就是说对象没有被其他引用，那么就都会分配在`栈`上，所以`name`和`age`没有发生逃逸。\n\n#### 优化建议\n\n尽量不要将`引用对象`赋值给`引用对象`。\n\n\n\n## 总结\n\n不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。\n\nGo的编译器就如一个聪明的`孩子`一般，大多时候在逃逸分析问题上的处理都令人眼前一亮，但有时`闹性子`的时候处理也是非常粗糙的分析或完全放弃，毕竟这是孩子天性不是吗？ 所以也需要我们在编写代码的时候多多观察，多多留意了。\n\n\n\n## 参考文章\n\nhttp://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html\n\nhttps://segmentfault.com/a/1190000019234268\n\nhttps://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview#heading=h.3i6ywlgy4wrw\n\nhttp://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html\n\n[golang 逃逸分析(https://studygolang.com/articles/21880)\n","slug":"开发/go逃逸分析","published":1,"updated":"2020-12-01T05:25:21.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsen600054kpw73ooalp9","content":"<h1 id=\"Go-逃逸分析\"><a href=\"#Go-逃逸分析\" class=\"headerlink\" title=\"Go 逃逸分析\"></a>Go 逃逸分析</h1><h2 id=\"堆和栈\"><a href=\"#堆和栈\" class=\"headerlink\" title=\"堆和栈\"></a>堆和栈</h2><p>要理解什么是逃逸分析会涉及堆和栈的一些基本知识，如果忘记的同学我们可以简单的回顾一下：</p>\n<ul>\n<li>堆（Heap）：一般来讲是人为手动进行管理，手动申请、分配、释放。堆适合不可预知大小的内存分配，这也意味着为此付出的代价是分配速度较慢，而且会形成内存碎片。</li>\n<li>栈（Stack）：由编译器进行管理，自动申请、分配、释放。一般不会太大，因此栈的分配和回收速度非常快；我们常见的函数参数（不同平台允许存放的数量不同），局部变量等都会存放在栈上。</li>\n</ul>\n<p>栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。</p>\n<p>通俗比喻的说，<code>栈</code>就如我们去饭馆吃饭，只需要点菜（发出申请）–》吃吃吃（使用内存）–》吃饱就跑剩下的交给饭馆（操作系统自动回收），而<code>堆</code>就如在家里做饭，大到家，小到买什么菜，每一个环节都需要自己来实现，但是自由度会大很多。</p>\n<h2 id=\"什么是逃逸分析\"><a href=\"#什么是逃逸分析\" class=\"headerlink\" title=\"什么是逃逸分析\"></a>什么是逃逸分析</h2><p>在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。</p>\n<p>再往简单的说，Go是通过在编译器里做逃逸分析（escape analysis）来决定一个对象放栈上还是放堆上，不逃逸的对象放栈上，可能逃逸的放堆上；即我发现<code>变量</code>在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配和回收比堆上快很多；反之，函数内的普通变量经过<code>逃逸分析</code>后，发现在函数退出后<code>变量</code>还有在其他地方上引用，那就将<code>变量</code>分配在堆上。做到按需分配（哪里的人民需要我，我就往哪去~~，一个党员的呐喊）。</p>\n<h2 id=\"为何需要逃逸分析\"><a href=\"#为何需要逃逸分析\" class=\"headerlink\" title=\"为何需要逃逸分析\"></a>为何需要逃逸分析</h2><p>ok，了解完<code>堆</code>和<code>栈</code>各自的优缺点后，我们就可以更好的知道<code>逃逸分析</code>存在的目的了：</p>\n<ol>\n<li>减少<code>gc</code>压力，栈上的变量，随着函数退出后系统直接回收，不需要<code>gc</code>标记后再清除。</li>\n<li>减少内存碎片的产生。</li>\n<li>减轻分配堆内存的开销，提高程序的运行速度。</li>\n</ol>\n<h2 id=\"如何确定是否逃逸\"><a href=\"#如何确定是否逃逸\" class=\"headerlink\" title=\"如何确定是否逃逸\"></a>如何确定是否逃逸</h2><p>在<code>Go</code>中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run -gcflags &#x27;-m -l&#x27; main.go</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-m</code> 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 <code>-m</code>，但是信息量较大，一般用 1 个就可以了。</li>\n<li><code>-l</code> 会禁用函数内联，在这里禁用掉<code>内联</code>能更好的观察逃逸情况，减少干扰。</li>\n</ul>\n<h2 id=\"逃逸案例\"><a href=\"#逃逸案例\" class=\"headerlink\" title=\"逃逸案例\"></a>逃逸案例</h2><h3 id=\"案例一：取地址发生逃逸\"><a href=\"#案例一：取地址发生逃逸\" class=\"headerlink\" title=\"案例一：取地址发生逃逸\"></a>案例一：取地址发生逃逸</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserData <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> info UserData</span><br><span class=\"line\">\tinfo.Name = <span class=\"string\">&quot;WilburXu&quot;</span></span><br><span class=\"line\">\t_ = GetUserInfo(info)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">(userInfo UserData)</span> *<span class=\"title\">UserData</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;userInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>go run -gcflags &#39;-m -l&#39; main.go</code> 后返回以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">.\\main.go:14:9: &amp;userInfo escapes to heap</span><br><span class=\"line\">.\\main.go:13:18: moved to heap: userInfo</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>GetUserInfo函数里面的变量 <code>userInfo</code> 逃到堆上了（分配到堆内存空间上了）。</p>\n<p>GetUserInfo 函数的返回值为 *UserData 指针类型，然后 将值变量<code>userInfo</code> 的地址返回，此时编译器会判断该值可能会在函数外使用，就将其分配到了堆上，所以变量<code>userInfo</code>就逃逸了。</p>\n</blockquote>\n<h4 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> info UserData</span><br><span class=\"line\">\tinfo.Name = <span class=\"string\">&quot;WilburXu&quot;</span></span><br><span class=\"line\">\t_ = GetUserInfo(&amp;info)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">(userInfo *UserData)</span> *<span class=\"title\">UserData</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">.\\main.go:13:18: leaking param: userInfo to result ~r1 level=0</span><br><span class=\"line\">.\\main.go:10:18: main &amp;info does not escape</span><br></pre></td></tr></table></figure>\n<p>对一个变量取地址，可能会被分配到堆上。但是编译器进行逃逸分析后，如果发现到在函数返回后，此变量不会被引用，那么还是会被分配到栈上。套个取址符，就想骗补助？</p>\n<p>编译器傲娇的说：Too young，Too Cool…！</p>\n<h3 id=\"案例二-：未确定类型\"><a href=\"#案例二-：未确定类型\" class=\"headerlink\" title=\"案例二 ：未确定类型\"></a>案例二 ：未确定类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tname := <span class=\"string\">&quot;WilburXu&quot;</span></span><br><span class=\"line\">\tMyPrintln(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyPrintln</span><span class=\"params\">(one <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> userInfo = <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">\tuserInfo.name = one <span class=\"comment\">// 泛型赋值 逃逸咯</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>go run -gcflags &#39;-m -l&#39; main.go</code> 后返回以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./main.go:12:16: leaking param: one</span><br><span class=\"line\">./main.go:13:20: MyPrintln new(User) does not escape</span><br><span class=\"line\">./main.go:9:11: name escapes to heap</span><br></pre></td></tr></table></figure>\n<p>这里可能有同学会好奇，<code>MyPrintln</code>函数内并没有被引用的便利，为什么变了<code>name</code>会被分配到了<code>堆</code>上呢？</p>\n<p>上一个案例我们知道了，普通的手法想去”骗取补助”，聪明灵利的编译器是不会“上当受骗的噢”；但是对于<code>interface</code>类型，很遗憾，go 编译器或者链接器不可能在编译的时候计算两者的对应关系，因此只能分配到<code>堆</code>上。</p>\n<h3 id=\"优化方案-1\"><a href=\"#优化方案-1\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h3><p>将结构体<code>User</code>的成员<code>name</code>的类型、函数<code>MyPringLn</code>参数<code>one</code>的类型改为 <code>string</code>，将得出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./main.go:12:16: leaking param: one</span><br><span class=\"line\">./main.go:13:20: MyPrintln new(User) does not escape</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展分析\"><a href=\"#拓展分析\" class=\"headerlink\" title=\"拓展分析\"></a>拓展分析</h3><p>对于案例二的分析，我们还可以通过反编译命令<code>go tool compile -S main.go</code>查看，会发现如果为<code>interface</code>类型，main主函数在编译后会<code>额外</code>多出以下指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> main.go:9 -&gt; MyPrintln(name)</span></span><br><span class=\"line\">\t0x001d 00029 (main.go:9)\tPCDATA\t$2, $1</span><br><span class=\"line\">\t0x001d 00029 (main.go:9)\tPCDATA\t$0, $1</span><br><span class=\"line\">\t0x001d 00029 (main.go:9)\tLEAQ\tgo.string.&quot;WilburXu&quot;(SB), AX</span><br><span class=\"line\">\t0x0024 00036 (main.go:9)\tPCDATA\t$2, $0</span><br><span class=\"line\">\t0x0024 00036 (main.go:9)\tMOVQ\tAX, &quot;&quot;..autotmp_5+32(SP)</span><br><span class=\"line\">\t0x0029 00041 (main.go:9)\tMOVQ\t$8, &quot;&quot;..autotmp_5+40(SP)</span><br><span class=\"line\">\t0x0032 00050 (main.go:9)\tPCDATA\t$2, $1</span><br><span class=\"line\">\t0x0032 00050 (main.go:9)\tLEAQ\ttype.string(SB), AX</span><br><span class=\"line\">\t0x0039 00057 (main.go:9)\tPCDATA\t$2, $0</span><br><span class=\"line\">\t0x0039 00057 (main.go:9)\tMOVQ\tAX, (SP)</span><br><span class=\"line\">\t0x003d 00061 (main.go:9)\tPCDATA\t$2, $1</span><br><span class=\"line\">\t0x003d 00061 (main.go:9)\tLEAQ\t&quot;&quot;..autotmp_5+32(SP), AX</span><br><span class=\"line\">\t0x0042 00066 (main.go:9)\tPCDATA\t$2, $0</span><br><span class=\"line\">\t0x0042 00066 (main.go:9)\tMOVQ\tAX, 8(SP)</span><br><span class=\"line\">\t0x0047 00071 (main.go:9)\tCALL\truntime.convT2Estring(SB)</span><br></pre></td></tr></table></figure>\n<p>对于<code>Go汇编语法</code>不熟悉的可以参考 <a href=\"https://studygolang.com/articles/2917\">Golang汇编快速指南</a></p>\n<h3 id=\"案例三：间接赋值（Assignment-to-indirection-escapes）\"><a href=\"#案例三：间接赋值（Assignment-to-indirection-escapes）\" class=\"headerlink\" title=\"案例三：间接赋值（Assignment to indirection escapes）\"></a>案例三：间接赋值（Assignment to indirection escapes）</h3><p>对某个引用类对象中的引用类成员进行赋值。Go 语言中的引用类数据类型有 <code>func</code>, <code>interface</code>, <code>slice</code>, <code>map</code>, <code>chan</code>, <code>*Type(指针)</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tage *<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tuserOne User</span><br><span class=\"line\">\t\tuserTwo = <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tuserOne.name = <span class=\"string\">&quot;WilburXuOne&quot;</span>\t<span class=\"comment\">// 不逃逸</span></span><br><span class=\"line\">\tuserTwo.name = <span class=\"string\">&quot;WilburXuTwo&quot;</span>\t<span class=\"comment\">// 逃逸</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tuserOne.age = <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)\t<span class=\"comment\">// 不逃逸</span></span><br><span class=\"line\">\tuserTwo.age = <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)\t<span class=\"comment\">// 逃逸</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>go run -gcflags &#39;-m -l&#39; main.go</code> 后返回以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">.\\main.go:14:17: &quot;WilburXuTwo&quot; escapes to heap</span><br><span class=\"line\">.\\main.go:17:19: new(int) escapes to heap</span><br><span class=\"line\">.\\main.go:11:16: main new(User) does not escape</span><br><span class=\"line\">.\\main.go:13:17: main &quot;WilburXuOne&quot; does not escape</span><br><span class=\"line\">.\\main.go:16:19: main new(int) does not escape</span><br></pre></td></tr></table></figure>\n<p>为什么这里<code>值</code>类型不会逃逸而<code>引用类型</code>会逃逸呢？这是因为在 <code>userTwo = new(User)</code> 对象的创建时，编译器先是分析<code>userTwo</code> 对象可能分配在<code>堆</code>上，同时成员变量 <code>name</code> 和 <code>age</code> 也为<code>引用类型</code>，为了保证不出现<code>栈</code>回收后，导致对象<code>userTwo</code>的成员值也被回收，所以<code>name</code>和<code>age</code>需要逃逸。</p>\n<p>但是，如果<code>name</code>和<code>age</code>为值类型，那么编译器虽然初步分析<code>userTwo</code>会分配在<code>堆</code>上，但由于<code>main</code>主函数结束后，变量都会被回收，也就是说对象没有被其他引用，那么就都会分配在<code>栈</code>上，所以<code>name</code>和<code>age</code>没有发生逃逸。</p>\n<h4 id=\"优化建议\"><a href=\"#优化建议\" class=\"headerlink\" title=\"优化建议\"></a>优化建议</h4><p>尽量不要将<code>引用对象</code>赋值给<code>引用对象</code>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。</p>\n<p>Go的编译器就如一个聪明的<code>孩子</code>一般，大多时候在逃逸分析问题上的处理都令人眼前一亮，但有时<code>闹性子</code>的时候处理也是非常粗糙的分析或完全放弃，毕竟这是孩子天性不是吗？ 所以也需要我们在编写代码的时候多多观察，多多留意了。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html\">http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000019234268\">https://segmentfault.com/a/1190000019234268</a></p>\n<p><a href=\"https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview#heading=h.3i6ywlgy4wrw\">https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview#heading=h.3i6ywlgy4wrw</a></p>\n<p><a href=\"http://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html\">http://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html</a></p>\n<p>[golang 逃逸分析(<a href=\"https://studygolang.com/articles/21880\">https://studygolang.com/articles/21880</a>)</p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<h1 id=\"Go-逃逸分析\"><a href=\"#Go-逃逸分析\" class=\"headerlink\" title=\"Go 逃逸分析\"></a>Go 逃逸分析</h1><h2 id=\"堆和栈\"><a href=\"#堆和栈\" class=\"headerlink\" title=\"堆和栈\"></a>堆和栈</h2><p>要理解什么是逃逸分析会涉及堆和栈的一些基本知识，如果忘记的同学我们可以简单的回顾一下：</p>\n<ul>\n<li>堆（Heap）：一般来讲是人为手动进行管理，手动申请、分配、释放。堆适合不可预知大小的内存分配，这也意味着为此付出的代价是分配速度较慢，而且会形成内存碎片。</li>\n<li>栈（Stack）：由编译器进行管理，自动申请、分配、释放。一般不会太大，因此栈的分配和回收速度非常快；我们常见的函数参数（不同平台允许存放的数量不同），局部变量等都会存放在栈上。</li>\n</ul>\n<p>栈分配内存只需要两个CPU指令：“PUSH”和“RELEASE”，分配和释放；而堆分配内存首先需要去找到一块大小合适的内存块，之后要通过垃圾回收才能释放。</p>\n<p>通俗比喻的说，<code>栈</code>就如我们去饭馆吃饭，只需要点菜（发出申请）–》吃吃吃（使用内存）–》吃饱就跑剩下的交给饭馆（操作系统自动回收），而<code>堆</code>就如在家里做饭，大到家，小到买什么菜，每一个环节都需要自己来实现，但是自由度会大很多。</p>\n<h2 id=\"什么是逃逸分析\"><a href=\"#什么是逃逸分析\" class=\"headerlink\" title=\"什么是逃逸分析\"></a>什么是逃逸分析</h2><p>在编译程序优化理论中，逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。</p>\n<p>再往简单的说，Go是通过在编译器里做逃逸分析（escape analysis）来决定一个对象放栈上还是放堆上，不逃逸的对象放栈上，可能逃逸的放堆上；即我发现<code>变量</code>在退出函数后没有用了，那么就把丢到栈上，毕竟栈上的内存分配和回收比堆上快很多；反之，函数内的普通变量经过<code>逃逸分析</code>后，发现在函数退出后<code>变量</code>还有在其他地方上引用，那就将<code>变量</code>分配在堆上。做到按需分配（哪里的人民需要我，我就往哪去~~，一个党员的呐喊）。</p>\n<h2 id=\"为何需要逃逸分析\"><a href=\"#为何需要逃逸分析\" class=\"headerlink\" title=\"为何需要逃逸分析\"></a>为何需要逃逸分析</h2><p>ok，了解完<code>堆</code>和<code>栈</code>各自的优缺点后，我们就可以更好的知道<code>逃逸分析</code>存在的目的了：</p>\n<ol>\n<li>减少<code>gc</code>压力，栈上的变量，随着函数退出后系统直接回收，不需要<code>gc</code>标记后再清除。</li>\n<li>减少内存碎片的产生。</li>\n<li>减轻分配堆内存的开销，提高程序的运行速度。</li>\n</ol>\n<h2 id=\"如何确定是否逃逸\"><a href=\"#如何确定是否逃逸\" class=\"headerlink\" title=\"如何确定是否逃逸\"></a>如何确定是否逃逸</h2><p>在<code>Go</code>中通过逃逸分析日志来确定变量是否逃逸，开启逃逸分析日志：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run -gcflags &#x27;-m -l&#x27; main.go</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-m</code> 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 <code>-m</code>，但是信息量较大，一般用 1 个就可以了。</li>\n<li><code>-l</code> 会禁用函数内联，在这里禁用掉<code>内联</code>能更好的观察逃逸情况，减少干扰。</li>\n</ul>\n<h2 id=\"逃逸案例\"><a href=\"#逃逸案例\" class=\"headerlink\" title=\"逃逸案例\"></a>逃逸案例</h2><h3 id=\"案例一：取地址发生逃逸\"><a href=\"#案例一：取地址发生逃逸\" class=\"headerlink\" title=\"案例一：取地址发生逃逸\"></a>案例一：取地址发生逃逸</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserData <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> info UserData</span><br><span class=\"line\">\tinfo.Name = <span class=\"string\">&quot;WilburXu&quot;</span></span><br><span class=\"line\">\t_ = GetUserInfo(info)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">(userInfo UserData)</span> *<span class=\"title\">UserData</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;userInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>go run -gcflags &#39;-m -l&#39; main.go</code> 后返回以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">.\\main.go:14:9: &amp;userInfo escapes to heap</span><br><span class=\"line\">.\\main.go:13:18: moved to heap: userInfo</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>GetUserInfo函数里面的变量 <code>userInfo</code> 逃到堆上了（分配到堆内存空间上了）。</p>\n<p>GetUserInfo 函数的返回值为 *UserData 指针类型，然后 将值变量<code>userInfo</code> 的地址返回，此时编译器会判断该值可能会在函数外使用，就将其分配到了堆上，所以变量<code>userInfo</code>就逃逸了。</p>\n</blockquote>\n<h4 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> info UserData</span><br><span class=\"line\">\tinfo.Name = <span class=\"string\">&quot;WilburXu&quot;</span></span><br><span class=\"line\">\t_ = GetUserInfo(&amp;info)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">(userInfo *UserData)</span> *<span class=\"title\">UserData</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userInfo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">.\\main.go:13:18: leaking param: userInfo to result ~r1 level=0</span><br><span class=\"line\">.\\main.go:10:18: main &amp;info does not escape</span><br></pre></td></tr></table></figure>\n<p>对一个变量取地址，可能会被分配到堆上。但是编译器进行逃逸分析后，如果发现到在函数返回后，此变量不会被引用，那么还是会被分配到栈上。套个取址符，就想骗补助？</p>\n<p>编译器傲娇的说：Too young，Too Cool…！</p>\n<h3 id=\"案例二-：未确定类型\"><a href=\"#案例二-：未确定类型\" class=\"headerlink\" title=\"案例二 ：未确定类型\"></a>案例二 ：未确定类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tname := <span class=\"string\">&quot;WilburXu&quot;</span></span><br><span class=\"line\">\tMyPrintln(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">MyPrintln</span><span class=\"params\">(one <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> userInfo = <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">\tuserInfo.name = one <span class=\"comment\">// 泛型赋值 逃逸咯</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>go run -gcflags &#39;-m -l&#39; main.go</code> 后返回以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./main.go:12:16: leaking param: one</span><br><span class=\"line\">./main.go:13:20: MyPrintln new(User) does not escape</span><br><span class=\"line\">./main.go:9:11: name escapes to heap</span><br></pre></td></tr></table></figure>\n<p>这里可能有同学会好奇，<code>MyPrintln</code>函数内并没有被引用的便利，为什么变了<code>name</code>会被分配到了<code>堆</code>上呢？</p>\n<p>上一个案例我们知道了，普通的手法想去”骗取补助”，聪明灵利的编译器是不会“上当受骗的噢”；但是对于<code>interface</code>类型，很遗憾，go 编译器或者链接器不可能在编译的时候计算两者的对应关系，因此只能分配到<code>堆</code>上。</p>\n<h3 id=\"优化方案-1\"><a href=\"#优化方案-1\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h3><p>将结构体<code>User</code>的成员<code>name</code>的类型、函数<code>MyPringLn</code>参数<code>one</code>的类型改为 <code>string</code>，将得出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">./main.go:12:16: leaking param: one</span><br><span class=\"line\">./main.go:13:20: MyPrintln new(User) does not escape</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展分析\"><a href=\"#拓展分析\" class=\"headerlink\" title=\"拓展分析\"></a>拓展分析</h3><p>对于案例二的分析，我们还可以通过反编译命令<code>go tool compile -S main.go</code>查看，会发现如果为<code>interface</code>类型，main主函数在编译后会<code>额外</code>多出以下指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> main.go:9 -&gt; MyPrintln(name)</span></span><br><span class=\"line\">\t0x001d 00029 (main.go:9)\tPCDATA\t$2, $1</span><br><span class=\"line\">\t0x001d 00029 (main.go:9)\tPCDATA\t$0, $1</span><br><span class=\"line\">\t0x001d 00029 (main.go:9)\tLEAQ\tgo.string.&quot;WilburXu&quot;(SB), AX</span><br><span class=\"line\">\t0x0024 00036 (main.go:9)\tPCDATA\t$2, $0</span><br><span class=\"line\">\t0x0024 00036 (main.go:9)\tMOVQ\tAX, &quot;&quot;..autotmp_5+32(SP)</span><br><span class=\"line\">\t0x0029 00041 (main.go:9)\tMOVQ\t$8, &quot;&quot;..autotmp_5+40(SP)</span><br><span class=\"line\">\t0x0032 00050 (main.go:9)\tPCDATA\t$2, $1</span><br><span class=\"line\">\t0x0032 00050 (main.go:9)\tLEAQ\ttype.string(SB), AX</span><br><span class=\"line\">\t0x0039 00057 (main.go:9)\tPCDATA\t$2, $0</span><br><span class=\"line\">\t0x0039 00057 (main.go:9)\tMOVQ\tAX, (SP)</span><br><span class=\"line\">\t0x003d 00061 (main.go:9)\tPCDATA\t$2, $1</span><br><span class=\"line\">\t0x003d 00061 (main.go:9)\tLEAQ\t&quot;&quot;..autotmp_5+32(SP), AX</span><br><span class=\"line\">\t0x0042 00066 (main.go:9)\tPCDATA\t$2, $0</span><br><span class=\"line\">\t0x0042 00066 (main.go:9)\tMOVQ\tAX, 8(SP)</span><br><span class=\"line\">\t0x0047 00071 (main.go:9)\tCALL\truntime.convT2Estring(SB)</span><br></pre></td></tr></table></figure>\n<p>对于<code>Go汇编语法</code>不熟悉的可以参考 <a href=\"https://studygolang.com/articles/2917\">Golang汇编快速指南</a></p>\n<h3 id=\"案例三：间接赋值（Assignment-to-indirection-escapes）\"><a href=\"#案例三：间接赋值（Assignment-to-indirection-escapes）\" class=\"headerlink\" title=\"案例三：间接赋值（Assignment to indirection escapes）\"></a>案例三：间接赋值（Assignment to indirection escapes）</h3><p>对某个引用类对象中的引用类成员进行赋值。Go 语言中的引用类数据类型有 <code>func</code>, <code>interface</code>, <code>slice</code>, <code>map</code>, <code>chan</code>, <code>*Type(指针)</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tname <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">\tage *<span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t\tuserOne User</span><br><span class=\"line\">\t\tuserTwo = <span class=\"built_in\">new</span>(User)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tuserOne.name = <span class=\"string\">&quot;WilburXuOne&quot;</span>\t<span class=\"comment\">// 不逃逸</span></span><br><span class=\"line\">\tuserTwo.name = <span class=\"string\">&quot;WilburXuTwo&quot;</span>\t<span class=\"comment\">// 逃逸</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tuserOne.age = <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)\t<span class=\"comment\">// 不逃逸</span></span><br><span class=\"line\">\tuserTwo.age = <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)\t<span class=\"comment\">// 逃逸</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>go run -gcflags &#39;-m -l&#39; main.go</code> 后返回以下结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> command-line-arguments</span></span><br><span class=\"line\">.\\main.go:14:17: &quot;WilburXuTwo&quot; escapes to heap</span><br><span class=\"line\">.\\main.go:17:19: new(int) escapes to heap</span><br><span class=\"line\">.\\main.go:11:16: main new(User) does not escape</span><br><span class=\"line\">.\\main.go:13:17: main &quot;WilburXuOne&quot; does not escape</span><br><span class=\"line\">.\\main.go:16:19: main new(int) does not escape</span><br></pre></td></tr></table></figure>\n<p>为什么这里<code>值</code>类型不会逃逸而<code>引用类型</code>会逃逸呢？这是因为在 <code>userTwo = new(User)</code> 对象的创建时，编译器先是分析<code>userTwo</code> 对象可能分配在<code>堆</code>上，同时成员变量 <code>name</code> 和 <code>age</code> 也为<code>引用类型</code>，为了保证不出现<code>栈</code>回收后，导致对象<code>userTwo</code>的成员值也被回收，所以<code>name</code>和<code>age</code>需要逃逸。</p>\n<p>但是，如果<code>name</code>和<code>age</code>为值类型，那么编译器虽然初步分析<code>userTwo</code>会分配在<code>堆</code>上，但由于<code>main</code>主函数结束后，变量都会被回收，也就是说对象没有被其他引用，那么就都会分配在<code>栈</code>上，所以<code>name</code>和<code>age</code>没有发生逃逸。</p>\n<h4 id=\"优化建议\"><a href=\"#优化建议\" class=\"headerlink\" title=\"优化建议\"></a>优化建议</h4><p>尽量不要将<code>引用对象</code>赋值给<code>引用对象</code>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不要盲目使用变量的指针作为函数参数，虽然它会减少复制操作。但其实当参数为变量自身的时候，复制是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。</p>\n<p>Go的编译器就如一个聪明的<code>孩子</code>一般，大多时候在逃逸分析问题上的处理都令人眼前一亮，但有时<code>闹性子</code>的时候处理也是非常粗糙的分析或完全放弃，毕竟这是孩子天性不是吗？ 所以也需要我们在编写代码的时候多多观察，多多留意了。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html\">http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000019234268\">https://segmentfault.com/a/1190000019234268</a></p>\n<p><a href=\"https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview#heading=h.3i6ywlgy4wrw\">https://docs.google.com/document/d/1CxgUBPlx9iJzkz9JWkb6tIpTe5q32QDmz8l0BouG0Cw/preview#heading=h.3i6ywlgy4wrw</a></p>\n<p><a href=\"http://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html\">http://npat-efault.github.io/programming/2016/10/10/escape-analysis-and-interfaces.html</a></p>\n<p>[golang 逃逸分析(<a href=\"https://studygolang.com/articles/21880\">https://studygolang.com/articles/21880</a>)</p>\n"},{"title":"golang 逃逸分析与栈、堆分配分析","date":"2020-12-01T05:19:18.000Z","_content":"我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。\n\n还是从实际使用场景出发：\n\n## Question\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？\n\n## 什么是堆？什么是栈？\n\n简单说：\n\n* 堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多\n* 栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上\n\n今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点\n\n## 逃逸分析\n\n逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。\n\n通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：\n\n* 是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上\n* 即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上\n\n对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。\n\n## 在什么阶段确立逃逸\n\ngo 在编译阶段确立逃逸，注意并不是在运行时\n\n## 为什么需要逃逸\n\n其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：\n\n* 垃圾回收（GC）的压力不断增大\n* 申请、分配、回收内存的系统开销增大（相对于栈）\n* 动态分配产生一定量的内存碎片\n\n其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？\n\n## go怎么确定是否逃逸\n\n可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：\n\n* -m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了\n* -l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰\n\n`$ go build -gcflags '-m -l' main.go`\n\n\n## 第二：反编译命令查看\n\n`$ go tool compile -S main.go`\n\n注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数\n\n### 实际案例\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n看编译器命令执行结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis.go \n# command-line-arguments\n./escape_analysis.go:13:11: &User literal escapes to heap\n```\n\n通过查看分析结果，可得知 &User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：\n\n```bash\n$go tool compile -S escape_analysis.go       \n\n\"\".GetUserInfo STEXT size=190 args=0x8 locals=0x18\n\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t\"\".GetUserInfo(SB), ABIInternal, $24-8\n\t......\n\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)\n\t......\n\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156\n\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.\"sim lou\"(SB), CX\n\t......\n\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132\n\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.\"https://www.baidu.com/avatar/666666\"(SB), CX\n\t......\n```\n\n执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。\n\n那么所有的指针都在堆上？也不是：\n\n```go\nfunc PrintStr()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n}\n\nfunc main()  {\n\tPrintStr()\n}\n```\n\n看编译器逃逸分析的结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis3.go             \n# command-line-arguments\n./escape_analysis3.go:4:12: PrintStr new(string) does not escape\n```\n\n看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。\n\n### 不确定类型\n\n```go\nfunc main()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n\tfmt.Println(*str)\n}\n```\n\n执行命令观察一下，如下：\n\n```\n$go build -gcflags '-m -l' escape_analysis4.go\n# command-line-arguments\n./escape_analysis4.go:6:12: main new(string) does not escape\n./escape_analysis4.go:8:13: main ... argument does not escape\n./escape_analysis4.go:8:14: *str escapes to heap\n```\n\n通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？\n\n相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：\n`func Println(a ...interface{}) (n int, err error)`\n\n通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。\n\n如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。\n\n## 总结\n\n* 静态分配到栈上，性能一定比动态分配到堆上好\n* 底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心\n* 每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）\n* 直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果\n* 到处都用指针传递并不一定是最好的，要用对。\n\n[golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈](https://blog.csdn.net/u010853261/article/details/102846449#_34)\n","source":"_posts/开发/go逃逸分析与栈、堆分配分析.md","raw":"---\ntitle: golang 逃逸分析与栈、堆分配分析\ncategories:\n  - 开发\ntags:\n  - golang\n  - 内存管理\ndate: 2020-12-01 13:19:18\n---\n我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。\n\n还是从实际使用场景出发：\n\n## Question\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？\n\n## 什么是堆？什么是栈？\n\n简单说：\n\n* 堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多\n* 栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上\n\n今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点\n\n## 逃逸分析\n\n逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。\n\n通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：\n\n* 是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上\n* 即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上\n\n对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。\n\n## 在什么阶段确立逃逸\n\ngo 在编译阶段确立逃逸，注意并不是在运行时\n\n## 为什么需要逃逸\n\n其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：\n\n* 垃圾回收（GC）的压力不断增大\n* 申请、分配、回收内存的系统开销增大（相对于栈）\n* 动态分配产生一定量的内存碎片\n\n其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？\n\n## go怎么确定是否逃逸\n\n可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：\n\n* -m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了\n* -l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰\n\n`$ go build -gcflags '-m -l' main.go`\n\n\n## 第二：反编译命令查看\n\n`$ go tool compile -S main.go`\n\n注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数\n\n### 实际案例\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n看编译器命令执行结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis.go \n# command-line-arguments\n./escape_analysis.go:13:11: &User literal escapes to heap\n```\n\n通过查看分析结果，可得知 &User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：\n\n```bash\n$go tool compile -S escape_analysis.go       \n\n\"\".GetUserInfo STEXT size=190 args=0x8 locals=0x18\n\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t\"\".GetUserInfo(SB), ABIInternal, $24-8\n\t......\n\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)\n\t......\n\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156\n\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.\"sim lou\"(SB), CX\n\t......\n\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132\n\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.\"https://www.baidu.com/avatar/666666\"(SB), CX\n\t......\n```\n\n执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。\n\n那么所有的指针都在堆上？也不是：\n\n```go\nfunc PrintStr()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n}\n\nfunc main()  {\n\tPrintStr()\n}\n```\n\n看编译器逃逸分析的结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis3.go             \n# command-line-arguments\n./escape_analysis3.go:4:12: PrintStr new(string) does not escape\n```\n\n看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。\n\n### 不确定类型\n\n```go\nfunc main()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n\tfmt.Println(*str)\n}\n```\n\n执行命令观察一下，如下：\n\n```\n$go build -gcflags '-m -l' escape_analysis4.go\n# command-line-arguments\n./escape_analysis4.go:6:12: main new(string) does not escape\n./escape_analysis4.go:8:13: main ... argument does not escape\n./escape_analysis4.go:8:14: *str escapes to heap\n```\n\n通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？\n\n相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：\n`func Println(a ...interface{}) (n int, err error)`\n\n通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。\n\n如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。\n\n## 总结\n\n* 静态分配到栈上，性能一定比动态分配到堆上好\n* 底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心\n* 每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）\n* 直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果\n* 到处都用指针传递并不一定是最好的，要用对。\n\n[golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈](https://blog.csdn.net/u010853261/article/details/102846449#_34)\n","slug":"开发/go逃逸分析与栈、堆分配分析","published":1,"updated":"2020-12-01T05:22:57.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsen800084kpw25zi7m69","content":"<p>我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。</p>\n<p>还是从实际使用场景出发：</p>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？</p>\n<h2 id=\"什么是堆？什么是栈？\"><a href=\"#什么是堆？什么是栈？\" class=\"headerlink\" title=\"什么是堆？什么是栈？\"></a>什么是堆？什么是栈？</h2><p>简单说：</p>\n<ul>\n<li>堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多</li>\n<li>栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上</li>\n</ul>\n<p>今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点</p>\n<h2 id=\"逃逸分析\"><a href=\"#逃逸分析\" class=\"headerlink\" title=\"逃逸分析\"></a>逃逸分析</h2><p>逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。</p>\n<p>通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：</p>\n<ul>\n<li>是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上</li>\n<li>即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上</li>\n</ul>\n<p>对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p>\n<h2 id=\"在什么阶段确立逃逸\"><a href=\"#在什么阶段确立逃逸\" class=\"headerlink\" title=\"在什么阶段确立逃逸\"></a>在什么阶段确立逃逸</h2><p>go 在编译阶段确立逃逸，注意并不是在运行时</p>\n<h2 id=\"为什么需要逃逸\"><a href=\"#为什么需要逃逸\" class=\"headerlink\" title=\"为什么需要逃逸\"></a>为什么需要逃逸</h2><p>其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：</p>\n<ul>\n<li>垃圾回收（GC）的压力不断增大</li>\n<li>申请、分配、回收内存的系统开销增大（相对于栈）</li>\n<li>动态分配产生一定量的内存碎片</li>\n</ul>\n<p>其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？</p>\n<h2 id=\"go怎么确定是否逃逸\"><a href=\"#go怎么确定是否逃逸\" class=\"headerlink\" title=\"go怎么确定是否逃逸\"></a>go怎么确定是否逃逸</h2><p>可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：</p>\n<ul>\n<li>-m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了</li>\n<li>-l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰</li>\n</ul>\n<p><code>$ go build -gcflags &#39;-m -l&#39; main.go</code></p>\n<h2 id=\"第二：反编译命令查看\"><a href=\"#第二：反编译命令查看\" class=\"headerlink\" title=\"第二：反编译命令查看\"></a>第二：反编译命令查看</h2><p><code>$ go tool compile -S main.go</code></p>\n<p>注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数</p>\n<h3 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看编译器命令执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis.go </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis.go:13:11: &amp;User literal escapes to heap</span><br></pre></td></tr></table></figure>\n<p>通过查看分析结果，可得知 &amp;User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> tool compile -S escape_analysis.go       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.GetUserInfo STEXT size=190 args=0x8 locals=0x18</span><br><span class=\"line\">\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t<span class=\"string\">&quot;&quot;</span>.GetUserInfo(SB), ABIInternal, <span class=\"variable\">$24</span>-8</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156</span><br><span class=\"line\">\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.<span class=\"string\">&quot;sim lou&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132</span><br><span class=\"line\">\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.<span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br></pre></td></tr></table></figure>\n<p>执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。</p>\n<p>那么所有的指针都在堆上？也不是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PrintStr</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tPrintStr()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看编译器逃逸分析的结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis3.go             </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis3.go:4:12: PrintStr new(string) does not escape</span><br></pre></td></tr></table></figure>\n<p>看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。</p>\n<h3 id=\"不确定类型\"><a href=\"#不确定类型\" class=\"headerlink\" title=\"不确定类型\"></a>不确定类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\tfmt.Println(*str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行命令观察一下，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$go build -gcflags &#39;-m -l&#39; escape_analysis4.go</span><br><span class=\"line\"># command-line-arguments</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:6:12: main new(string) does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:13: main ... argument does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:14: *str escapes to heap</span><br></pre></td></tr></table></figure>\n<p>通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？</p>\n<p>相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：<br><code>func Println(a ...interface&#123;&#125;) (n int, err error)</code></p>\n<p>通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。</p>\n<p>如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>静态分配到栈上，性能一定比动态分配到堆上好</li>\n<li>底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心</li>\n<li>每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）</li>\n<li>直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果</li>\n<li>到处都用指针传递并不一定是最好的，要用对。</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/u010853261/article/details/102846449#_34\">golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。</p>\n<p>还是从实际使用场景出发：</p>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？</p>\n<h2 id=\"什么是堆？什么是栈？\"><a href=\"#什么是堆？什么是栈？\" class=\"headerlink\" title=\"什么是堆？什么是栈？\"></a>什么是堆？什么是栈？</h2><p>简单说：</p>\n<ul>\n<li>堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多</li>\n<li>栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上</li>\n</ul>\n<p>今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点</p>\n<h2 id=\"逃逸分析\"><a href=\"#逃逸分析\" class=\"headerlink\" title=\"逃逸分析\"></a>逃逸分析</h2><p>逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。</p>\n<p>通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：</p>\n<ul>\n<li>是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上</li>\n<li>即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上</li>\n</ul>\n<p>对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p>\n<h2 id=\"在什么阶段确立逃逸\"><a href=\"#在什么阶段确立逃逸\" class=\"headerlink\" title=\"在什么阶段确立逃逸\"></a>在什么阶段确立逃逸</h2><p>go 在编译阶段确立逃逸，注意并不是在运行时</p>\n<h2 id=\"为什么需要逃逸\"><a href=\"#为什么需要逃逸\" class=\"headerlink\" title=\"为什么需要逃逸\"></a>为什么需要逃逸</h2><p>其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：</p>\n<ul>\n<li>垃圾回收（GC）的压力不断增大</li>\n<li>申请、分配、回收内存的系统开销增大（相对于栈）</li>\n<li>动态分配产生一定量的内存碎片</li>\n</ul>\n<p>其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？</p>\n<h2 id=\"go怎么确定是否逃逸\"><a href=\"#go怎么确定是否逃逸\" class=\"headerlink\" title=\"go怎么确定是否逃逸\"></a>go怎么确定是否逃逸</h2><p>可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：</p>\n<ul>\n<li>-m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了</li>\n<li>-l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰</li>\n</ul>\n<p><code>$ go build -gcflags &#39;-m -l&#39; main.go</code></p>\n<h2 id=\"第二：反编译命令查看\"><a href=\"#第二：反编译命令查看\" class=\"headerlink\" title=\"第二：反编译命令查看\"></a>第二：反编译命令查看</h2><p><code>$ go tool compile -S main.go</code></p>\n<p>注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数</p>\n<h3 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看编译器命令执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis.go </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis.go:13:11: &amp;User literal escapes to heap</span><br></pre></td></tr></table></figure>\n<p>通过查看分析结果，可得知 &amp;User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> tool compile -S escape_analysis.go       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.GetUserInfo STEXT size=190 args=0x8 locals=0x18</span><br><span class=\"line\">\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t<span class=\"string\">&quot;&quot;</span>.GetUserInfo(SB), ABIInternal, <span class=\"variable\">$24</span>-8</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156</span><br><span class=\"line\">\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.<span class=\"string\">&quot;sim lou&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132</span><br><span class=\"line\">\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.<span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br></pre></td></tr></table></figure>\n<p>执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。</p>\n<p>那么所有的指针都在堆上？也不是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PrintStr</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tPrintStr()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看编译器逃逸分析的结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis3.go             </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis3.go:4:12: PrintStr new(string) does not escape</span><br></pre></td></tr></table></figure>\n<p>看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。</p>\n<h3 id=\"不确定类型\"><a href=\"#不确定类型\" class=\"headerlink\" title=\"不确定类型\"></a>不确定类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\tfmt.Println(*str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行命令观察一下，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$go build -gcflags &#39;-m -l&#39; escape_analysis4.go</span><br><span class=\"line\"># command-line-arguments</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:6:12: main new(string) does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:13: main ... argument does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:14: *str escapes to heap</span><br></pre></td></tr></table></figure>\n<p>通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？</p>\n<p>相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：<br><code>func Println(a ...interface&#123;&#125;) (n int, err error)</code></p>\n<p>通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。</p>\n<p>如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>静态分配到栈上，性能一定比动态分配到堆上好</li>\n<li>底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心</li>\n<li>每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）</li>\n<li>直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果</li>\n<li>到处都用指针传递并不一定是最好的，要用对。</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/u010853261/article/details/102846449#_34\">golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈</a></p>\n"},{"title":"P2P 网络核心技术：Gossip 协议","date":"2020-12-01T06:13:04.000Z","_content":"![](assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg)\n**背景**\n\nGossip protocol 也叫 Epidemic Protocol （流行病协议），实际上它还有很多别名，比如：“流言算法”、“疫情传播算法”等。\n\n这个协议的作用就像其名字表示的意思一样，非常容易理解，它的方式其实在我们日常生活中也很常见，比如电脑病毒的传播，森林大火，细胞扩散等等。\n\nGossip protocol 最早是在 1987 年发表在 ACM 上的论文 《Epidemic Algorithms for Replicated Database Maintenance》中被提出。主要用在分布式数据库系统中各个副本节点同步数据之用，这种场景的一个最大特点就是组成的网络的节点都是对等节点，是非结构化网络，这区别与之前介绍的用于结构化网络中的 DHT 算法 Kadmelia。\n\n我们知道，很多知名的 P2P 网络或区块链项目，比如 IPFS，Ethereum 等，都使用了 Kadmelia 算法，而大名鼎鼎的 Bitcoin 则是使用了 Gossip 协议来传播交易和区块信息。\n\n实际上，只要仔细分析一下场景就知道，Ethereum 使用 DHT 算法并不是很合理，因为它使用节点保存整个链数据，不像 IPFS 那样分片保存数据，因此 Ethereum 真正适合的协议应该像 Bitcoin 那样，是 Gossip 协议。\n\n**这里先简单介绍一下 Gossip 协议的执行过程：**\n\nGossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。\n\n**Gossip 演示**\n\n现在，我们通过一个具体的实例来深入体会一下 Gossip 传播的完整过程\n\n**为了表述清楚，我们先做一些前提设定**\n\n1、Gossip 是周期性的散播消息，把周期限定为 1 秒\n\n2、被感染节点随机选择 k 个邻接节点（fan-out）散播消息，这里把 fan-out 设置为 3，每次最多往 3 个节点散播。\n\n3、每次散播消息都选择尚未发送过的节点进行散播\n\n4、收到消息的节点不再往发送节点散播，比如 A -> B，那么 B 进行散播的时候，不再发给 A。\n注意：Gossip 过程是异步的，也就是说发消息的节点不会关注对方是否收到，即不等待响应；不管对方有没有收到，它都会每隔 1 秒向周围节点发消息。异步是它的优点，而消息冗余则是它的缺点。\n\n这里一共有 16 个节点，节点 1 为初始被感染节点，通过 Gossip 过程，最终所有节点都被感染：\n\n![](assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif)\n**Gossip 的特点（优势）**\n\n**1）扩展性**\n\n网络可以允许节点的任意增加和减少，新增加的节点的状态最终会与其他节点一致。\n\n**2）容错**\n\n网络中任何节点的宕机和重启都不会影响 Gossip 消息的传播，Gossip 协议具有天然的分布式系统容错特性。\n\n**3）去中心化**\n\nGossip 协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。\n\n**4）一致性收敛**\n\nGossip 协议中的消息会以一传十、十传百一样的指数级速度在网络中快速传播，因此系统状态的不一致可以在很快的时间内收敛到一致。消息传播速度达到了 logN。\n\n**5）简单**\n\nGossip 协议的过程极其简单，实现起来几乎没有太多复杂性。\n\nMárk Jelasity 在它的 《Gossip》一书中对其进行了归纳：\n\n![](assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg)\n**Gossip 的缺陷**\n\n分布式网络中，没有一种完美的解决方案，Gossip 协议跟其他协议一样，也有一些不可避免的缺陷，主要是两个：\n\n**1）消息的延迟**\n\n由于 Gossip 协议中，节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用 Gossip 协议会造成不可避免的消息延迟。不适合用在对实时性要求较高的场景下。\n\n**2）消息冗余**\n\nGossip 协议规定，节点会定期随机选择周围节点发送消息，而收到消息的节点也会重复该步骤，因此就不可避免的存在消息重复发送给同一节点的情况，造成了消息的冗余，同时也增加了收到消息的节点的处理压力。而且，由于是定期发送，因此，即使收到了消息的节点还会反复收到重复消息，加重了消息的冗余。\n\n**Gossip 类型**\n\nGossip 有两种类型：\n\n* Anti-Entropy（反熵）：以固定的概率传播所有的数据\n* Rumor-Mongering（谣言传播）：仅传播新到达的数据\n\nAnti-Entropy 是 SI model，节点只有两种状态，Suspective 和 Infective，叫做 simple epidemics。\n\nRumor-Mongering 是 SIR model，节点有三种状态，Suspective，Infective 和 Removed，叫做 complex epidemics。\n其实，Anti-entropy 反熵是一个很奇怪的名词，之所以定义成这样，Jelasity 进行了解释，因为 entropy 是指混乱程度（disorder），而在这种模式下可以消除不同节点中数据的 disorder，因此 Anti-entropy 就是 anti-disorder。换句话说，它可以提高系统中节点之间的 similarity。\n在 SI model 下，一个节点会把所有的数据都跟其他节点共享，以便消除节点之间数据的任何不一致，它可以保证最终、完全的一致。\n\n由于在 SI model 下消息会不断反复的交换，因此消息数量是非常庞大的，无限制的（unbounded），这对一个系统来说是一个巨大的开销。\n\n但是在 Rumor Mongering（SIR Model） 模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个 Rumor 消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，SIR model 下，系统有一定的概率会不一致。\n\n而由于，SIR Model 下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。\n\n**Gossip 中的通信模式**\n\n在 Gossip 协议下，网络中两个节点之间有三种通信方式:\n\n* Push: 节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新 A 中比自己新的数据\n* Pull：A 仅将数据 key, version 推送给 B，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地\n* Push/Pull：与 Pull 类似，只是多了一步，A 再将本地比 B 新的数据推送给 B，B 则更新本地\n\n如果把两个节点数据同步一次定义为一个周期，则在一个周期内，Push 需通信 1 次，Pull 需 2 次，Push_Pull 则需 3 次。虽然消息数增加了，但从效果上来讲，Push_Pull 最好，理论上一个周期内可以使两个节点完全一致。直观上，Push/Pull 的收敛速度也是最快的。\n\n**复杂度分析**\n\n对于一个节点数为 N 的网络来说，假设每个 Gossip 周期，新感染的节点都能再感染至少一个新节点，那么 Gossip 协议退化成一个二叉树查找，经过 LogN 个周期之后，感染全网，时间开销是 O(LogN)。由于每个周期，每个节点都会至少发出一次消息，因此，消息复杂度（消息数量 = N * N）是 O(N^2) 。注意，这是 Gossip 理论上最优的收敛速度，但是在实际情况中，最优的收敛速度是很难达到的。\n\n假设某个节点在第 i 个周期被感染的概率为 pi，第 i+1 个周期被感染的概率为 pi+1 ，\n\n1）则 Pull 的方式:\n\n![](assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg)\n2）Push 方式：\n\n![](assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg)\n显然 Pull 的收敛速度大于 Push ，而每个节点在每个周期被感染的概率都是固定的 p (0<p<1)，因此 Gossip 算法是基于 p 的平方收敛，也称为概率收敛，这在众多的一致性算法中是非常独特的。\n全文完！\n\n[P2P 网络核心技术：Gossip 协议](https://zhuanlan.zhihu.com/p/41228196)\n","source":"_posts/算法与协议/Gossip协议.md","raw":"---\ntitle: P2P 网络核心技术：Gossip 协议\ncategories:\n  - 算法\ntags:\n  - 分布式协议\n  - 网络协议\ndate: 2020-12-01 14:13:04\n---\n![](assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg)\n**背景**\n\nGossip protocol 也叫 Epidemic Protocol （流行病协议），实际上它还有很多别名，比如：“流言算法”、“疫情传播算法”等。\n\n这个协议的作用就像其名字表示的意思一样，非常容易理解，它的方式其实在我们日常生活中也很常见，比如电脑病毒的传播，森林大火，细胞扩散等等。\n\nGossip protocol 最早是在 1987 年发表在 ACM 上的论文 《Epidemic Algorithms for Replicated Database Maintenance》中被提出。主要用在分布式数据库系统中各个副本节点同步数据之用，这种场景的一个最大特点就是组成的网络的节点都是对等节点，是非结构化网络，这区别与之前介绍的用于结构化网络中的 DHT 算法 Kadmelia。\n\n我们知道，很多知名的 P2P 网络或区块链项目，比如 IPFS，Ethereum 等，都使用了 Kadmelia 算法，而大名鼎鼎的 Bitcoin 则是使用了 Gossip 协议来传播交易和区块信息。\n\n实际上，只要仔细分析一下场景就知道，Ethereum 使用 DHT 算法并不是很合理，因为它使用节点保存整个链数据，不像 IPFS 那样分片保存数据，因此 Ethereum 真正适合的协议应该像 Bitcoin 那样，是 Gossip 协议。\n\n**这里先简单介绍一下 Gossip 协议的执行过程：**\n\nGossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。\n\n**Gossip 演示**\n\n现在，我们通过一个具体的实例来深入体会一下 Gossip 传播的完整过程\n\n**为了表述清楚，我们先做一些前提设定**\n\n1、Gossip 是周期性的散播消息，把周期限定为 1 秒\n\n2、被感染节点随机选择 k 个邻接节点（fan-out）散播消息，这里把 fan-out 设置为 3，每次最多往 3 个节点散播。\n\n3、每次散播消息都选择尚未发送过的节点进行散播\n\n4、收到消息的节点不再往发送节点散播，比如 A -> B，那么 B 进行散播的时候，不再发给 A。\n注意：Gossip 过程是异步的，也就是说发消息的节点不会关注对方是否收到，即不等待响应；不管对方有没有收到，它都会每隔 1 秒向周围节点发消息。异步是它的优点，而消息冗余则是它的缺点。\n\n这里一共有 16 个节点，节点 1 为初始被感染节点，通过 Gossip 过程，最终所有节点都被感染：\n\n![](assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif)\n**Gossip 的特点（优势）**\n\n**1）扩展性**\n\n网络可以允许节点的任意增加和减少，新增加的节点的状态最终会与其他节点一致。\n\n**2）容错**\n\n网络中任何节点的宕机和重启都不会影响 Gossip 消息的传播，Gossip 协议具有天然的分布式系统容错特性。\n\n**3）去中心化**\n\nGossip 协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。\n\n**4）一致性收敛**\n\nGossip 协议中的消息会以一传十、十传百一样的指数级速度在网络中快速传播，因此系统状态的不一致可以在很快的时间内收敛到一致。消息传播速度达到了 logN。\n\n**5）简单**\n\nGossip 协议的过程极其简单，实现起来几乎没有太多复杂性。\n\nMárk Jelasity 在它的 《Gossip》一书中对其进行了归纳：\n\n![](assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg)\n**Gossip 的缺陷**\n\n分布式网络中，没有一种完美的解决方案，Gossip 协议跟其他协议一样，也有一些不可避免的缺陷，主要是两个：\n\n**1）消息的延迟**\n\n由于 Gossip 协议中，节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用 Gossip 协议会造成不可避免的消息延迟。不适合用在对实时性要求较高的场景下。\n\n**2）消息冗余**\n\nGossip 协议规定，节点会定期随机选择周围节点发送消息，而收到消息的节点也会重复该步骤，因此就不可避免的存在消息重复发送给同一节点的情况，造成了消息的冗余，同时也增加了收到消息的节点的处理压力。而且，由于是定期发送，因此，即使收到了消息的节点还会反复收到重复消息，加重了消息的冗余。\n\n**Gossip 类型**\n\nGossip 有两种类型：\n\n* Anti-Entropy（反熵）：以固定的概率传播所有的数据\n* Rumor-Mongering（谣言传播）：仅传播新到达的数据\n\nAnti-Entropy 是 SI model，节点只有两种状态，Suspective 和 Infective，叫做 simple epidemics。\n\nRumor-Mongering 是 SIR model，节点有三种状态，Suspective，Infective 和 Removed，叫做 complex epidemics。\n其实，Anti-entropy 反熵是一个很奇怪的名词，之所以定义成这样，Jelasity 进行了解释，因为 entropy 是指混乱程度（disorder），而在这种模式下可以消除不同节点中数据的 disorder，因此 Anti-entropy 就是 anti-disorder。换句话说，它可以提高系统中节点之间的 similarity。\n在 SI model 下，一个节点会把所有的数据都跟其他节点共享，以便消除节点之间数据的任何不一致，它可以保证最终、完全的一致。\n\n由于在 SI model 下消息会不断反复的交换，因此消息数量是非常庞大的，无限制的（unbounded），这对一个系统来说是一个巨大的开销。\n\n但是在 Rumor Mongering（SIR Model） 模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个 Rumor 消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，SIR model 下，系统有一定的概率会不一致。\n\n而由于，SIR Model 下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。\n\n**Gossip 中的通信模式**\n\n在 Gossip 协议下，网络中两个节点之间有三种通信方式:\n\n* Push: 节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新 A 中比自己新的数据\n* Pull：A 仅将数据 key, version 推送给 B，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地\n* Push/Pull：与 Pull 类似，只是多了一步，A 再将本地比 B 新的数据推送给 B，B 则更新本地\n\n如果把两个节点数据同步一次定义为一个周期，则在一个周期内，Push 需通信 1 次，Pull 需 2 次，Push_Pull 则需 3 次。虽然消息数增加了，但从效果上来讲，Push_Pull 最好，理论上一个周期内可以使两个节点完全一致。直观上，Push/Pull 的收敛速度也是最快的。\n\n**复杂度分析**\n\n对于一个节点数为 N 的网络来说，假设每个 Gossip 周期，新感染的节点都能再感染至少一个新节点，那么 Gossip 协议退化成一个二叉树查找，经过 LogN 个周期之后，感染全网，时间开销是 O(LogN)。由于每个周期，每个节点都会至少发出一次消息，因此，消息复杂度（消息数量 = N * N）是 O(N^2) 。注意，这是 Gossip 理论上最优的收敛速度，但是在实际情况中，最优的收敛速度是很难达到的。\n\n假设某个节点在第 i 个周期被感染的概率为 pi，第 i+1 个周期被感染的概率为 pi+1 ，\n\n1）则 Pull 的方式:\n\n![](assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg)\n2）Push 方式：\n\n![](assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg)\n显然 Pull 的收敛速度大于 Push ，而每个节点在每个周期被感染的概率都是固定的 p (0<p<1)，因此 Gossip 算法是基于 p 的平方收敛，也称为概率收敛，这在众多的一致性算法中是非常独特的。\n全文完！\n\n[P2P 网络核心技术：Gossip 协议](https://zhuanlan.zhihu.com/p/41228196)\n","slug":"算法与协议/Gossip协议","published":1,"updated":"2020-12-01T06:14:06.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsenc000i4kpwc0g8bx7n","content":"<p><img src=\"assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg\"><br><strong>背景</strong></p>\n<p>Gossip protocol 也叫 Epidemic Protocol （流行病协议），实际上它还有很多别名，比如：“流言算法”、“疫情传播算法”等。</p>\n<p>这个协议的作用就像其名字表示的意思一样，非常容易理解，它的方式其实在我们日常生活中也很常见，比如电脑病毒的传播，森林大火，细胞扩散等等。</p>\n<p>Gossip protocol 最早是在 1987 年发表在 ACM 上的论文 《Epidemic Algorithms for Replicated Database Maintenance》中被提出。主要用在分布式数据库系统中各个副本节点同步数据之用，这种场景的一个最大特点就是组成的网络的节点都是对等节点，是非结构化网络，这区别与之前介绍的用于结构化网络中的 DHT 算法 Kadmelia。</p>\n<p>我们知道，很多知名的 P2P 网络或区块链项目，比如 IPFS，Ethereum 等，都使用了 Kadmelia 算法，而大名鼎鼎的 Bitcoin 则是使用了 Gossip 协议来传播交易和区块信息。</p>\n<p>实际上，只要仔细分析一下场景就知道，Ethereum 使用 DHT 算法并不是很合理，因为它使用节点保存整个链数据，不像 IPFS 那样分片保存数据，因此 Ethereum 真正适合的协议应该像 Bitcoin 那样，是 Gossip 协议。</p>\n<p><strong>这里先简单介绍一下 Gossip 协议的执行过程：</strong></p>\n<p>Gossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。</p>\n<p><strong>Gossip 演示</strong></p>\n<p>现在，我们通过一个具体的实例来深入体会一下 Gossip 传播的完整过程</p>\n<p><strong>为了表述清楚，我们先做一些前提设定</strong></p>\n<p>1、Gossip 是周期性的散播消息，把周期限定为 1 秒</p>\n<p>2、被感染节点随机选择 k 个邻接节点（fan-out）散播消息，这里把 fan-out 设置为 3，每次最多往 3 个节点散播。</p>\n<p>3、每次散播消息都选择尚未发送过的节点进行散播</p>\n<p>4、收到消息的节点不再往发送节点散播，比如 A -&gt; B，那么 B 进行散播的时候，不再发给 A。<br>注意：Gossip 过程是异步的，也就是说发消息的节点不会关注对方是否收到，即不等待响应；不管对方有没有收到，它都会每隔 1 秒向周围节点发消息。异步是它的优点，而消息冗余则是它的缺点。</p>\n<p>这里一共有 16 个节点，节点 1 为初始被感染节点，通过 Gossip 过程，最终所有节点都被感染：</p>\n<p><img src=\"assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif\"><br><strong>Gossip 的特点（优势）</strong></p>\n<p><strong>1）扩展性</strong></p>\n<p>网络可以允许节点的任意增加和减少，新增加的节点的状态最终会与其他节点一致。</p>\n<p><strong>2）容错</strong></p>\n<p>网络中任何节点的宕机和重启都不会影响 Gossip 消息的传播，Gossip 协议具有天然的分布式系统容错特性。</p>\n<p><strong>3）去中心化</strong></p>\n<p>Gossip 协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。</p>\n<p><strong>4）一致性收敛</strong></p>\n<p>Gossip 协议中的消息会以一传十、十传百一样的指数级速度在网络中快速传播，因此系统状态的不一致可以在很快的时间内收敛到一致。消息传播速度达到了 logN。</p>\n<p><strong>5）简单</strong></p>\n<p>Gossip 协议的过程极其简单，实现起来几乎没有太多复杂性。</p>\n<p>Márk Jelasity 在它的 《Gossip》一书中对其进行了归纳：</p>\n<p><img src=\"assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg\"><br><strong>Gossip 的缺陷</strong></p>\n<p>分布式网络中，没有一种完美的解决方案，Gossip 协议跟其他协议一样，也有一些不可避免的缺陷，主要是两个：</p>\n<p><strong>1）消息的延迟</strong></p>\n<p>由于 Gossip 协议中，节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用 Gossip 协议会造成不可避免的消息延迟。不适合用在对实时性要求较高的场景下。</p>\n<p><strong>2）消息冗余</strong></p>\n<p>Gossip 协议规定，节点会定期随机选择周围节点发送消息，而收到消息的节点也会重复该步骤，因此就不可避免的存在消息重复发送给同一节点的情况，造成了消息的冗余，同时也增加了收到消息的节点的处理压力。而且，由于是定期发送，因此，即使收到了消息的节点还会反复收到重复消息，加重了消息的冗余。</p>\n<p><strong>Gossip 类型</strong></p>\n<p>Gossip 有两种类型：</p>\n<ul>\n<li>Anti-Entropy（反熵）：以固定的概率传播所有的数据</li>\n<li>Rumor-Mongering（谣言传播）：仅传播新到达的数据</li>\n</ul>\n<p>Anti-Entropy 是 SI model，节点只有两种状态，Suspective 和 Infective，叫做 simple epidemics。</p>\n<p>Rumor-Mongering 是 SIR model，节点有三种状态，Suspective，Infective 和 Removed，叫做 complex epidemics。<br>其实，Anti-entropy 反熵是一个很奇怪的名词，之所以定义成这样，Jelasity 进行了解释，因为 entropy 是指混乱程度（disorder），而在这种模式下可以消除不同节点中数据的 disorder，因此 Anti-entropy 就是 anti-disorder。换句话说，它可以提高系统中节点之间的 similarity。<br>在 SI model 下，一个节点会把所有的数据都跟其他节点共享，以便消除节点之间数据的任何不一致，它可以保证最终、完全的一致。</p>\n<p>由于在 SI model 下消息会不断反复的交换，因此消息数量是非常庞大的，无限制的（unbounded），这对一个系统来说是一个巨大的开销。</p>\n<p>但是在 Rumor Mongering（SIR Model） 模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个 Rumor 消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，SIR model 下，系统有一定的概率会不一致。</p>\n<p>而由于，SIR Model 下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。</p>\n<p><strong>Gossip 中的通信模式</strong></p>\n<p>在 Gossip 协议下，网络中两个节点之间有三种通信方式:</p>\n<ul>\n<li>Push: 节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新 A 中比自己新的数据</li>\n<li>Pull：A 仅将数据 key, version 推送给 B，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地</li>\n<li>Push/Pull：与 Pull 类似，只是多了一步，A 再将本地比 B 新的数据推送给 B，B 则更新本地</li>\n</ul>\n<p>如果把两个节点数据同步一次定义为一个周期，则在一个周期内，Push 需通信 1 次，Pull 需 2 次，Push_Pull 则需 3 次。虽然消息数增加了，但从效果上来讲，Push_Pull 最好，理论上一个周期内可以使两个节点完全一致。直观上，Push/Pull 的收敛速度也是最快的。</p>\n<p><strong>复杂度分析</strong></p>\n<p>对于一个节点数为 N 的网络来说，假设每个 Gossip 周期，新感染的节点都能再感染至少一个新节点，那么 Gossip 协议退化成一个二叉树查找，经过 LogN 个周期之后，感染全网，时间开销是 O(LogN)。由于每个周期，每个节点都会至少发出一次消息，因此，消息复杂度（消息数量 = N * N）是 O(N^2) 。注意，这是 Gossip 理论上最优的收敛速度，但是在实际情况中，最优的收敛速度是很难达到的。</p>\n<p>假设某个节点在第 i 个周期被感染的概率为 pi，第 i+1 个周期被感染的概率为 pi+1 ，</p>\n<p>1）则 Pull 的方式:</p>\n<p><img src=\"assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg\"><br>2）Push 方式：</p>\n<p><img src=\"assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg\"><br>显然 Pull 的收敛速度大于 Push ，而每个节点在每个周期被感染的概率都是固定的 p (0&lt;p&lt;1)，因此 Gossip 算法是基于 p 的平方收敛，也称为概率收敛，这在众多的一致性算法中是非常独特的。<br>全文完！</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41228196\">P2P 网络核心技术：Gossip 协议</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p><img src=\"assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg\"><br><strong>背景</strong></p>\n<p>Gossip protocol 也叫 Epidemic Protocol （流行病协议），实际上它还有很多别名，比如：“流言算法”、“疫情传播算法”等。</p>\n<p>这个协议的作用就像其名字表示的意思一样，非常容易理解，它的方式其实在我们日常生活中也很常见，比如电脑病毒的传播，森林大火，细胞扩散等等。</p>\n<p>Gossip protocol 最早是在 1987 年发表在 ACM 上的论文 《Epidemic Algorithms for Replicated Database Maintenance》中被提出。主要用在分布式数据库系统中各个副本节点同步数据之用，这种场景的一个最大特点就是组成的网络的节点都是对等节点，是非结构化网络，这区别与之前介绍的用于结构化网络中的 DHT 算法 Kadmelia。</p>\n<p>我们知道，很多知名的 P2P 网络或区块链项目，比如 IPFS，Ethereum 等，都使用了 Kadmelia 算法，而大名鼎鼎的 Bitcoin 则是使用了 Gossip 协议来传播交易和区块信息。</p>\n<p>实际上，只要仔细分析一下场景就知道，Ethereum 使用 DHT 算法并不是很合理，因为它使用节点保存整个链数据，不像 IPFS 那样分片保存数据，因此 Ethereum 真正适合的协议应该像 Bitcoin 那样，是 Gossip 协议。</p>\n<p><strong>这里先简单介绍一下 Gossip 协议的执行过程：</strong></p>\n<p>Gossip 过程是由种子节点发起，当一个种子节点有状态需要更新到网络中的其他节点时，它会随机的选择周围几个节点散播消息，收到消息的节点也会重复该过程，直至最终网络中所有的节点都收到了消息。这个过程可能需要一定的时间，由于不能保证某个时刻所有节点都收到消息，但是理论上最终所有节点都会收到消息，因此它是一个最终一致性协议。</p>\n<p><strong>Gossip 演示</strong></p>\n<p>现在，我们通过一个具体的实例来深入体会一下 Gossip 传播的完整过程</p>\n<p><strong>为了表述清楚，我们先做一些前提设定</strong></p>\n<p>1、Gossip 是周期性的散播消息，把周期限定为 1 秒</p>\n<p>2、被感染节点随机选择 k 个邻接节点（fan-out）散播消息，这里把 fan-out 设置为 3，每次最多往 3 个节点散播。</p>\n<p>3、每次散播消息都选择尚未发送过的节点进行散播</p>\n<p>4、收到消息的节点不再往发送节点散播，比如 A -&gt; B，那么 B 进行散播的时候，不再发给 A。<br>注意：Gossip 过程是异步的，也就是说发消息的节点不会关注对方是否收到，即不等待响应；不管对方有没有收到，它都会每隔 1 秒向周围节点发消息。异步是它的优点，而消息冗余则是它的缺点。</p>\n<p>这里一共有 16 个节点，节点 1 为初始被感染节点，通过 Gossip 过程，最终所有节点都被感染：</p>\n<p><img src=\"assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif\"><br><strong>Gossip 的特点（优势）</strong></p>\n<p><strong>1）扩展性</strong></p>\n<p>网络可以允许节点的任意增加和减少，新增加的节点的状态最终会与其他节点一致。</p>\n<p><strong>2）容错</strong></p>\n<p>网络中任何节点的宕机和重启都不会影响 Gossip 消息的传播，Gossip 协议具有天然的分布式系统容错特性。</p>\n<p><strong>3）去中心化</strong></p>\n<p>Gossip 协议不要求任何中心节点，所有节点都可以是对等的，任何一个节点无需知道整个网络状况，只要网络是连通的，任意一个节点就可以把消息散播到全网。</p>\n<p><strong>4）一致性收敛</strong></p>\n<p>Gossip 协议中的消息会以一传十、十传百一样的指数级速度在网络中快速传播，因此系统状态的不一致可以在很快的时间内收敛到一致。消息传播速度达到了 logN。</p>\n<p><strong>5）简单</strong></p>\n<p>Gossip 协议的过程极其简单，实现起来几乎没有太多复杂性。</p>\n<p>Márk Jelasity 在它的 《Gossip》一书中对其进行了归纳：</p>\n<p><img src=\"assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg\"><br><strong>Gossip 的缺陷</strong></p>\n<p>分布式网络中，没有一种完美的解决方案，Gossip 协议跟其他协议一样，也有一些不可避免的缺陷，主要是两个：</p>\n<p><strong>1）消息的延迟</strong></p>\n<p>由于 Gossip 协议中，节点只会随机向少数几个节点发送消息，消息最终是通过多个轮次的散播而到达全网的，因此使用 Gossip 协议会造成不可避免的消息延迟。不适合用在对实时性要求较高的场景下。</p>\n<p><strong>2）消息冗余</strong></p>\n<p>Gossip 协议规定，节点会定期随机选择周围节点发送消息，而收到消息的节点也会重复该步骤，因此就不可避免的存在消息重复发送给同一节点的情况，造成了消息的冗余，同时也增加了收到消息的节点的处理压力。而且，由于是定期发送，因此，即使收到了消息的节点还会反复收到重复消息，加重了消息的冗余。</p>\n<p><strong>Gossip 类型</strong></p>\n<p>Gossip 有两种类型：</p>\n<ul>\n<li>Anti-Entropy（反熵）：以固定的概率传播所有的数据</li>\n<li>Rumor-Mongering（谣言传播）：仅传播新到达的数据</li>\n</ul>\n<p>Anti-Entropy 是 SI model，节点只有两种状态，Suspective 和 Infective，叫做 simple epidemics。</p>\n<p>Rumor-Mongering 是 SIR model，节点有三种状态，Suspective，Infective 和 Removed，叫做 complex epidemics。<br>其实，Anti-entropy 反熵是一个很奇怪的名词，之所以定义成这样，Jelasity 进行了解释，因为 entropy 是指混乱程度（disorder），而在这种模式下可以消除不同节点中数据的 disorder，因此 Anti-entropy 就是 anti-disorder。换句话说，它可以提高系统中节点之间的 similarity。<br>在 SI model 下，一个节点会把所有的数据都跟其他节点共享，以便消除节点之间数据的任何不一致，它可以保证最终、完全的一致。</p>\n<p>由于在 SI model 下消息会不断反复的交换，因此消息数量是非常庞大的，无限制的（unbounded），这对一个系统来说是一个巨大的开销。</p>\n<p>但是在 Rumor Mongering（SIR Model） 模型下，消息可以发送得更频繁，因为消息只包含最新 update，体积更小。而且，一个 Rumor 消息在某个时间点之后会被标记为 removed，并且不再被传播，因此，SIR model 下，系统有一定的概率会不一致。</p>\n<p>而由于，SIR Model 下某个时间点之后消息不再传播，因此消息是有限的，系统开销小。</p>\n<p><strong>Gossip 中的通信模式</strong></p>\n<p>在 Gossip 协议下，网络中两个节点之间有三种通信方式:</p>\n<ul>\n<li>Push: 节点 A 将数据 (key,value,version) 及对应的版本号推送给 B 节点，B 节点更新 A 中比自己新的数据</li>\n<li>Pull：A 仅将数据 key, version 推送给 B，B 将本地比 A 新的数据（Key, value, version）推送给 A，A 更新本地</li>\n<li>Push/Pull：与 Pull 类似，只是多了一步，A 再将本地比 B 新的数据推送给 B，B 则更新本地</li>\n</ul>\n<p>如果把两个节点数据同步一次定义为一个周期，则在一个周期内，Push 需通信 1 次，Pull 需 2 次，Push_Pull 则需 3 次。虽然消息数增加了，但从效果上来讲，Push_Pull 最好，理论上一个周期内可以使两个节点完全一致。直观上，Push/Pull 的收敛速度也是最快的。</p>\n<p><strong>复杂度分析</strong></p>\n<p>对于一个节点数为 N 的网络来说，假设每个 Gossip 周期，新感染的节点都能再感染至少一个新节点，那么 Gossip 协议退化成一个二叉树查找，经过 LogN 个周期之后，感染全网，时间开销是 O(LogN)。由于每个周期，每个节点都会至少发出一次消息，因此，消息复杂度（消息数量 = N * N）是 O(N^2) 。注意，这是 Gossip 理论上最优的收敛速度，但是在实际情况中，最优的收敛速度是很难达到的。</p>\n<p>假设某个节点在第 i 个周期被感染的概率为 pi，第 i+1 个周期被感染的概率为 pi+1 ，</p>\n<p>1）则 Pull 的方式:</p>\n<p><img src=\"assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg\"><br>2）Push 方式：</p>\n<p><img src=\"assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg\"><br>显然 Pull 的收敛速度大于 Push ，而每个节点在每个周期被感染的概率都是固定的 p (0&lt;p&lt;1)，因此 Gossip 算法是基于 p 的平方收敛，也称为概率收敛，这在众多的一致性算法中是非常独特的。<br>全文完！</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/41228196\">P2P 网络核心技术：Gossip 协议</a></p>\n"},{"title":"一文读懂 HTTP/2 及 HTTP/3 特性","date":"2020-12-02T08:57:35.000Z","_content":"**摘要：** 学习 HTTP/2 与 HTTP/3。\n\n* 原文： [一文读懂 HTTP/2 及 HTTP/3 特性](https://segmentfault.com/a/1190000018401534)\n* 作者： [浪里行舟](https://segmentfault.com/u/langlixingzhou)\n\n*[Fundebug](https://www.fundebug.com/) 经授权转载，版权归原作者所有。*\n\n### 前言\n\nHTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。\n\n虽然 HTTP/2 提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。\n\n### 一、HTTP 协议\n\nHTTP 协议是 HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。伴随着计算机网络和浏览器的诞生，HTTP1.0 也随之而来，处于计算机网络中的应用层，HTTP 是建立在 TCP 协议之上，所以 **HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性** ，例如 tcp 建立连接的 3 次握手和断开连接的 4 次挥手以及每次建立连接带来的 RTT 延迟时间。\n\n### 二、HTTP/1.x 的缺陷\n\n* **连接无法复用** ：连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。\n\n\t* HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。\n\t* HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。\n\n* **Head-Of-Line Blocking（HOLB）** ：导致带宽无法被充分利用，以及后续健康请求被阻塞。 [HOLB](http://stackoverflow.com/questions/25221954/spdy-head-of-line-blocking) 是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。\n\n\t* HTTP 1.0：下个请求必须在前一个请求返回后才能发出， `request-response` 对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。\n\t* HTTP 1.1：尝试使用 pipeling 来解决，即浏览器可以一次性发出多个请求（同个域名，同一条 TCP 链接）。但 pipeling 要求返回是按序的，那么前一个请求如果很耗时（比如处理大图片），那么后面的请求即使服务器已经处理完，仍会等待前面的请求处理完才开始按序返回。所以，pipeling 只部分解决了 HOLB。\n\n![](assets/2019-03-06-1.png)\n如上图所示，红色圈出来的请求就因域名链接数已超过限制，而被挂起等待了一段时间。\n\n* **协议开销大** ： HTTP1.x 在使用时，header 里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求 header 基本不怎么变化，尤其在移动端增加用户流量。\n* **安全因素** ：HTTP1.x 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性\n\n### 三、SPDY 协议\n\n因为 HTTP/1.x 的问题，我们会引入雪碧图、将小图内联、使用多个域名等等的方式来提高性能。不过这些优化都绕开了协议，直到 2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。谷歌推出 SPDY，才算是正式改造 HTTP 协议本身。降低延迟，压缩 header 等等，SPDY 的实践证明了这些优化的效果，也最终带来 HTTP/2 的诞生。\n\nSPDY 协议在 Chrome 浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。\n\n### 四、HTTP/2 简介\n\n2015 年，HTTP_2 发布。HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写，HTTP 方法_状态码/语义都与 HTTP/1.x 一样。HTTP/2 基于 SPDY3，专注于 **性能** ，最大的一个目标是在用户和网站间只用一个连接（connection）。\n\nHTTP/2 由两个规范（Specification）组成：\n\n1. Hypertext Transfer Protocol version 2 - RFC7540\n2. HPACK - Header Compression for HTTP/2 - RFC7541\n\n### 五、HTTP/2 新特性\n\n#### 1. 二进制传输\n\nHTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。 **HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码** 。\n\n接下来我们介绍几个重要的概念：\n\n* 流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）；\n* 消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。\n* 帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等\n\n![](assets/2019-03-06-2.png)\nHTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。\n\n#### 2. 多路复用\n\n在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。\n\n大家可以通过 [该链接](https://http2.akamai.com/demo) 直观感受下 HTTP/2 比 HTTP/1 到底快了多少。\n\n![](assets/2019-03-06-3.gif)\n在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 链接去实现多流并行了，在 HTTP/2 中：\n\n* 同域名下所有通信都在单个连接上完成。\n* 单个连接可以承载任意数量的双向数据流。\n* 数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。\n\n这一特性，使性能有了极大提升：\n\n* 同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应,消除了因多个 TCP 连接而带来的延时和内存消耗。\n* 并行交错地发送多个请求，请求之间互不影响。\n* 并行交错地发送多个响应，响应之间互不干扰。\n* 在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。\n\n![](assets/2019-03-06-4.png)\n如上图所示，多路复用的技术可以只通过一个 TCP 连接就可以传输所有的请求数据。\n\n在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。\n\n为了减少这块的资源消耗并提升性能， HTTP/2 对这些首部采取了压缩策略：\n\n* HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；\n* 首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新;\n* 每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值\n\n例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销\n\n![](assets/2019-03-06-5.png)\n### 4. Server Push\n\nServer Push 即服务端能通过 push 的方式将客户端需要的内容预先推送过去，也叫“cache push”。\n\n可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch。\n例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。\n\n![](assets/2019-03-06-6.png)\n服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。\n\n### 六、HTTP/3 新特性\n\n#### 1. HTTP/3 简介\n\n虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。\n\n上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。\n\n因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。\n\n那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。\n\n基于这个原因， **Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上** ，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\n\nQUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。\n\n#### 2. QUIC 新功能\n\n通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。 **0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势** 。那什么是 0RTT 建连呢？\n\n这里面有两层含义:\n\n* 传输层 0RTT 就能建立连接。\n* 加密层 0RTT 就能建立加密连接。\n\n![](assets/2019-03-06-7.png)\n上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。\n\n而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。\n\n虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。\n\n同 HTTP2.0 一样，同一条 QUIC 连接上可以创建多个 stream，来发送多个 HTTP 请求，但是，QUIC 是基于 UDP 的，一个连接上的多个 stream 之间没有依赖。比如下图中 stream2 丢了一个 UDP 包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然 stream2 的那个包需要重新传，但是 stream3、stream4 的包无需等待，就可以发给用户。\n\n![](assets/2019-03-06-8.png)\n另外 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。\n\nTCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。\n\n但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。\n\n这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。\n\n![](assets/2019-03-06-9.png)\n如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。\n\nQUIC 协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间(包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗)\n\n假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。 **当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了** 。\n\n### 七、总结\n\n* HTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷\n* HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的\n* QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议\n\n[一文读懂 HTTP/2 及 HTTP/3 特性](https://blog.fundebug.com/2019/03/07/understand-http2-and-http3/)\n","source":"_posts/算法与协议/http-123.md","raw":"---\ntitle: 一文读懂 HTTP/2 及 HTTP/3 特性\ncategories:\n  - 协议\ntags:\n  - 网络协议\ndate: 2020-12-02 16:57:35\n---\n**摘要：** 学习 HTTP/2 与 HTTP/3。\n\n* 原文： [一文读懂 HTTP/2 及 HTTP/3 特性](https://segmentfault.com/a/1190000018401534)\n* 作者： [浪里行舟](https://segmentfault.com/u/langlixingzhou)\n\n*[Fundebug](https://www.fundebug.com/) 经授权转载，版权归原作者所有。*\n\n### 前言\n\nHTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。\n\n虽然 HTTP/2 提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。\n\n### 一、HTTP 协议\n\nHTTP 协议是 HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。伴随着计算机网络和浏览器的诞生，HTTP1.0 也随之而来，处于计算机网络中的应用层，HTTP 是建立在 TCP 协议之上，所以 **HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性** ，例如 tcp 建立连接的 3 次握手和断开连接的 4 次挥手以及每次建立连接带来的 RTT 延迟时间。\n\n### 二、HTTP/1.x 的缺陷\n\n* **连接无法复用** ：连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。\n\n\t* HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。\n\t* HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。\n\n* **Head-Of-Line Blocking（HOLB）** ：导致带宽无法被充分利用，以及后续健康请求被阻塞。 [HOLB](http://stackoverflow.com/questions/25221954/spdy-head-of-line-blocking) 是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。\n\n\t* HTTP 1.0：下个请求必须在前一个请求返回后才能发出， `request-response` 对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。\n\t* HTTP 1.1：尝试使用 pipeling 来解决，即浏览器可以一次性发出多个请求（同个域名，同一条 TCP 链接）。但 pipeling 要求返回是按序的，那么前一个请求如果很耗时（比如处理大图片），那么后面的请求即使服务器已经处理完，仍会等待前面的请求处理完才开始按序返回。所以，pipeling 只部分解决了 HOLB。\n\n![](assets/2019-03-06-1.png)\n如上图所示，红色圈出来的请求就因域名链接数已超过限制，而被挂起等待了一段时间。\n\n* **协议开销大** ： HTTP1.x 在使用时，header 里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求 header 基本不怎么变化，尤其在移动端增加用户流量。\n* **安全因素** ：HTTP1.x 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性\n\n### 三、SPDY 协议\n\n因为 HTTP/1.x 的问题，我们会引入雪碧图、将小图内联、使用多个域名等等的方式来提高性能。不过这些优化都绕开了协议，直到 2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。谷歌推出 SPDY，才算是正式改造 HTTP 协议本身。降低延迟，压缩 header 等等，SPDY 的实践证明了这些优化的效果，也最终带来 HTTP/2 的诞生。\n\nSPDY 协议在 Chrome 浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。\n\n### 四、HTTP/2 简介\n\n2015 年，HTTP_2 发布。HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写，HTTP 方法_状态码/语义都与 HTTP/1.x 一样。HTTP/2 基于 SPDY3，专注于 **性能** ，最大的一个目标是在用户和网站间只用一个连接（connection）。\n\nHTTP/2 由两个规范（Specification）组成：\n\n1. Hypertext Transfer Protocol version 2 - RFC7540\n2. HPACK - Header Compression for HTTP/2 - RFC7541\n\n### 五、HTTP/2 新特性\n\n#### 1. 二进制传输\n\nHTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。 **HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码** 。\n\n接下来我们介绍几个重要的概念：\n\n* 流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）；\n* 消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。\n* 帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等\n\n![](assets/2019-03-06-2.png)\nHTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。\n\n#### 2. 多路复用\n\n在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。\n\n大家可以通过 [该链接](https://http2.akamai.com/demo) 直观感受下 HTTP/2 比 HTTP/1 到底快了多少。\n\n![](assets/2019-03-06-3.gif)\n在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 链接去实现多流并行了，在 HTTP/2 中：\n\n* 同域名下所有通信都在单个连接上完成。\n* 单个连接可以承载任意数量的双向数据流。\n* 数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。\n\n这一特性，使性能有了极大提升：\n\n* 同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应,消除了因多个 TCP 连接而带来的延时和内存消耗。\n* 并行交错地发送多个请求，请求之间互不影响。\n* 并行交错地发送多个响应，响应之间互不干扰。\n* 在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。\n\n![](assets/2019-03-06-4.png)\n如上图所示，多路复用的技术可以只通过一个 TCP 连接就可以传输所有的请求数据。\n\n在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。\n\n为了减少这块的资源消耗并提升性能， HTTP/2 对这些首部采取了压缩策略：\n\n* HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；\n* 首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新;\n* 每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值\n\n例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销\n\n![](assets/2019-03-06-5.png)\n### 4. Server Push\n\nServer Push 即服务端能通过 push 的方式将客户端需要的内容预先推送过去，也叫“cache push”。\n\n可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch。\n例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。\n\n![](assets/2019-03-06-6.png)\n服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。\n\n### 六、HTTP/3 新特性\n\n#### 1. HTTP/3 简介\n\n虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。\n\n上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。\n\n因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。\n\n那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。\n\n基于这个原因， **Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上** ，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。\n\nQUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。\n\n#### 2. QUIC 新功能\n\n通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。 **0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势** 。那什么是 0RTT 建连呢？\n\n这里面有两层含义:\n\n* 传输层 0RTT 就能建立连接。\n* 加密层 0RTT 就能建立加密连接。\n\n![](assets/2019-03-06-7.png)\n上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。\n\n而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。\n\n虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。\n\n同 HTTP2.0 一样，同一条 QUIC 连接上可以创建多个 stream，来发送多个 HTTP 请求，但是，QUIC 是基于 UDP 的，一个连接上的多个 stream 之间没有依赖。比如下图中 stream2 丢了一个 UDP 包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然 stream2 的那个包需要重新传，但是 stream3、stream4 的包无需等待，就可以发给用户。\n\n![](assets/2019-03-06-8.png)\n另外 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。\n\nTCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。\n\n但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。\n\n这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。\n\n![](assets/2019-03-06-9.png)\n如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。\n\nQUIC 协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间(包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗)\n\n假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。 **当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了** 。\n\n### 七、总结\n\n* HTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷\n* HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的\n* QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议\n\n[一文读懂 HTTP/2 及 HTTP/3 特性](https://blog.fundebug.com/2019/03/07/understand-http2-and-http3/)\n","slug":"算法与协议/http-123","published":1,"updated":"2020-12-02T08:59:16.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsenc000j4kpwf4hletqc","content":"<p><strong>摘要：</strong> 学习 HTTP/2 与 HTTP/3。</p>\n<ul>\n<li>原文： <a href=\"https://segmentfault.com/a/1190000018401534\">一文读懂 HTTP/2 及 HTTP/3 特性</a></li>\n<li>作者： <a href=\"https://segmentfault.com/u/langlixingzhou\">浪里行舟</a></li>\n</ul>\n<p><em><a href=\"https://www.fundebug.com/\">Fundebug</a> 经授权转载，版权归原作者所有。</em></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>HTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。</p>\n<p>虽然 HTTP/2 提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</p>\n<h3 id=\"一、HTTP-协议\"><a href=\"#一、HTTP-协议\" class=\"headerlink\" title=\"一、HTTP 协议\"></a>一、HTTP 协议</h3><p>HTTP 协议是 HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。伴随着计算机网络和浏览器的诞生，HTTP1.0 也随之而来，处于计算机网络中的应用层，HTTP 是建立在 TCP 协议之上，所以 <strong>HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性</strong> ，例如 tcp 建立连接的 3 次握手和断开连接的 4 次挥手以及每次建立连接带来的 RTT 延迟时间。</p>\n<h3 id=\"二、HTTP-1-x-的缺陷\"><a href=\"#二、HTTP-1-x-的缺陷\" class=\"headerlink\" title=\"二、HTTP/1.x 的缺陷\"></a>二、HTTP/1.x 的缺陷</h3><ul>\n<li><p><strong>连接无法复用</strong> ：连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。</p>\n<ul>\n<li>HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。</li>\n<li>HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。</li>\n</ul>\n</li>\n<li><p><strong>Head-Of-Line Blocking（HOLB）</strong> ：导致带宽无法被充分利用，以及后续健康请求被阻塞。 <a href=\"http://stackoverflow.com/questions/25221954/spdy-head-of-line-blocking\">HOLB</a> 是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p>\n<ul>\n<li>HTTP 1.0：下个请求必须在前一个请求返回后才能发出， <code>request-response</code> 对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。</li>\n<li>HTTP 1.1：尝试使用 pipeling 来解决，即浏览器可以一次性发出多个请求（同个域名，同一条 TCP 链接）。但 pipeling 要求返回是按序的，那么前一个请求如果很耗时（比如处理大图片），那么后面的请求即使服务器已经处理完，仍会等待前面的请求处理完才开始按序返回。所以，pipeling 只部分解决了 HOLB。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"assets/2019-03-06-1.png\"><br>如上图所示，红色圈出来的请求就因域名链接数已超过限制，而被挂起等待了一段时间。</p>\n<ul>\n<li><strong>协议开销大</strong> ： HTTP1.x 在使用时，header 里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求 header 基本不怎么变化，尤其在移动端增加用户流量。</li>\n<li><strong>安全因素</strong> ：HTTP1.x 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性</li>\n</ul>\n<h3 id=\"三、SPDY-协议\"><a href=\"#三、SPDY-协议\" class=\"headerlink\" title=\"三、SPDY 协议\"></a>三、SPDY 协议</h3><p>因为 HTTP/1.x 的问题，我们会引入雪碧图、将小图内联、使用多个域名等等的方式来提高性能。不过这些优化都绕开了协议，直到 2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。谷歌推出 SPDY，才算是正式改造 HTTP 协议本身。降低延迟，压缩 header 等等，SPDY 的实践证明了这些优化的效果，也最终带来 HTTP/2 的诞生。</p>\n<p>SPDY 协议在 Chrome 浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。</p>\n<h3 id=\"四、HTTP-2-简介\"><a href=\"#四、HTTP-2-简介\" class=\"headerlink\" title=\"四、HTTP/2 简介\"></a>四、HTTP/2 简介</h3><p>2015 年，HTTP_2 发布。HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写，HTTP 方法_状态码/语义都与 HTTP/1.x 一样。HTTP/2 基于 SPDY3，专注于 <strong>性能</strong> ，最大的一个目标是在用户和网站间只用一个连接（connection）。</p>\n<p>HTTP/2 由两个规范（Specification）组成：</p>\n<ol>\n<li>Hypertext Transfer Protocol version 2 - RFC7540</li>\n<li>HPACK - Header Compression for HTTP/2 - RFC7541</li>\n</ol>\n<h3 id=\"五、HTTP-2-新特性\"><a href=\"#五、HTTP-2-新特性\" class=\"headerlink\" title=\"五、HTTP/2 新特性\"></a>五、HTTP/2 新特性</h3><h4 id=\"1-二进制传输\"><a href=\"#1-二进制传输\" class=\"headerlink\" title=\"1. 二进制传输\"></a>1. 二进制传输</h4><p>HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。 <strong>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</strong> 。</p>\n<p>接下来我们介绍几个重要的概念：</p>\n<ul>\n<li>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）；</li>\n<li>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。</li>\n<li>帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等</li>\n</ul>\n<p><img src=\"assets/2019-03-06-2.png\"><br>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p>\n<h4 id=\"2-多路复用\"><a href=\"#2-多路复用\" class=\"headerlink\" title=\"2. 多路复用\"></a>2. 多路复用</h4><p>在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。</p>\n<p>大家可以通过 <a href=\"https://http2.akamai.com/demo\">该链接</a> 直观感受下 HTTP/2 比 HTTP/1 到底快了多少。</p>\n<p><img src=\"assets/2019-03-06-3.gif\"><br>在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 链接去实现多流并行了，在 HTTP/2 中：</p>\n<ul>\n<li>同域名下所有通信都在单个连接上完成。</li>\n<li>单个连接可以承载任意数量的双向数据流。</li>\n<li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</li>\n</ul>\n<p>这一特性，使性能有了极大提升：</p>\n<ul>\n<li>同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应,消除了因多个 TCP 连接而带来的延时和内存消耗。</li>\n<li>并行交错地发送多个请求，请求之间互不影响。</li>\n<li>并行交错地发送多个响应，响应之间互不干扰。</li>\n<li>在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</li>\n</ul>\n<p><img src=\"assets/2019-03-06-4.png\"><br>如上图所示，多路复用的技术可以只通过一个 TCP 连接就可以传输所有的请求数据。</p>\n<p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p>\n<p>为了减少这块的资源消耗并提升性能， HTTP/2 对这些首部采取了压缩策略：</p>\n<ul>\n<li>HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；</li>\n<li>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新;</li>\n<li>每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值</li>\n</ul>\n<p>例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销</p>\n<p><img src=\"assets/2019-03-06-5.png\"></p>\n<h3 id=\"4-Server-Push\"><a href=\"#4-Server-Push\" class=\"headerlink\" title=\"4. Server Push\"></a>4. Server Push</h3><p>Server Push 即服务端能通过 push 的方式将客户端需要的内容预先推送过去，也叫“cache push”。</p>\n<p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch。<br>例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。</p>\n<p><img src=\"assets/2019-03-06-6.png\"><br>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>\n<h3 id=\"六、HTTP-3-新特性\"><a href=\"#六、HTTP-3-新特性\" class=\"headerlink\" title=\"六、HTTP/3 新特性\"></a>六、HTTP/3 新特性</h3><h4 id=\"1-HTTP-3-简介\"><a href=\"#1-HTTP-3-简介\" class=\"headerlink\" title=\"1. HTTP/3 简介\"></a>1. HTTP/3 简介</h4><p>虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。</p>\n<p>上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。</p>\n<p>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p>\n<p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p>\n<p>基于这个原因， <strong>Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上</strong> ，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</p>\n<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。</p>\n<h4 id=\"2-QUIC-新功能\"><a href=\"#2-QUIC-新功能\" class=\"headerlink\" title=\"2. QUIC 新功能\"></a>2. QUIC 新功能</h4><p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。 <strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong> 。那什么是 0RTT 建连呢？</p>\n<p>这里面有两层含义:</p>\n<ul>\n<li>传输层 0RTT 就能建立连接。</li>\n<li>加密层 0RTT 就能建立加密连接。</li>\n</ul>\n<p><img src=\"assets/2019-03-06-7.png\"><br>上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。</p>\n<p>而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。</p>\n<p>虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p>\n<p>同 HTTP2.0 一样，同一条 QUIC 连接上可以创建多个 stream，来发送多个 HTTP 请求，但是，QUIC 是基于 UDP 的，一个连接上的多个 stream 之间没有依赖。比如下图中 stream2 丢了一个 UDP 包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然 stream2 的那个包需要重新传，但是 stream3、stream4 的包无需等待，就可以发给用户。</p>\n<p><img src=\"assets/2019-03-06-8.png\"><br>另外 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p>\n<p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p>\n<p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p>\n<p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p>\n<p><img src=\"assets/2019-03-06-9.png\"><br>如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。</p>\n<p>QUIC 协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间(包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗)</p>\n<p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。 <strong>当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了</strong> 。</p>\n<h3 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h3><ul>\n<li>HTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷</li>\n<li>HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的</li>\n<li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议</li>\n</ul>\n<p><a href=\"https://blog.fundebug.com/2019/03/07/understand-http2-and-http3/\">一文读懂 HTTP/2 及 HTTP/3 特性</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p><strong>摘要：</strong> 学习 HTTP/2 与 HTTP/3。</p>\n<ul>\n<li>原文： <a href=\"https://segmentfault.com/a/1190000018401534\">一文读懂 HTTP/2 及 HTTP/3 特性</a></li>\n<li>作者： <a href=\"https://segmentfault.com/u/langlixingzhou\">浪里行舟</a></li>\n</ul>\n<p><em><a href=\"https://www.fundebug.com/\">Fundebug</a> 经授权转载，版权归原作者所有。</em></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>HTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。</p>\n<p>虽然 HTTP/2 提高了网页的性能，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</p>\n<h3 id=\"一、HTTP-协议\"><a href=\"#一、HTTP-协议\" class=\"headerlink\" title=\"一、HTTP 协议\"></a>一、HTTP 协议</h3><p>HTTP 协议是 HyperText Transfer Protocol（超文本传输协议）的缩写，它是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。伴随着计算机网络和浏览器的诞生，HTTP1.0 也随之而来，处于计算机网络中的应用层，HTTP 是建立在 TCP 协议之上，所以 <strong>HTTP 协议的瓶颈及其优化技巧都是基于 TCP 协议本身的特性</strong> ，例如 tcp 建立连接的 3 次握手和断开连接的 4 次挥手以及每次建立连接带来的 RTT 延迟时间。</p>\n<h3 id=\"二、HTTP-1-x-的缺陷\"><a href=\"#二、HTTP-1-x-的缺陷\" class=\"headerlink\" title=\"二、HTTP/1.x 的缺陷\"></a>二、HTTP/1.x 的缺陷</h3><ul>\n<li><p><strong>连接无法复用</strong> ：连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对大量小文件请求影响较大（没有达到最大窗口请求就被终止）。</p>\n<ul>\n<li>HTTP/1.0 传输数据时，每次都需要重新建立连接，增加延迟。</li>\n<li>HTTP/1.1 虽然加入 keep-alive 可以复用一部分连接，但域名分片等情况下仍然需要建立多个 connection，耗费资源，给服务器带来性能压力。</li>\n</ul>\n</li>\n<li><p><strong>Head-Of-Line Blocking（HOLB）</strong> ：导致带宽无法被充分利用，以及后续健康请求被阻塞。 <a href=\"http://stackoverflow.com/questions/25221954/spdy-head-of-line-blocking\">HOLB</a> 是指一系列包（package）因为第一个包被阻塞；当页面中需要请求很多资源的时候，HOLB（队头阻塞）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p>\n<ul>\n<li>HTTP 1.0：下个请求必须在前一个请求返回后才能发出， <code>request-response</code> 对按序发生。显然，如果某个请求长时间没有返回，那么接下来的请求就全部阻塞了。</li>\n<li>HTTP 1.1：尝试使用 pipeling 来解决，即浏览器可以一次性发出多个请求（同个域名，同一条 TCP 链接）。但 pipeling 要求返回是按序的，那么前一个请求如果很耗时（比如处理大图片），那么后面的请求即使服务器已经处理完，仍会等待前面的请求处理完才开始按序返回。所以，pipeling 只部分解决了 HOLB。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"assets/2019-03-06-1.png\"><br>如上图所示，红色圈出来的请求就因域名链接数已超过限制，而被挂起等待了一段时间。</p>\n<ul>\n<li><strong>协议开销大</strong> ： HTTP1.x 在使用时，header 里携带的内容过大，在一定程度上增加了传输的成本，并且每次请求 header 基本不怎么变化，尤其在移动端增加用户流量。</li>\n<li><strong>安全因素</strong> ：HTTP1.x 在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份，这在一定程度上无法保证数据的安全性</li>\n</ul>\n<h3 id=\"三、SPDY-协议\"><a href=\"#三、SPDY-协议\" class=\"headerlink\" title=\"三、SPDY 协议\"></a>三、SPDY 协议</h3><p>因为 HTTP/1.x 的问题，我们会引入雪碧图、将小图内联、使用多个域名等等的方式来提高性能。不过这些优化都绕开了协议，直到 2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 HTTP/1.1 效率不高的问题。谷歌推出 SPDY，才算是正式改造 HTTP 协议本身。降低延迟，压缩 header 等等，SPDY 的实践证明了这些优化的效果，也最终带来 HTTP/2 的诞生。</p>\n<p>SPDY 协议在 Chrome 浏览器上证明可行以后，就被当作 HTTP/2 的基础，主要特性都在 HTTP/2 之中得到继承。</p>\n<h3 id=\"四、HTTP-2-简介\"><a href=\"#四、HTTP-2-简介\" class=\"headerlink\" title=\"四、HTTP/2 简介\"></a>四、HTTP/2 简介</h3><p>2015 年，HTTP_2 发布。HTTP/2 是现行 HTTP 协议（HTTP/1.x）的替代，但它不是重写，HTTP 方法_状态码/语义都与 HTTP/1.x 一样。HTTP/2 基于 SPDY3，专注于 <strong>性能</strong> ，最大的一个目标是在用户和网站间只用一个连接（connection）。</p>\n<p>HTTP/2 由两个规范（Specification）组成：</p>\n<ol>\n<li>Hypertext Transfer Protocol version 2 - RFC7540</li>\n<li>HPACK - Header Compression for HTTP/2 - RFC7541</li>\n</ol>\n<h3 id=\"五、HTTP-2-新特性\"><a href=\"#五、HTTP-2-新特性\" class=\"headerlink\" title=\"五、HTTP/2 新特性\"></a>五、HTTP/2 新特性</h3><h4 id=\"1-二进制传输\"><a href=\"#1-二进制传输\" class=\"headerlink\" title=\"1. 二进制传输\"></a>1. 二进制传输</h4><p>HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，二进制协议解析起来更高效。 HTTP / 1 的请求和响应报文，都是由起始行，首部和实体正文（可选）组成，各部分之间以文本换行符分隔。 <strong>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</strong> 。</p>\n<p>接下来我们介绍几个重要的概念：</p>\n<ul>\n<li>流：流是连接中的一个虚拟信道，可以承载双向的消息；每个流都有一个唯一的整数标识符（1、2…N）；</li>\n<li>消息：是指逻辑上的 HTTP 消息，比如请求、响应等，由一或多个帧组成。</li>\n<li>帧：HTTP 2.0 通信的最小单位，每个帧包含帧首部，至少也会标识出当前帧所属的流，承载着特定类型的数据，如 HTTP 首部、负荷，等等</li>\n</ul>\n<p><img src=\"assets/2019-03-06-2.png\"><br>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p>\n<h4 id=\"2-多路复用\"><a href=\"#2-多路复用\" class=\"headerlink\" title=\"2. 多路复用\"></a>2. 多路复用</h4><p>在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。</p>\n<p>大家可以通过 <a href=\"https://http2.akamai.com/demo\">该链接</a> 直观感受下 HTTP/2 比 HTTP/1 到底快了多少。</p>\n<p><img src=\"assets/2019-03-06-3.gif\"><br>在 HTTP/2 中，有了二进制分帧之后，HTTP /2 不再依赖 TCP 链接去实现多流并行了，在 HTTP/2 中：</p>\n<ul>\n<li>同域名下所有通信都在单个连接上完成。</li>\n<li>单个连接可以承载任意数量的双向数据流。</li>\n<li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以乱序发送，因为根据帧首部的流标识可以重新组装。</li>\n</ul>\n<p>这一特性，使性能有了极大提升：</p>\n<ul>\n<li>同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应,消除了因多个 TCP 连接而带来的延时和内存消耗。</li>\n<li>并行交错地发送多个请求，请求之间互不影响。</li>\n<li>并行交错地发送多个响应，响应之间互不干扰。</li>\n<li>在 HTTP/2 中，每个请求都可以带一个 31bit 的优先值，0 表示最高优先级， 数值越大优先级越低。有了这个优先值，客户端和服务器就可以在处理不同的流时采取不同的策略，以最优的方式发送流、消息和帧。</li>\n</ul>\n<p><img src=\"assets/2019-03-06-4.png\"><br>如上图所示，多路复用的技术可以只通过一个 TCP 连接就可以传输所有的请求数据。</p>\n<p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p>\n<p>为了减少这块的资源消耗并提升性能， HTTP/2 对这些首部采取了压缩策略：</p>\n<ul>\n<li>HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送；</li>\n<li>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新;</li>\n<li>每个新的首部键－值对要么被追加到当前表的末尾，要么替换表中之前的值</li>\n</ul>\n<p>例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销</p>\n<p><img src=\"assets/2019-03-06-5.png\"></p>\n<h3 id=\"4-Server-Push\"><a href=\"#4-Server-Push\" class=\"headerlink\" title=\"4. Server Push\"></a>4. Server Push</h3><p>Server Push 即服务端能通过 push 的方式将客户端需要的内容预先推送过去，也叫“cache push”。</p>\n<p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch。<br>例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 时再发送这些请求。</p>\n<p><img src=\"assets/2019-03-06-6.png\"><br>服务端可以主动推送，客户端也有权利选择是否接收。如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送 RST_STREAM 帧来拒收。主动推送也遵守同源策略，换句话说，服务器不能随便将第三方资源推送给客户端，而必须是经过双方确认才行。</p>\n<h3 id=\"六、HTTP-3-新特性\"><a href=\"#六、HTTP-3-新特性\" class=\"headerlink\" title=\"六、HTTP/3 新特性\"></a>六、HTTP/3 新特性</h3><h4 id=\"1-HTTP-3-简介\"><a href=\"#1-HTTP-3-简介\" class=\"headerlink\" title=\"1. HTTP/3 简介\"></a>1. HTTP/3 简介</h4><p>虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，主要是底层支撑的 TCP 协议造成的。</p>\n<p>上文提到 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。但当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。</p>\n<p>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1.1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p>\n<p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p>\n<p>基于这个原因， <strong>Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上</strong> ，HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC。</p>\n<p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个 QUIC 新功能。</p>\n<h4 id=\"2-QUIC-新功能\"><a href=\"#2-QUIC-新功能\" class=\"headerlink\" title=\"2. QUIC 新功能\"></a>2. QUIC 新功能</h4><p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。 <strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong> 。那什么是 0RTT 建连呢？</p>\n<p>这里面有两层含义:</p>\n<ul>\n<li>传输层 0RTT 就能建立连接。</li>\n<li>加密层 0RTT 就能建立加密连接。</li>\n</ul>\n<p><img src=\"assets/2019-03-06-7.png\"><br>上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是会话复用也需要至少 2 个 RTT。</p>\n<p>而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的会话记录单要高很多。</p>\n<p>虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p>\n<p>同 HTTP2.0 一样，同一条 QUIC 连接上可以创建多个 stream，来发送多个 HTTP 请求，但是，QUIC 是基于 UDP 的，一个连接上的多个 stream 之间没有依赖。比如下图中 stream2 丢了一个 UDP 包，不会影响后面跟着 Stream3 和 Stream4，不存在 TCP 队头阻塞。虽然 stream2 的那个包需要重新传，但是 stream3、stream4 的包无需等待，就可以发给用户。</p>\n<p><img src=\"assets/2019-03-06-8.png\"><br>另外 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p>\n<p>TCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。</p>\n<p>但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。</p>\n<p>这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。</p>\n<p><img src=\"assets/2019-03-06-9.png\"><br>如上图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。</p>\n<p>QUIC 协议有一个非常独特的特性，称为向前纠错 (Forward Error Correction，FEC)，每个数据包除了它本身的内容之外，还包括了部分其他数据包的数据，因此少量的丢包可以通过其他包的冗余数据直接组装而无需重传。向前纠错牺牲了每个数据包可以发送数据的上限，但是减少了因为丢包导致的数据重传，因为数据重传将会消耗更多的时间(包括确认数据包丢失、请求重传、等待新数据包等步骤的时间消耗)</p>\n<p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。 <strong>当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了</strong> 。</p>\n<h3 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h3><ul>\n<li>HTTP/1.x 有连接无法复用、队头阻塞、协议开销大和安全因素等多个缺陷</li>\n<li>HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的</li>\n<li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议</li>\n</ul>\n<p><a href=\"https://blog.fundebug.com/2019/03/07/understand-http2-and-http3/\">一文读懂 HTTP/2 及 HTTP/3 特性</a></p>\n"},{"title":"堆排序算法（图解详细流程）","date":"2020-12-01T06:08:40.000Z","_content":"堆排序的时间复杂度O(N*logN),额外空间复杂度O(1)，是一个不稳定性的排序\n\n## 一 准备知识\n\n堆的结构可以分为大根堆和小根堆，是一个 [完全二叉树](https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin) ，而堆排序是根据堆的这种数据结构设计的一种排序，下面先来看看什么是大根堆和小根堆\n\n### 大根堆和小根堆\n\n性质：每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆；每个结点的值都小于其左孩子和右孩子结点的值，称之为小根堆。如下图\n\n![](assets/20180801211245720.jpeg)\n我们对上面的图中每个数都进行了标记，上面的结构映射成数组就变成了下面这个样子\n\n![](assets/20180801213938728.jpeg)\n还有一个基本概念：查找数组中某个数的父结点和左右孩子结点，比如已知索引为 **_i_** 的数，那么\n\n1. 父结点索引：( _i_ -1)/2（这里计算机中的除以2，省略掉小数）\n2. 左孩子索引：2* _i_ +1\n3. 右孩子索引：2* _i_ +2\n\n所以上面两个数组可以脑补成堆结构，因为他们满足堆的定义性质：\n\n**大根堆：** arr(i)>arr(2**i+1) && arr(i)>arr(2**i+2)\n\n**小根堆：** arr(i)<arr(2**i+1) && arr(i)<arr(2**i+2)\n\n\n## 二 堆排序基本步骤\n\n### 基本思想：\n\n1. 首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端\n2. 将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1\n3. 将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组\n\n### 构造堆\n\n将无序数组构造成一个大根堆（升序用大根堆，降序就用小根堆）\n\n假设存在以下数组\n\n![](assets/20180801223317483.jpeg)\n主要思路：第一次保证0~0位置大根堆结构（废话），第二次保证0~1位置大根堆结构，第三次保证0~2位置大根堆结构...直到保证0~n-1位置大根堆结构（每次新插入的数据都与其父结点进行比较，如果插入的数比父结点大，则与父结点交换，否则一直向上交换，直到小于等于父结点，或者来到了顶端）\n\n插入6的时候，6大于他的父结点3，即arr(1)>arr(0)，则交换；此时，保证了0~1位置是大根堆结构，如下图：\n\n![](assets/20180801230208709.jpeg)\n                 _(友情提示：待交换的数为蓝色，交换后的数为绿色)_\n\n插入8的时候，8大于其父结点6，即arr(2)>arr(0),则交换；此时，保证了0~2位置是大根堆结构，如下图\n\n![](assets/20180801230101207.jpeg)\n插入5的时候，5大于其父结点3，则交换，交换之后，5又发现比8小，所以不交换；此时，保证了0~3位置大根堆结构，如下图\n\n![](assets/20180801231139446.jpeg)\n插入7的时候，7大于其父结点5，则交换，交换之后，7又发现比8小，所以不交换；此时 **整个数组已经是大根堆结构**  \n\n![](assets/20180801231815212.jpeg)\n\n### 固定最大值再构造堆\n\n此时，我们已经得到一个大根堆，下面将顶端的数与最后一位数交换，然后将剩余的数再构造成一个大根堆\n\n![](assets/20180802134614132.jpeg)\n（友情提示：黑色的为固定好的数字，不再参与排序）\n\n此时最大数8已经来到末尾，则固定不动，后面只需要对顶端的数据进行操作即可，拿顶端的数与其左右孩子较大的数进行比较，如果顶端的数大于其左右孩子较大的数，则停止，如果顶端的数小于其左右孩子较大的数，则交换，然后继续与下面的孩子进行比较\n\n下图中，5的左右孩子中，左孩子7比右孩子6大，则5与7进行比较，发现5<7，则交换；交换后，发现5已经大于他的左孩子，说明剩余的数已经构成大根堆，后面就是重复固定最大值，然后构造大根堆\n\n![](assets/20180802140239955.jpeg)\n如下图：顶端数7与末尾数3进行交换，固定好7，\n\n![](assets/20180802140857754.jpeg)\n剩余的数开始构造大根堆 ，然后顶端数与末尾数交换，固定最大值再构造大根堆，重复执行上面的操作，最终会得到有序数组\n\n![](assets/20180802141542496.jpeg)\n\n## 三 总结\n\n到这里，大家应该对堆排序都有了自己的见解，我们对上面的流程总结下：\n\n1. 首先将无需数组构造成一个大根堆（新插入的数据与其父结点比较）\n2. 固定一个最大值，将剩余的数重新构造成一个大根堆，重复这样的过程\n\n## 四 代码\n\n代码中主要两个方法：\n\n1. 将待排序数组构造成一个大根堆（元素上升）\n2. 固定一个最大值，将剩余的数再构造成一个大根堆（元素下降）\n\n```java\n//堆排序\n    public static void heapSort(int[] arr) {\n        //构造大根堆\n        heapInsert(arr);\n        int size = arr.length;\n        while (size > 1) {\n            //固定最大值\n            swap(arr, 0, size - 1);\n            size--;\n            //构造大根堆\n            heapify(arr, 0, size);\n\n        }\n\n    }\n\n    //构造大根堆（通过新插入的数上升）\n    public static void heapInsert(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            //当前插入的索引\n            int currentIndex = i;\n            //父结点索引\n            int fatherIndex = (currentIndex - 1) / 2;\n            //如果当前插入的值大于其父结点的值,则交换值，并且将索引指向父结点\n            //然后继续和上面的父结点值比较，直到不大于父结点，则退出循环\n            while (arr[currentIndex] > arr[fatherIndex]) {\n                //交换当前结点与父结点的值\n                swap(arr, currentIndex, fatherIndex);\n                //将当前索引指向父索引\n                currentIndex = fatherIndex;\n                //重新计算当前索引的父索引\n                fatherIndex = (currentIndex - 1) / 2;\n            }\n        }\n    }\n    //将剩余的数构造成大根堆（通过顶端的数下降）\n    public static void heapify(int[] arr, int index, int size) {\n        int left = 2 * index + 1;\n        int right = 2 * index + 2;\n        while (left < size) {\n            int largestIndex;\n            //判断孩子中较大的值的索引（要确保右孩子在size范围之内）\n            if (arr[left] < arr[right] && right < size) {\n                largestIndex = right;\n            } else {\n                largestIndex = left;\n            }\n            //比较父结点的值与孩子中较大的值，并确定最大值的索引\n            if (arr[index] > arr[largestIndex]) {\n                largestIndex = index;\n            }\n            //如果父结点索引是最大值的索引，那已经是大根堆了，则退出循环\n            if (index == largestIndex) {\n                break;\n            }\n            //父结点不是最大值，与孩子中较大的值交换\n            swap(arr, largestIndex, index);\n            //将索引指向孩子中较大的值的索引\n            index = largestIndex;\n            //重新计算交换之后的孩子的索引\n            left = 2 * index + 1;\n            right = 2 * index + 2;\n        }\n\n    }\n    //交换数组中两个元素的值\n    public static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n```\n\n\n[堆排序算法（图解详细流程）_阿顾的博客-CSDN博客_堆排序](https://blog.csdn.net/u010452388/article/details/81283998)\n","source":"_posts/算法与协议/堆排序算法.md","raw":"---\ntitle: 堆排序算法（图解详细流程）\ncategories:\n  - 算法\ntags:\n  - 堆排序\n  - 数据结构\ndate: 2020-12-01 14:08:40\n---\n堆排序的时间复杂度O(N*logN),额外空间复杂度O(1)，是一个不稳定性的排序\n\n## 一 准备知识\n\n堆的结构可以分为大根堆和小根堆，是一个 [完全二叉树](https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin) ，而堆排序是根据堆的这种数据结构设计的一种排序，下面先来看看什么是大根堆和小根堆\n\n### 大根堆和小根堆\n\n性质：每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆；每个结点的值都小于其左孩子和右孩子结点的值，称之为小根堆。如下图\n\n![](assets/20180801211245720.jpeg)\n我们对上面的图中每个数都进行了标记，上面的结构映射成数组就变成了下面这个样子\n\n![](assets/20180801213938728.jpeg)\n还有一个基本概念：查找数组中某个数的父结点和左右孩子结点，比如已知索引为 **_i_** 的数，那么\n\n1. 父结点索引：( _i_ -1)/2（这里计算机中的除以2，省略掉小数）\n2. 左孩子索引：2* _i_ +1\n3. 右孩子索引：2* _i_ +2\n\n所以上面两个数组可以脑补成堆结构，因为他们满足堆的定义性质：\n\n**大根堆：** arr(i)>arr(2**i+1) && arr(i)>arr(2**i+2)\n\n**小根堆：** arr(i)<arr(2**i+1) && arr(i)<arr(2**i+2)\n\n\n## 二 堆排序基本步骤\n\n### 基本思想：\n\n1. 首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端\n2. 将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1\n3. 将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组\n\n### 构造堆\n\n将无序数组构造成一个大根堆（升序用大根堆，降序就用小根堆）\n\n假设存在以下数组\n\n![](assets/20180801223317483.jpeg)\n主要思路：第一次保证0~0位置大根堆结构（废话），第二次保证0~1位置大根堆结构，第三次保证0~2位置大根堆结构...直到保证0~n-1位置大根堆结构（每次新插入的数据都与其父结点进行比较，如果插入的数比父结点大，则与父结点交换，否则一直向上交换，直到小于等于父结点，或者来到了顶端）\n\n插入6的时候，6大于他的父结点3，即arr(1)>arr(0)，则交换；此时，保证了0~1位置是大根堆结构，如下图：\n\n![](assets/20180801230208709.jpeg)\n                 _(友情提示：待交换的数为蓝色，交换后的数为绿色)_\n\n插入8的时候，8大于其父结点6，即arr(2)>arr(0),则交换；此时，保证了0~2位置是大根堆结构，如下图\n\n![](assets/20180801230101207.jpeg)\n插入5的时候，5大于其父结点3，则交换，交换之后，5又发现比8小，所以不交换；此时，保证了0~3位置大根堆结构，如下图\n\n![](assets/20180801231139446.jpeg)\n插入7的时候，7大于其父结点5，则交换，交换之后，7又发现比8小，所以不交换；此时 **整个数组已经是大根堆结构**  \n\n![](assets/20180801231815212.jpeg)\n\n### 固定最大值再构造堆\n\n此时，我们已经得到一个大根堆，下面将顶端的数与最后一位数交换，然后将剩余的数再构造成一个大根堆\n\n![](assets/20180802134614132.jpeg)\n（友情提示：黑色的为固定好的数字，不再参与排序）\n\n此时最大数8已经来到末尾，则固定不动，后面只需要对顶端的数据进行操作即可，拿顶端的数与其左右孩子较大的数进行比较，如果顶端的数大于其左右孩子较大的数，则停止，如果顶端的数小于其左右孩子较大的数，则交换，然后继续与下面的孩子进行比较\n\n下图中，5的左右孩子中，左孩子7比右孩子6大，则5与7进行比较，发现5<7，则交换；交换后，发现5已经大于他的左孩子，说明剩余的数已经构成大根堆，后面就是重复固定最大值，然后构造大根堆\n\n![](assets/20180802140239955.jpeg)\n如下图：顶端数7与末尾数3进行交换，固定好7，\n\n![](assets/20180802140857754.jpeg)\n剩余的数开始构造大根堆 ，然后顶端数与末尾数交换，固定最大值再构造大根堆，重复执行上面的操作，最终会得到有序数组\n\n![](assets/20180802141542496.jpeg)\n\n## 三 总结\n\n到这里，大家应该对堆排序都有了自己的见解，我们对上面的流程总结下：\n\n1. 首先将无需数组构造成一个大根堆（新插入的数据与其父结点比较）\n2. 固定一个最大值，将剩余的数重新构造成一个大根堆，重复这样的过程\n\n## 四 代码\n\n代码中主要两个方法：\n\n1. 将待排序数组构造成一个大根堆（元素上升）\n2. 固定一个最大值，将剩余的数再构造成一个大根堆（元素下降）\n\n```java\n//堆排序\n    public static void heapSort(int[] arr) {\n        //构造大根堆\n        heapInsert(arr);\n        int size = arr.length;\n        while (size > 1) {\n            //固定最大值\n            swap(arr, 0, size - 1);\n            size--;\n            //构造大根堆\n            heapify(arr, 0, size);\n\n        }\n\n    }\n\n    //构造大根堆（通过新插入的数上升）\n    public static void heapInsert(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            //当前插入的索引\n            int currentIndex = i;\n            //父结点索引\n            int fatherIndex = (currentIndex - 1) / 2;\n            //如果当前插入的值大于其父结点的值,则交换值，并且将索引指向父结点\n            //然后继续和上面的父结点值比较，直到不大于父结点，则退出循环\n            while (arr[currentIndex] > arr[fatherIndex]) {\n                //交换当前结点与父结点的值\n                swap(arr, currentIndex, fatherIndex);\n                //将当前索引指向父索引\n                currentIndex = fatherIndex;\n                //重新计算当前索引的父索引\n                fatherIndex = (currentIndex - 1) / 2;\n            }\n        }\n    }\n    //将剩余的数构造成大根堆（通过顶端的数下降）\n    public static void heapify(int[] arr, int index, int size) {\n        int left = 2 * index + 1;\n        int right = 2 * index + 2;\n        while (left < size) {\n            int largestIndex;\n            //判断孩子中较大的值的索引（要确保右孩子在size范围之内）\n            if (arr[left] < arr[right] && right < size) {\n                largestIndex = right;\n            } else {\n                largestIndex = left;\n            }\n            //比较父结点的值与孩子中较大的值，并确定最大值的索引\n            if (arr[index] > arr[largestIndex]) {\n                largestIndex = index;\n            }\n            //如果父结点索引是最大值的索引，那已经是大根堆了，则退出循环\n            if (index == largestIndex) {\n                break;\n            }\n            //父结点不是最大值，与孩子中较大的值交换\n            swap(arr, largestIndex, index);\n            //将索引指向孩子中较大的值的索引\n            index = largestIndex;\n            //重新计算交换之后的孩子的索引\n            left = 2 * index + 1;\n            right = 2 * index + 2;\n        }\n\n    }\n    //交换数组中两个元素的值\n    public static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n```\n\n\n[堆排序算法（图解详细流程）_阿顾的博客-CSDN博客_堆排序](https://blog.csdn.net/u010452388/article/details/81283998)\n","slug":"算法与协议/堆排序算法","published":1,"updated":"2020-12-01T06:15:22.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjavsenh000m4kpwdhw064i2","content":"<p>堆排序的时间复杂度O(N*logN),额外空间复杂度O(1)，是一个不稳定性的排序</p>\n<h2 id=\"一-准备知识\"><a href=\"#一-准备知识\" class=\"headerlink\" title=\"一 准备知识\"></a>一 准备知识</h2><p>堆的结构可以分为大根堆和小根堆，是一个 <a href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\">完全二叉树</a> ，而堆排序是根据堆的这种数据结构设计的一种排序，下面先来看看什么是大根堆和小根堆</p>\n<h3 id=\"大根堆和小根堆\"><a href=\"#大根堆和小根堆\" class=\"headerlink\" title=\"大根堆和小根堆\"></a>大根堆和小根堆</h3><p>性质：每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆；每个结点的值都小于其左孩子和右孩子结点的值，称之为小根堆。如下图</p>\n<p><img src=\"assets/20180801211245720.jpeg\"><br>我们对上面的图中每个数都进行了标记，上面的结构映射成数组就变成了下面这个样子</p>\n<p><img src=\"assets/20180801213938728.jpeg\"><br>还有一个基本概念：查找数组中某个数的父结点和左右孩子结点，比如已知索引为 <strong><em>i</em></strong> 的数，那么</p>\n<ol>\n<li>父结点索引：( <em>i</em> -1)/2（这里计算机中的除以2，省略掉小数）</li>\n<li>左孩子索引：2* <em>i</em> +1</li>\n<li>右孩子索引：2* <em>i</em> +2</li>\n</ol>\n<p>所以上面两个数组可以脑补成堆结构，因为他们满足堆的定义性质：</p>\n<p><strong>大根堆：</strong> arr(i)&gt;arr(2<strong>i+1) &amp;&amp; arr(i)&gt;arr(2</strong>i+2)</p>\n<p><strong>小根堆：</strong> arr(i)&lt;arr(2<strong>i+1) &amp;&amp; arr(i)&lt;arr(2</strong>i+2)</p>\n<h2 id=\"二-堆排序基本步骤\"><a href=\"#二-堆排序基本步骤\" class=\"headerlink\" title=\"二 堆排序基本步骤\"></a>二 堆排序基本步骤</h2><h3 id=\"基本思想：\"><a href=\"#基本思想：\" class=\"headerlink\" title=\"基本思想：\"></a>基本思想：</h3><ol>\n<li>首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端</li>\n<li>将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1</li>\n<li>将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组</li>\n</ol>\n<h3 id=\"构造堆\"><a href=\"#构造堆\" class=\"headerlink\" title=\"构造堆\"></a>构造堆</h3><p>将无序数组构造成一个大根堆（升序用大根堆，降序就用小根堆）</p>\n<p>假设存在以下数组</p>\n<p><img src=\"assets/20180801223317483.jpeg\"><br>主要思路：第一次保证0<del>0位置大根堆结构（废话），第二次保证0</del>1位置大根堆结构，第三次保证0<del>2位置大根堆结构…直到保证0</del>n-1位置大根堆结构（每次新插入的数据都与其父结点进行比较，如果插入的数比父结点大，则与父结点交换，否则一直向上交换，直到小于等于父结点，或者来到了顶端）</p>\n<p>插入6的时候，6大于他的父结点3，即arr(1)&gt;arr(0)，则交换；此时，保证了0~1位置是大根堆结构，如下图：</p>\n<p><img src=\"assets/20180801230208709.jpeg\"><br>                 <em>(友情提示：待交换的数为蓝色，交换后的数为绿色)</em></p>\n<p>插入8的时候，8大于其父结点6，即arr(2)&gt;arr(0),则交换；此时，保证了0~2位置是大根堆结构，如下图</p>\n<p><img src=\"assets/20180801230101207.jpeg\"><br>插入5的时候，5大于其父结点3，则交换，交换之后，5又发现比8小，所以不交换；此时，保证了0~3位置大根堆结构，如下图</p>\n<p><img src=\"assets/20180801231139446.jpeg\"><br>插入7的时候，7大于其父结点5，则交换，交换之后，7又发现比8小，所以不交换；此时 <strong>整个数组已经是大根堆结构</strong>  </p>\n<p><img src=\"assets/20180801231815212.jpeg\"></p>\n<h3 id=\"固定最大值再构造堆\"><a href=\"#固定最大值再构造堆\" class=\"headerlink\" title=\"固定最大值再构造堆\"></a>固定最大值再构造堆</h3><p>此时，我们已经得到一个大根堆，下面将顶端的数与最后一位数交换，然后将剩余的数再构造成一个大根堆</p>\n<p><img src=\"assets/20180802134614132.jpeg\"><br>（友情提示：黑色的为固定好的数字，不再参与排序）</p>\n<p>此时最大数8已经来到末尾，则固定不动，后面只需要对顶端的数据进行操作即可，拿顶端的数与其左右孩子较大的数进行比较，如果顶端的数大于其左右孩子较大的数，则停止，如果顶端的数小于其左右孩子较大的数，则交换，然后继续与下面的孩子进行比较</p>\n<p>下图中，5的左右孩子中，左孩子7比右孩子6大，则5与7进行比较，发现5&lt;7，则交换；交换后，发现5已经大于他的左孩子，说明剩余的数已经构成大根堆，后面就是重复固定最大值，然后构造大根堆</p>\n<p><img src=\"assets/20180802140239955.jpeg\"><br>如下图：顶端数7与末尾数3进行交换，固定好7，</p>\n<p><img src=\"assets/20180802140857754.jpeg\"><br>剩余的数开始构造大根堆 ，然后顶端数与末尾数交换，固定最大值再构造大根堆，重复执行上面的操作，最终会得到有序数组</p>\n<p><img src=\"assets/20180802141542496.jpeg\"></p>\n<h2 id=\"三-总结\"><a href=\"#三-总结\" class=\"headerlink\" title=\"三 总结\"></a>三 总结</h2><p>到这里，大家应该对堆排序都有了自己的见解，我们对上面的流程总结下：</p>\n<ol>\n<li>首先将无需数组构造成一个大根堆（新插入的数据与其父结点比较）</li>\n<li>固定一个最大值，将剩余的数重新构造成一个大根堆，重复这样的过程</li>\n</ol>\n<h2 id=\"四-代码\"><a href=\"#四-代码\" class=\"headerlink\" title=\"四 代码\"></a>四 代码</h2><p>代码中主要两个方法：</p>\n<ol>\n<li>将待排序数组构造成一个大根堆（元素上升）</li>\n<li>固定一个最大值，将剩余的数再构造成一个大根堆（元素下降）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造大根堆</span></span><br><span class=\"line\">        heapInsert(arr);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (size &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//固定最大值</span></span><br><span class=\"line\">            swap(arr, <span class=\"number\">0</span>, size - <span class=\"number\">1</span>);</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"comment\">//构造大根堆</span></span><br><span class=\"line\">            heapify(arr, <span class=\"number\">0</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造大根堆（通过新插入的数上升）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前插入的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> currentIndex = i;</span><br><span class=\"line\">            <span class=\"comment\">//父结点索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> fatherIndex = (currentIndex - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//如果当前插入的值大于其父结点的值,则交换值，并且将索引指向父结点</span></span><br><span class=\"line\">            <span class=\"comment\">//然后继续和上面的父结点值比较，直到不大于父结点，则退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[currentIndex] &gt; arr[fatherIndex]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//交换当前结点与父结点的值</span></span><br><span class=\"line\">                swap(arr, currentIndex, fatherIndex);</span><br><span class=\"line\">                <span class=\"comment\">//将当前索引指向父索引</span></span><br><span class=\"line\">                currentIndex = fatherIndex;</span><br><span class=\"line\">                <span class=\"comment\">//重新计算当前索引的父索引</span></span><br><span class=\"line\">                fatherIndex = (currentIndex - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将剩余的数构造成大根堆（通过顶端的数下降）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * index + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> largestIndex;</span><br><span class=\"line\">            <span class=\"comment\">//判断孩子中较大的值的索引（要确保右孩子在size范围之内）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[left] &lt; arr[right] &amp;&amp; right &lt; size) &#123;</span><br><span class=\"line\">                largestIndex = right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                largestIndex = left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//比较父结点的值与孩子中较大的值，并确定最大值的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[index] &gt; arr[largestIndex]) &#123;</span><br><span class=\"line\">                largestIndex = index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果父结点索引是最大值的索引，那已经是大根堆了，则退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == largestIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//父结点不是最大值，与孩子中较大的值交换</span></span><br><span class=\"line\">            swap(arr, largestIndex, index);</span><br><span class=\"line\">            <span class=\"comment\">//将索引指向孩子中较大的值的索引</span></span><br><span class=\"line\">            index = largestIndex;</span><br><span class=\"line\">            <span class=\"comment\">//重新计算交换之后的孩子的索引</span></span><br><span class=\"line\">            left = <span class=\"number\">2</span> * index + <span class=\"number\">1</span>;</span><br><span class=\"line\">            right = <span class=\"number\">2</span> * index + <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换数组中两个元素的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/u010452388/article/details/81283998\">堆排序算法（图解详细流程）_阿顾的博客-CSDN博客_堆排序</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>堆排序的时间复杂度O(N*logN),额外空间复杂度O(1)，是一个不稳定性的排序</p>\n<h2 id=\"一-准备知识\"><a href=\"#一-准备知识\" class=\"headerlink\" title=\"一 准备知识\"></a>一 准备知识</h2><p>堆的结构可以分为大根堆和小根堆，是一个 <a href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\">完全二叉树</a> ，而堆排序是根据堆的这种数据结构设计的一种排序，下面先来看看什么是大根堆和小根堆</p>\n<h3 id=\"大根堆和小根堆\"><a href=\"#大根堆和小根堆\" class=\"headerlink\" title=\"大根堆和小根堆\"></a>大根堆和小根堆</h3><p>性质：每个结点的值都大于其左孩子和右孩子结点的值，称之为大根堆；每个结点的值都小于其左孩子和右孩子结点的值，称之为小根堆。如下图</p>\n<p><img src=\"assets/20180801211245720.jpeg\"><br>我们对上面的图中每个数都进行了标记，上面的结构映射成数组就变成了下面这个样子</p>\n<p><img src=\"assets/20180801213938728.jpeg\"><br>还有一个基本概念：查找数组中某个数的父结点和左右孩子结点，比如已知索引为 <strong><em>i</em></strong> 的数，那么</p>\n<ol>\n<li>父结点索引：( <em>i</em> -1)/2（这里计算机中的除以2，省略掉小数）</li>\n<li>左孩子索引：2* <em>i</em> +1</li>\n<li>右孩子索引：2* <em>i</em> +2</li>\n</ol>\n<p>所以上面两个数组可以脑补成堆结构，因为他们满足堆的定义性质：</p>\n<p><strong>大根堆：</strong> arr(i)&gt;arr(2<strong>i+1) &amp;&amp; arr(i)&gt;arr(2</strong>i+2)</p>\n<p><strong>小根堆：</strong> arr(i)&lt;arr(2<strong>i+1) &amp;&amp; arr(i)&lt;arr(2</strong>i+2)</p>\n<h2 id=\"二-堆排序基本步骤\"><a href=\"#二-堆排序基本步骤\" class=\"headerlink\" title=\"二 堆排序基本步骤\"></a>二 堆排序基本步骤</h2><h3 id=\"基本思想：\"><a href=\"#基本思想：\" class=\"headerlink\" title=\"基本思想：\"></a>基本思想：</h3><ol>\n<li>首先将待排序的数组构造成一个大根堆，此时，整个数组的最大值就是堆结构的顶端</li>\n<li>将顶端的数与末尾的数交换，此时，末尾的数为最大值，剩余待排序数组个数为n-1</li>\n<li>将剩余的n-1个数再构造成大根堆，再将顶端数与n-1位置的数交换，如此反复执行，便能得到有序数组</li>\n</ol>\n<h3 id=\"构造堆\"><a href=\"#构造堆\" class=\"headerlink\" title=\"构造堆\"></a>构造堆</h3><p>将无序数组构造成一个大根堆（升序用大根堆，降序就用小根堆）</p>\n<p>假设存在以下数组</p>\n<p><img src=\"assets/20180801223317483.jpeg\"><br>主要思路：第一次保证0<del>0位置大根堆结构（废话），第二次保证0</del>1位置大根堆结构，第三次保证0<del>2位置大根堆结构…直到保证0</del>n-1位置大根堆结构（每次新插入的数据都与其父结点进行比较，如果插入的数比父结点大，则与父结点交换，否则一直向上交换，直到小于等于父结点，或者来到了顶端）</p>\n<p>插入6的时候，6大于他的父结点3，即arr(1)&gt;arr(0)，则交换；此时，保证了0~1位置是大根堆结构，如下图：</p>\n<p><img src=\"assets/20180801230208709.jpeg\"><br>                 <em>(友情提示：待交换的数为蓝色，交换后的数为绿色)</em></p>\n<p>插入8的时候，8大于其父结点6，即arr(2)&gt;arr(0),则交换；此时，保证了0~2位置是大根堆结构，如下图</p>\n<p><img src=\"assets/20180801230101207.jpeg\"><br>插入5的时候，5大于其父结点3，则交换，交换之后，5又发现比8小，所以不交换；此时，保证了0~3位置大根堆结构，如下图</p>\n<p><img src=\"assets/20180801231139446.jpeg\"><br>插入7的时候，7大于其父结点5，则交换，交换之后，7又发现比8小，所以不交换；此时 <strong>整个数组已经是大根堆结构</strong>  </p>\n<p><img src=\"assets/20180801231815212.jpeg\"></p>\n<h3 id=\"固定最大值再构造堆\"><a href=\"#固定最大值再构造堆\" class=\"headerlink\" title=\"固定最大值再构造堆\"></a>固定最大值再构造堆</h3><p>此时，我们已经得到一个大根堆，下面将顶端的数与最后一位数交换，然后将剩余的数再构造成一个大根堆</p>\n<p><img src=\"assets/20180802134614132.jpeg\"><br>（友情提示：黑色的为固定好的数字，不再参与排序）</p>\n<p>此时最大数8已经来到末尾，则固定不动，后面只需要对顶端的数据进行操作即可，拿顶端的数与其左右孩子较大的数进行比较，如果顶端的数大于其左右孩子较大的数，则停止，如果顶端的数小于其左右孩子较大的数，则交换，然后继续与下面的孩子进行比较</p>\n<p>下图中，5的左右孩子中，左孩子7比右孩子6大，则5与7进行比较，发现5&lt;7，则交换；交换后，发现5已经大于他的左孩子，说明剩余的数已经构成大根堆，后面就是重复固定最大值，然后构造大根堆</p>\n<p><img src=\"assets/20180802140239955.jpeg\"><br>如下图：顶端数7与末尾数3进行交换，固定好7，</p>\n<p><img src=\"assets/20180802140857754.jpeg\"><br>剩余的数开始构造大根堆 ，然后顶端数与末尾数交换，固定最大值再构造大根堆，重复执行上面的操作，最终会得到有序数组</p>\n<p><img src=\"assets/20180802141542496.jpeg\"></p>\n<h2 id=\"三-总结\"><a href=\"#三-总结\" class=\"headerlink\" title=\"三 总结\"></a>三 总结</h2><p>到这里，大家应该对堆排序都有了自己的见解，我们对上面的流程总结下：</p>\n<ol>\n<li>首先将无需数组构造成一个大根堆（新插入的数据与其父结点比较）</li>\n<li>固定一个最大值，将剩余的数重新构造成一个大根堆，重复这样的过程</li>\n</ol>\n<h2 id=\"四-代码\"><a href=\"#四-代码\" class=\"headerlink\" title=\"四 代码\"></a>四 代码</h2><p>代码中主要两个方法：</p>\n<ol>\n<li>将待排序数组构造成一个大根堆（元素上升）</li>\n<li>固定一个最大值，将剩余的数再构造成一个大根堆（元素下降）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//构造大根堆</span></span><br><span class=\"line\">        heapInsert(arr);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (size &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//固定最大值</span></span><br><span class=\"line\">            swap(arr, <span class=\"number\">0</span>, size - <span class=\"number\">1</span>);</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"comment\">//构造大根堆</span></span><br><span class=\"line\">            heapify(arr, <span class=\"number\">0</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造大根堆（通过新插入的数上升）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前插入的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> currentIndex = i;</span><br><span class=\"line\">            <span class=\"comment\">//父结点索引</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> fatherIndex = (currentIndex - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"comment\">//如果当前插入的值大于其父结点的值,则交换值，并且将索引指向父结点</span></span><br><span class=\"line\">            <span class=\"comment\">//然后继续和上面的父结点值比较，直到不大于父结点，则退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[currentIndex] &gt; arr[fatherIndex]) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//交换当前结点与父结点的值</span></span><br><span class=\"line\">                swap(arr, currentIndex, fatherIndex);</span><br><span class=\"line\">                <span class=\"comment\">//将当前索引指向父索引</span></span><br><span class=\"line\">                currentIndex = fatherIndex;</span><br><span class=\"line\">                <span class=\"comment\">//重新计算当前索引的父索引</span></span><br><span class=\"line\">                fatherIndex = (currentIndex - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//将剩余的数构造成大根堆（通过顶端的数下降）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * index + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * index + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> largestIndex;</span><br><span class=\"line\">            <span class=\"comment\">//判断孩子中较大的值的索引（要确保右孩子在size范围之内）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[left] &lt; arr[right] &amp;&amp; right &lt; size) &#123;</span><br><span class=\"line\">                largestIndex = right;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                largestIndex = left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//比较父结点的值与孩子中较大的值，并确定最大值的索引</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[index] &gt; arr[largestIndex]) &#123;</span><br><span class=\"line\">                largestIndex = index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果父结点索引是最大值的索引，那已经是大根堆了，则退出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index == largestIndex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//父结点不是最大值，与孩子中较大的值交换</span></span><br><span class=\"line\">            swap(arr, largestIndex, index);</span><br><span class=\"line\">            <span class=\"comment\">//将索引指向孩子中较大的值的索引</span></span><br><span class=\"line\">            index = largestIndex;</span><br><span class=\"line\">            <span class=\"comment\">//重新计算交换之后的孩子的索引</span></span><br><span class=\"line\">            left = <span class=\"number\">2</span> * index + <span class=\"number\">1</span>;</span><br><span class=\"line\">            right = <span class=\"number\">2</span> * index + <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//交换数组中两个元素的值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/u010452388/article/details/81283998\">堆排序算法（图解详细流程）_阿顾的博客-CSDN博客_堆排序</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/工具/chrome_87_新功能/assets/image1.jpeg","slug":"assets/image1.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image2.jpeg","slug":"assets/image2.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image3.jpeg","slug":"assets/image3.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image4.jpeg","slug":"assets/image4.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image5.jpeg","slug":"assets/image5.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/开发/git-show-chinese-filenames/assets/status-dig.jpg","slug":"assets/status-dig.jpg","post":"ckjavsemy00004kpwf9qy8tsr","modified":0,"renderable":0},{"_id":"source/_posts/开发/go垃圾回收/assets/16c9abaa4032c7ea.gif","slug":"assets/16c9abaa4032c7ea.gif","post":"ckjavsen100014kpwd00w3cll","modified":0,"renderable":0},{"_id":"source/_posts/开发/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","slug":"assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","post":"ckjavsen100014kpwd00w3cll","modified":0,"renderable":0},{"_id":"source/_posts/开发/go程序初始化顺序/assets/20170831112523944.jpeg","slug":"assets/20170831112523944.jpeg","post":"ckjavsen300034kpwbiwk0r65","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif","slug":"assets/v2-575e785e7d03ad317e5bce4e36debb03_b.gif","post":"ckjavsenc000i4kpwc0g8bx7n","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg","slug":"assets/v2-7ba8f2ef12354949f18ae1e7560d2e19_720w.jpg","post":"ckjavsenc000i4kpwc0g8bx7n","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg","slug":"assets/v2-b237352666764df3e3e0f432f4bdcc52_b.jpg","post":"ckjavsenc000i4kpwc0g8bx7n","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg","slug":"assets/v2-c08ff37e40fd993475ee79919531bbe3_b.jpg","post":"ckjavsenc000i4kpwc0g8bx7n","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/Gossip协议/assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg","slug":"assets/v2-df4e038395c36b430a55a53dbc0b7b5e_b.jpg","post":"ckjavsenc000i4kpwc0g8bx7n","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-1.png","slug":"assets/2019-03-06-1.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-2.png","slug":"assets/2019-03-06-2.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-3.gif","slug":"assets/2019-03-06-3.gif","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-4.png","slug":"assets/2019-03-06-4.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-5.png","slug":"assets/2019-03-06-5.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-6.png","slug":"assets/2019-03-06-6.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-7.png","slug":"assets/2019-03-06-7.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-8.png","slug":"assets/2019-03-06-8.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/http-123/assets/2019-03-06-9.png","slug":"assets/2019-03-06-9.png","post":"ckjavsenc000j4kpwf4hletqc","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801211245720.jpeg","slug":"assets/20180801211245720.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801213938728.jpeg","slug":"assets/20180801213938728.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801223317483.jpeg","slug":"assets/20180801223317483.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801230101207.jpeg","slug":"assets/20180801230101207.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801230208709.jpeg","slug":"assets/20180801230208709.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801231139446.jpeg","slug":"assets/20180801231139446.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180801231815212.jpeg","slug":"assets/20180801231815212.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802134614132.jpeg","slug":"assets/20180802134614132.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802140239955.jpeg","slug":"assets/20180802140239955.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802140857754.jpeg","slug":"assets/20180802140857754.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0},{"_id":"source/_posts/算法与协议/堆排序算法/assets/20180802141542496.jpeg","slug":"assets/20180802141542496.jpeg","post":"ckjavsenh000m4kpwdhw064i2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cki5ixzjf0000qjpwd4nwa526","category_id":"cki5icqqs0007ifpwdjco0okt","_id":"cki5ixzjp0005qjpw4q4c53d7"},{"post_id":"ckjavsemy00004kpwf9qy8tsr","category_id":"cki5icqqo0004ifpw7y024st8","_id":"ckjavsen700064kpwbmd6as74"},{"post_id":"ckjavsen100014kpwd00w3cll","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"ckjavsen900094kpw6nek7823"},{"post_id":"ckjavsen300034kpwbiwk0r65","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"ckjavsen9000b4kpw8m6jgrqd"},{"post_id":"ckjavsen600054kpw73ooalp9","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"ckjavsena000d4kpw9o55fgxg"},{"post_id":"ckjavsen800084kpw25zi7m69","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"ckjavsena000f4kpwe7mcedsn"},{"post_id":"ckjavsenc000i4kpwc0g8bx7n","category_id":"ckjavsend000k4kpwebnd7gxv","_id":"ckjavsenj000p4kpw6mea4cjp"},{"post_id":"ckjavsenc000j4kpwf4hletqc","category_id":"ckjavsenj000n4kpw15qlan5z","_id":"ckjavsenl000u4kpwggtngxok"},{"post_id":"ckjavsenh000m4kpwdhw064i2","category_id":"ckjavsend000k4kpwebnd7gxv","_id":"ckjavsenm000x4kpwdghdemkg"}],"PostTag":[{"post_id":"cki5ixzjf0000qjpwd4nwa526","tag_id":"cki5icqqt0008ifpwdex61a6a","_id":"cki5ixzjk0002qjpw6fat8bdf"},{"post_id":"ckjavsemy00004kpwf9qy8tsr","tag_id":"cki5icqqq0005ifpw2ksn5xva","_id":"ckjavsen300024kpwamd67f85"},{"post_id":"ckjavsen100014kpwd00w3cll","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"ckjavsen600044kpw348n6g63"},{"post_id":"ckjavsen100014kpwd00w3cll","tag_id":"cki5ixzjp0007qjpw9wwgay45","_id":"ckjavsen700074kpwge151rh5"},{"post_id":"ckjavsen300034kpwbiwk0r65","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"ckjavsen9000a4kpwclg5d6l2"},{"post_id":"ckjavsen600054kpw73ooalp9","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"ckjavsena000c4kpw9abz950a"},{"post_id":"ckjavsen600054kpw73ooalp9","tag_id":"cki5ixzjp0007qjpw9wwgay45","_id":"ckjavsena000e4kpwaa2l93t7"},{"post_id":"ckjavsen800084kpw25zi7m69","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"ckjavsena000g4kpw33t50trr"},{"post_id":"ckjavsen800084kpw25zi7m69","tag_id":"cki5ixzjp0007qjpw9wwgay45","_id":"ckjavsena000h4kpw3gn17bfp"},{"post_id":"ckjavsenc000i4kpwc0g8bx7n","tag_id":"ckjavsenh000l4kpw08xffhdx","_id":"ckjavsenl000s4kpw5mg2g94n"},{"post_id":"ckjavsenc000i4kpwc0g8bx7n","tag_id":"ckjavsenj000o4kpw15lv7x3z","_id":"ckjavsenl000t4kpw2i72gu4m"},{"post_id":"ckjavsenc000j4kpwf4hletqc","tag_id":"ckjavsenj000o4kpw15lv7x3z","_id":"ckjavsenm000w4kpwbmc44lci"},{"post_id":"ckjavsenh000m4kpwdhw064i2","tag_id":"ckjavsenl000v4kpw7k469wan","_id":"ckjavsenm000z4kpweb69ew1z"},{"post_id":"ckjavsenh000m4kpwdhw064i2","tag_id":"ckjavsenm000y4kpwez4e12n6","_id":"ckjavsenn00104kpwb7wxeky5"}],"Tag":[{"name":"git","_id":"cki5icqqq0005ifpw2ksn5xva"},{"name":"chrome","_id":"cki5icqqt0008ifpwdex61a6a"},{"name":"无标","_id":"cki5icqqu000cifpw5h1226in"},{"name":"golang","_id":"cki5ixzjo0004qjpwgk0a2w9r"},{"name":"内存管理","_id":"cki5ixzjp0007qjpw9wwgay45"},{"name":"分布式协议","_id":"ckjavsenh000l4kpw08xffhdx"},{"name":"网络协议","_id":"ckjavsenj000o4kpw15lv7x3z"},{"name":"堆排序","_id":"ckjavsenl000v4kpw7k469wan"},{"name":"数据结构","_id":"ckjavsenm000y4kpwez4e12n6"}]}}