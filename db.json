{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"620a7b9377db1941eab1acfc8c624b879fa37e8d","modified":1606025789031},{"_id":"source/_data/projects.json","hash":"ca5c89357d627550822526f565773dad52554855","modified":1605414554096},{"_id":"source/_posts/技术/chrome_87_新功能.md","hash":"35ed4a2416516bdf0c4e551469e37b72330111e3","modified":1606796006116},{"_id":"source/_posts/技术/git-show-chinese-filenames.md","hash":"9e56ebc5d186b1da9122191723b67dceecc38e0b","modified":1606797930015},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1605386278508},{"_id":"source/about/index.md","hash":"15f849ba974df0f15c0c4d1a65df5448f989e8c9","modified":1606797399979},{"_id":"source/_posts/技术/go程序初始化顺序.md","hash":"836d1cbd35f733eb9dc5ad9d4e2690c49d37d698","modified":1606798699193},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606794927670},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606794927671},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606794927671},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606794927671},{"_id":"source/_posts/技术/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606794927672},{"_id":"source/_posts/技术/go程序初始化顺序/assets/20170831112523944.jpeg","hash":"aefafe5e4be8c3b20aab75edc05e5935ea98b29b","modified":1606798109039},{"_id":"source/_posts/技术/git-show-chinese-filenames/assets/status-dig.jpg","hash":"a02f9dd03f2085fd60d8fbc0d2cd039c95f86f9a","modified":1606797530688},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1605386278509},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1605386278509},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1605386278510},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1605386278510},{"_id":"themes/cactus/README.md","hash":"65f5c6be4424b6c8f9071ea0c125070943a3fd1e","modified":1605386278510},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1605386278526},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1605386278512},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1605386278526},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1605386278527},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1605386278524},{"_id":"themes/cactus/_config.yml","hash":"7f540bd6ae7b697b5faf898b8cd4acc62b8b5f73","modified":1605386278511},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1605386278527},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1605386278523},{"_id":"themes/cactus/layout/index.ejs","hash":"d5d42dc8e01328fe215f9043292a0696a92db35c","modified":1605386278523},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1605386278524},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1605386278523},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1605386278524},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1605386278512},{"_id":"themes/cactus/languages/en.yml","hash":"c9eaa60af3189ecdb9ccaeface14d569b0a07c0c","modified":1605386278513},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1605386278513},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1605386278513},{"_id":"themes/cactus/languages/default.yml","hash":"c9eaa60af3189ecdb9ccaeface14d569b0a07c0c","modified":1605386278513},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1605386278514},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1605386278514},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1605386278515},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1605386278515},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1605386278516},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1605386278515},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1605386278516},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1605386278517},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1605386278517},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1605386278516},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1605386278518},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1605386278518},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1605386278518},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"ab38dbf9b11f829e165f1a0aa6a60d556f94a0a6","modified":1605386278519},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1605386278517},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1605386278519},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"b60f6bf5fd8aa0aa1425ff6425532c01d1354045","modified":1605386278522},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"cb3ca34fb0db2578c6c64e14922c17de1cf2afcc","modified":1605386278519},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1605386278522},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1605386278523},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1605386278530},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1605386278530},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1605386278562},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1605386278567},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1605386278567},{"_id":"themes/cactus/source/css/style.styl","hash":"18b22cfdc7457d81db7694aef5850cc36ff87a77","modified":1605386278567},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1605386278567},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1605386278568},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1605386278568},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1605386278569},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1605386278571},{"_id":"themes/cactus/source/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1605386278572},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1605386278519},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1605386278520},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1605386278521},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1605386278521},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1605386278522},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1605386278528},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1605386278529},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1605386278529},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1605386278530},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1605386278562},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1605386278563},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"c6a3c395ceb4aacba8c995bcde7b58a7ca501919","modified":1605386278562},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"14dda7f155bb21e6cd33ca3d8daa5b489b4707b3","modified":1605386278564},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1605386278563},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1605386278564},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1605386278564},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1605386278565},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1605386278566},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1605386278566},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1605386278566},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1605386278530},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1605386278531},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1605386278532},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1605386278532},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1605386278532},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1605386278533},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1605386278534},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1605386278534},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1605386278534},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1605386278535},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1605386278536},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1605386278537},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1605386278538},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1605386278538},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1605386278538},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1605386278537},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1605386278539},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1605386278540},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1605386278540},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1605386278541},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1605386278541},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1605386278540},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1605386278541},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1605386278542},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1605386278542},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1605386278543},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1605386278544},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1605386278545},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1605386278546},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1605386278547},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1605386278549},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1605386278550},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1605386278550},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1605386278551},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1605386278551},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1605386278552},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1605386278553},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1605386278553},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1605386278554},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1605386278555},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1605386278555},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1605386278556},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1605386278556},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1605386278556},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1605386278557},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1605386278557},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1605386278557},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1605386278558},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1605386278558},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1605386278558},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1605386278559},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1605386278560},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1605386278560},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1605386278560},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1605386278561},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1605386278561},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1605386278561},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1605386278572},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1605386278660},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1605386278660},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1605386278663},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1605386278664},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1605386278666},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1605386278667},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1605386278669},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1605386278669},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1605386278672},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1605386278672},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1605386278675},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1605386278675},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1605386278675},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"ae3d9090bf4d934d443c0a431cb09d009743155a","modified":1605386278565},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1605386278566},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1605386278573},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1605386278584},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1605386278586},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1605386278585},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1605386278586},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1605386278606},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1605386278607},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1605386278605},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1605386278658},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1605386278659},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1605386278661},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1605386278662},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1605386278665},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1605386278666},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1605386278668},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1605386278668},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1605386278670},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1605386278672},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1605386278673},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1605386278674},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1605386278583},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1605386278583},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1605386278600},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1605386278602},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1605386278574},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1605386278582},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1605386278585},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1605386278598},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1605386278588},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1605386278571},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1605386278631},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1605386278616},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1605386278619},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1605386278634},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1605386278651},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1605386278645},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1605386278640},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1605386278622},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1605386278637},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1605386278656},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1605386278612},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1605386278627},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1605386278581},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1605386278594},{"_id":"public/atom.xml","hash":"a3f70f1dcebef3805a1cd00b8c8fa0800a2de667","modified":1606800009017},{"_id":"public/about/index.html","hash":"01b5d46aa518cdc0d0b60c27001a006a5272eeba","modified":1606798521754},{"_id":"public/2020/12/01/技术/go程序初始化顺序/index.html","hash":"c045610ed476e93c733a18817da1f4d87c20cfcf","modified":1606799512583},{"_id":"public/2020/12/01/技术/git-show-chinese-filenames/index.html","hash":"330e5449619dcf910f8594988d1154cd6c8a4fc3","modified":1606799512583},{"_id":"public/2020/12/01/技术/chrome_87_新功能/index.html","hash":"056eeb347ffd32ca8d67fc34ec01bd73e216ef6e","modified":1606798521754},{"_id":"public/2020/11/15/hello-world/index.html","hash":"cdd3a23b90e26ba09ac8fa218c90f130af79e236","modified":1606799512583},{"_id":"public/archives/index.html","hash":"d06a30e9668235187b8f31fecc4483b4b52cd2b1","modified":1606800009017},{"_id":"public/archives/2020/index.html","hash":"7cc5c4d587498266a4afaa176fa8a4b09935f61a","modified":1606800009017},{"_id":"public/archives/2020/11/index.html","hash":"212e84077fb3c573f1e07a0e62cce924fda1f408","modified":1606798521754},{"_id":"public/archives/2020/12/index.html","hash":"2cc15212347e03e2f16ab9a3d30ffd5a8898b588","modified":1606800009017},{"_id":"public/categories/技术/index.html","hash":"4199b69b4cd7d787d40fbf3523d1f79fa94f828f","modified":1606798521754},{"_id":"public/categories/新闻记录/index.html","hash":"14b9f40e826442b1051303552b14522f5f761270","modified":1606799512583},{"_id":"public/categories/默认/index.html","hash":"2bbd71ea3643cdd478eeb25e510e00a3a3d69627","modified":1606798521754},{"_id":"public/index.html","hash":"095905fdbae3ab275905a240fb618b2465f92e4f","modified":1606800009017},{"_id":"public/tags/git/index.html","hash":"c2ce03ea4e4c55fb345543ab5d2b919d9e9789cd","modified":1606798521754},{"_id":"public/tags/chrome/index.html","hash":"bb3c9171f33cda0382b8bd422ffd7938942ca610","modified":1606799512583},{"_id":"public/tags/无标/index.html","hash":"2a32c314b9a0418e5f0e44ac60099b6d2d012a5b","modified":1606798521754},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1606798521754},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1606798521754},{"_id":"public/2020/12/01/技术/git-show-chinese-filenames/assets/status-dig.jpg","hash":"a02f9dd03f2085fd60d8fbc0d2cd039c95f86f9a","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606798521754},{"_id":"public/2020/12/01/技术/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606798521754},{"_id":"public/2020/12/01/技术/go程序初始化顺序/assets/20170831112523944.jpeg","hash":"aefafe5e4be8c3b20aab75edc05e5935ea98b29b","modified":1606798521754},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1606798521754},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1606798521754},{"_id":"public/css/style.css","hash":"faf67a4d2240378e4b490da3c61e1c7796f798df","modified":1606798521754},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1606798521754},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1606798521754},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1606798521754},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1606798521754},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1606798521754},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1606798521754},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1606798521754},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1606798521754},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"703603273f5d5d52eb456d6385e1a68294fbd568","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1606798521754},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1606798521754},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1606798521754},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1606798521754},{"_id":"source/_posts/技术/go垃圾回收.md","hash":"57a0bf58d087bb716785a42cf18381de9473bd34","modified":1606799508389},{"_id":"source/_posts/工具/chrome_87_新功能.md","hash":"35ed4a2416516bdf0c4e551469e37b72330111e3","modified":1606796006116},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606794927670},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606794927672},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606794927671},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606794927671},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606794927671},{"_id":"source/_posts/技术/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","hash":"3851089bdcb0f0f75e6b80230dbdc728e6c2ee01","modified":1606799348300},{"_id":"source/_posts/技术/go垃圾回收/assets/16c9abaa4032c7ea.gif","hash":"3020b7605e5ba904b832f4df180c620996d97963","modified":1606799348301},{"_id":"public/2020/12/01/技术/go垃圾回收/index.html","hash":"6d47b76bacdb0adb9d40bb30d890eac6e43bdac5","modified":1606800009017},{"_id":"public/2020/12/01/工具/chrome_87_新功能/index.html","hash":"f25de9628bed060a164017e180e17102f240ade0","modified":1606799512583},{"_id":"public/categories/开发/index.html","hash":"2da379ecb4cbc1bb8d5503cfae7e4f95fbeea695","modified":1606800009017},{"_id":"public/tags/golang/index.html","hash":"698c09bb4e11ccc03f2a740068e994bd374cb4db","modified":1606800009017},{"_id":"public/tags/内存管理/index.html","hash":"57840b68c8dcee37c51638f7f31f8572c4c366e5","modified":1606800009017},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image2.jpeg","hash":"58d7561120dc48911fdfaba5840897009b608117","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image3.jpeg","hash":"9195385c56611afda11c8b4e2c9af5a054c52051","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image5.jpeg","hash":"d4cae8cc2dc90bc23c2737218d172dc8063ac922","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image4.jpeg","hash":"d329e7d26375f2232bb31e849bcc5a22864fdfb3","modified":1606799512583},{"_id":"public/2020/12/01/技术/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","hash":"3851089bdcb0f0f75e6b80230dbdc728e6c2ee01","modified":1606799512583},{"_id":"public/2020/12/01/工具/chrome_87_新功能/assets/image1.jpeg","hash":"0ff0531b6f28f4440c29cf7227cb0d9e3c3a2823","modified":1606799512583},{"_id":"public/2020/12/01/技术/go垃圾回收/assets/16c9abaa4032c7ea.gif","hash":"3020b7605e5ba904b832f4df180c620996d97963","modified":1606799512583},{"_id":"source/_posts/技术/go逃逸分析与栈、堆分配分析.md","hash":"1041bb80025c67d8d95825e9da74d245b198819f","modified":1606800000784},{"_id":"public/2020/12/01/技术/go逃逸分析与栈、堆分配分析/index.html","hash":"e012830b61dc32699f92c9426d31e9cb00c0df3c","modified":1606800009017}],"Category":[{"name":"技术","_id":"cki5icqqo0004ifpw7y024st8"},{"name":"新闻记录","_id":"cki5icqqs0007ifpwdjco0okt"},{"name":"默认","_id":"cki5icqqt000bifpweg0ue7kr"},{"name":"开发","_id":"cki5ixzjl0003qjpw1heqcm2e"}],"Data":[{"_id":"projects","data":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}],"Page":[{"title":"about","date":"2020-11-14T19:43:01.000Z","_content":"\nAbout Me\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-11-15 03:43:01\n---\n\nAbout Me\n","updated":"2020-12-01T04:36:39.979Z","path":"about/index.html","comments":1,"layout":"page","_id":"cki5icqqd0000ifpwbzui82qx","content":"<p>About Me</p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>About Me</p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-11-14T20:37:58.507Z","updated":"2020-11-14T20:37:58.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5icqqh0001ifpwcsfbc43z","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"解决git status不能显示中文","date":"2020-12-01T04:39:34.000Z","_content":"* 现象\nstatus查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：\n![](assets/status-dig.jpg)\n\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n\n* 解决办法\n将git 配置文件 core.quotepath项设置为false\n```shell script\ngit config —global core.quotepath false\n```\n","source":"_posts/技术/git-show-chinese-filenames.md","raw":"---\ntitle: 解决git status不能显示中文\ndate: 2020-12-01 12:39:34\ncategories:\n  - 技术\ntags:\n  - git\n---\n* 现象\nstatus查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：\n![](assets/status-dig.jpg)\n\n* 原因\n在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。\n\n* 解决办法\n将git 配置文件 core.quotepath项设置为false\n```shell script\ngit config —global core.quotepath false\n```\n","slug":"技术/git-show-chinese-filenames","published":1,"updated":"2020-12-01T04:45:30.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5icqql0002ifpwbjed7z48","content":"<ul>\n<li><p>现象<br>status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：<br><img src=\"assets/status-dig.jpg\"></p>\n</li>\n<li><p>原因<br>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p>\n</li>\n<li><p>解决办法<br>将git 配置文件 core.quotepath项设置为false</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config —global core.quotepath false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<ul>\n<li><p>现象<br>status查看有改动但未提交的文件时总只显示数字串，显示不出中文文件名，非常不方便。如下图：<br><img src=\"assets/status-dig.jpg\"></p>\n</li>\n<li><p>原因<br>在默认设置下，中文文件名在工作区状态输出，中文名不能正确显示，而是显示为八进制的字符编码。</p>\n</li>\n<li><p>解决办法<br>将git 配置文件 core.quotepath项设置为false</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config —global core.quotepath false</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"go程序初始化顺序","date":"2020-12-01T04:51:14.000Z","_content":"在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。\n\n### 包的执行顺序\n\n* 在 main 包中的 go 文件默认总是会被执行\n* 同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行\n* 其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行\n* 被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main\n* 一个包被其它多个包 import，但只能被初始化一次\n* main 包总是被最后一个初始化，因为它总是依赖别的包\n* 避免出现循环 import，例如：A –> B –> C –> A\n\ngo 程序的初始化顺序见下图：\n\n![](assets/20170831112523944.jpeg)\n\n### init 和 main 函数\n\ninit()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：\n相同点：\n\n* 两个函数在定义时不能有任何的参数和返回值\n* 该函数只能由 go 程序自动调用，不可以被引用\n\n不同点：\n\n* init 可以应用于任意包中，且可以重复定义多个。\n* main 函数只能用于 main 包中，且只能定义一个。\n\n两个函数的执行顺序：\n\n* 对同一个 go 文件的 init( ) 调用顺序是从上到下的\n* 对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数\n* 对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数\n* 如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main，一次执行对应的 init 方法。\n\n### 常量、变量、init()、main()\n\n在同一个文件中，常量、变量、init()、main() 依次进行初始化。\n\n[go编程：浅析go程序初始化顺序](https://blog.csdn.net/claram/article/details/77745665)\n","source":"_posts/技术/go程序初始化顺序.md","raw":"---\ntitle: go程序初始化顺序\ncategories:\n  - 开发\ntags:\n  - golang\ndate: 2020-12-01 12:51:14\n---\n在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。\n\n### 包的执行顺序\n\n* 在 main 包中的 go 文件默认总是会被执行\n* 同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行\n* 其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行\n* 被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main\n* 一个包被其它多个包 import，但只能被初始化一次\n* main 包总是被最后一个初始化，因为它总是依赖别的包\n* 避免出现循环 import，例如：A –> B –> C –> A\n\ngo 程序的初始化顺序见下图：\n\n![](assets/20170831112523944.jpeg)\n\n### init 和 main 函数\n\ninit()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：\n相同点：\n\n* 两个函数在定义时不能有任何的参数和返回值\n* 该函数只能由 go 程序自动调用，不可以被引用\n\n不同点：\n\n* init 可以应用于任意包中，且可以重复定义多个。\n* main 函数只能用于 main 包中，且只能定义一个。\n\n两个函数的执行顺序：\n\n* 对同一个 go 文件的 init( ) 调用顺序是从上到下的\n* 对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数\n* 对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数\n* 如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –> A –> B –> C，则初始化顺序为 C –> B –> A –> main，一次执行对应的 init 方法。\n\n### 常量、变量、init()、main()\n\n在同一个文件中，常量、变量、init()、main() 依次进行初始化。\n\n[go编程：浅析go程序初始化顺序](https://blog.csdn.net/claram/article/details/77745665)\n","slug":"技术/go程序初始化顺序","published":1,"updated":"2020-12-01T04:58:19.193Z","_id":"cki5icqqr0006ifpw13akdxza","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。</p>\n<h3 id=\"包的执行顺序\"><a href=\"#包的执行顺序\" class=\"headerlink\" title=\"包的执行顺序\"></a>包的执行顺序</h3><ul>\n<li>在 main 包中的 go 文件默认总是会被执行</li>\n<li>同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行</li>\n<li>其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行</li>\n<li>被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main</li>\n<li>一个包被其它多个包 import，但只能被初始化一次</li>\n<li>main 包总是被最后一个初始化，因为它总是依赖别的包</li>\n<li>避免出现循环 import，例如：A –&gt; B –&gt; C –&gt; A</li>\n</ul>\n<p>go 程序的初始化顺序见下图：</p>\n<p><img src=\"assets/20170831112523944.jpeg\"></p>\n<h3 id=\"init-和-main-函数\"><a href=\"#init-和-main-函数\" class=\"headerlink\" title=\"init 和 main 函数\"></a>init 和 main 函数</h3><p>init()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：<br>相同点：</p>\n<ul>\n<li>两个函数在定义时不能有任何的参数和返回值</li>\n<li>该函数只能由 go 程序自动调用，不可以被引用</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>init 可以应用于任意包中，且可以重复定义多个。</li>\n<li>main 函数只能用于 main 包中，且只能定义一个。</li>\n</ul>\n<p>两个函数的执行顺序：</p>\n<ul>\n<li>对同一个 go 文件的 init( ) 调用顺序是从上到下的</li>\n<li>对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数</li>\n<li>对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数</li>\n<li>如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main，一次执行对应的 init 方法。</li>\n</ul>\n<h3 id=\"常量、变量、init-、main\"><a href=\"#常量、变量、init-、main\" class=\"headerlink\" title=\"常量、变量、init()、main()\"></a>常量、变量、init()、main()</h3><p>在同一个文件中，常量、变量、init()、main() 依次进行初始化。</p>\n<p><a href=\"https://blog.csdn.net/claram/article/details/77745665\">go编程：浅析go程序初始化顺序</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>在一个 go 程序中通常包含：包、常量、变量、init()、main()等元素，如果同时存在多个包，包之间存在依赖关系，每个包中存在多个 init 函数，每个文件中存在多个 init 函数，那么问题来了，他们之间的执行顺序是什么样的？通过本文我们来对它们之间的执行顺序做尽可能详尽的说明。如有不正之处，欢迎批评指正。</p>\n<h3 id=\"包的执行顺序\"><a href=\"#包的执行顺序\" class=\"headerlink\" title=\"包的执行顺序\"></a>包的执行顺序</h3><ul>\n<li>在 main 包中的 go 文件默认总是会被执行</li>\n<li>同包下的不同 go 文件，按照文件名“从小到大”排序顺序执行</li>\n<li>其他的包只有被 main 包 import 才会执行，按照 import 的先后顺序执行</li>\n<li>被递归 import 的包的初始化顺序与 import 顺序相反，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main</li>\n<li>一个包被其它多个包 import，但只能被初始化一次</li>\n<li>main 包总是被最后一个初始化，因为它总是依赖别的包</li>\n<li>避免出现循环 import，例如：A –&gt; B –&gt; C –&gt; A</li>\n</ul>\n<p>go 程序的初始化顺序见下图：</p>\n<p><img src=\"assets/20170831112523944.jpeg\"></p>\n<h3 id=\"init-和-main-函数\"><a href=\"#init-和-main-函数\" class=\"headerlink\" title=\"init 和 main 函数\"></a>init 和 main 函数</h3><p>init()、main() 是 go 语言中的保留函数，两个函数在 go 语言中的区别如下：<br>相同点：</p>\n<ul>\n<li>两个函数在定义时不能有任何的参数和返回值</li>\n<li>该函数只能由 go 程序自动调用，不可以被引用</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>init 可以应用于任意包中，且可以重复定义多个。</li>\n<li>main 函数只能用于 main 包中，且只能定义一个。</li>\n</ul>\n<p>两个函数的执行顺序：</p>\n<ul>\n<li>对同一个 go 文件的 init( ) 调用顺序是从上到下的</li>\n<li>对同一个 package 中的不同文件，将文件名按字符串进行“从小到大”排序，之后顺序调用各文件中的init()函数</li>\n<li>对于不同的 package，如果不相互依赖的话，按照 main 包中 import 的顺序调用其包中的 init() 函数</li>\n<li>如果 package 存在依赖，调用顺序为最后被依赖的最先被初始化，例如：导入顺序 main –&gt; A –&gt; B –&gt; C，则初始化顺序为 C –&gt; B –&gt; A –&gt; main，一次执行对应的 init 方法。</li>\n</ul>\n<h3 id=\"常量、变量、init-、main\"><a href=\"#常量、变量、init-、main\" class=\"headerlink\" title=\"常量、变量、init()、main()\"></a>常量、变量、init()、main()</h3><p>在同一个文件中，常量、变量、init()、main() 依次进行初始化。</p>\n<p><a href=\"https://blog.csdn.net/claram/article/details/77745665\">go编程：浅析go程序初始化顺序</a></p>\n"},{"title":"Chrome 87 新功能：标签页分组，可自动分组同网站下标签页","date":"2020-12-01T03:59:36.000Z","_content":"2020 年的最后一个版本 [Chrome 87](https://www.appinn.com/chrome-87-released/) 新增了很多实用性的功能，在支持 [地址栏切换标签页](https://www.appinn.com/chrome-87-search-tabs-in-addressbar/) 之后， **标签页分组** 功能页正式上线了，并且还可以为 **同网站** 自动创建标签页分组。@Appinn \n\n![](assets/image1.jpeg)\n\n倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。\n\n## 标签页分组\n\n升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 **向新群组中添加标签页** ，即可创建分组： \n\n![](assets/image2.jpeg)\n\n之后便可在其他标签页标题右键时，同样选择 **向新群组中添加标签页** 就能移动至分组中： \n\n![](assets/image3.jpeg)\n\n之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：\n\n![](assets/image4.jpeg)\n\n## 自动分组\n\n自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：\n\n![](assets/image5.jpeg)\n\n开启后，新打开的标签页如果是同网站下，就会自动创建分组。\n\n- - - -\n\n## 相关阅读\n\n* [3000时代来临，赢空间活动继续](https://www.appinn.com/lzzxt-game4/)\n* [Chrome 4.0，用扩展武装它](https://www.appinn.com/chrome-4-extensions-setup/)\n* [Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步](https://www.appinn.com/save-pinned-tabs-for-chrome/)\n* [赢空间游戏新高 3432 分](https://www.appinn.com/lzzxt-game3/)\n* [求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件](https://www.appinn.com/automatic-scrolling-tabs-for-chrome/)\n\n- - - -\n\n[©](http://www.appinn.com/copyright/?&amp;&amp;) 2019 青小蛙 for [小众软件](http://www.appinn.com/?&amp;&amp;) | [加入我们](http://www.appinn.com/join-us/?&amp;&amp;) | [投稿](https://meta.appinn.com/c/faxian/?&amp;&amp;) | [订阅指南](http://www.appinn.com/feeds-subscribe/?&amp;&amp;)\n3659b075e72a5b7b1b87ea74aa7932ff\n[点击这里留言、和原作者一起评论](https://www.appinn.com/chrome-87-tabs-group/#comments) https://www.appinn.com/chrome-87-tabs-group/\n","source":"_posts/工具/chrome_87_新功能.md","raw":"---\ntitle: Chrome 87 新功能：标签页分组，可自动分组同网站下标签页\ndate: 2020-12-01 11:59:36\ncategories:\n  - 新闻记录\ntags:\n  - chrome\n---\n2020 年的最后一个版本 [Chrome 87](https://www.appinn.com/chrome-87-released/) 新增了很多实用性的功能，在支持 [地址栏切换标签页](https://www.appinn.com/chrome-87-search-tabs-in-addressbar/) 之后， **标签页分组** 功能页正式上线了，并且还可以为 **同网站** 自动创建标签页分组。@Appinn \n\n![](assets/image1.jpeg)\n\n倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。\n\n## 标签页分组\n\n升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 **向新群组中添加标签页** ，即可创建分组： \n\n![](assets/image2.jpeg)\n\n之后便可在其他标签页标题右键时，同样选择 **向新群组中添加标签页** 就能移动至分组中： \n\n![](assets/image3.jpeg)\n\n之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：\n\n![](assets/image4.jpeg)\n\n## 自动分组\n\n自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：\n\n![](assets/image5.jpeg)\n\n开启后，新打开的标签页如果是同网站下，就会自动创建分组。\n\n- - - -\n\n## 相关阅读\n\n* [3000时代来临，赢空间活动继续](https://www.appinn.com/lzzxt-game4/)\n* [Chrome 4.0，用扩展武装它](https://www.appinn.com/chrome-4-extensions-setup/)\n* [Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步](https://www.appinn.com/save-pinned-tabs-for-chrome/)\n* [赢空间游戏新高 3432 分](https://www.appinn.com/lzzxt-game3/)\n* [求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件](https://www.appinn.com/automatic-scrolling-tabs-for-chrome/)\n\n- - - -\n\n[©](http://www.appinn.com/copyright/?&amp;&amp;) 2019 青小蛙 for [小众软件](http://www.appinn.com/?&amp;&amp;) | [加入我们](http://www.appinn.com/join-us/?&amp;&amp;) | [投稿](https://meta.appinn.com/c/faxian/?&amp;&amp;) | [订阅指南](http://www.appinn.com/feeds-subscribe/?&amp;&amp;)\n3659b075e72a5b7b1b87ea74aa7932ff\n[点击这里留言、和原作者一起评论](https://www.appinn.com/chrome-87-tabs-group/#comments) https://www.appinn.com/chrome-87-tabs-group/\n","slug":"工具/chrome_87_新功能","published":1,"updated":"2020-12-01T04:13:26.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5ixzjf0000qjpwd4nwa526","content":"<p>2020 年的最后一个版本 <a href=\"https://www.appinn.com/chrome-87-released/\">Chrome 87</a> 新增了很多实用性的功能，在支持 <a href=\"https://www.appinn.com/chrome-87-search-tabs-in-addressbar/\">地址栏切换标签页</a> 之后， <strong>标签页分组</strong> 功能页正式上线了，并且还可以为 <strong>同网站</strong> 自动创建标签页分组。@Appinn </p>\n<p><img src=\"assets/image1.jpeg\"></p>\n<p>倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。</p>\n<h2 id=\"标签页分组\"><a href=\"#标签页分组\" class=\"headerlink\" title=\"标签页分组\"></a>标签页分组</h2><p>升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 <strong>向新群组中添加标签页</strong> ，即可创建分组： </p>\n<p><img src=\"assets/image2.jpeg\"></p>\n<p>之后便可在其他标签页标题右键时，同样选择 <strong>向新群组中添加标签页</strong> 就能移动至分组中： </p>\n<p><img src=\"assets/image3.jpeg\"></p>\n<p>之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：</p>\n<p><img src=\"assets/image4.jpeg\"></p>\n<h2 id=\"自动分组\"><a href=\"#自动分组\" class=\"headerlink\" title=\"自动分组\"></a>自动分组</h2><p>自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：</p>\n<p><img src=\"assets/image5.jpeg\"></p>\n<p>开启后，新打开的标签页如果是同网站下，就会自动创建分组。</p>\n<hr>\n<h2 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h2><ul>\n<li><a href=\"https://www.appinn.com/lzzxt-game4/\">3000时代来临，赢空间活动继续</a></li>\n<li><a href=\"https://www.appinn.com/chrome-4-extensions-setup/\">Chrome 4.0，用扩展武装它</a></li>\n<li><a href=\"https://www.appinn.com/save-pinned-tabs-for-chrome/\">Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步</a></li>\n<li><a href=\"https://www.appinn.com/lzzxt-game3/\">赢空间游戏新高 3432 分</a></li>\n<li><a href=\"https://www.appinn.com/automatic-scrolling-tabs-for-chrome/\">求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件</a></li>\n</ul>\n<hr>\n<p><a href=\"http://www.appinn.com/copyright/?&amp;&amp;\">©</a> 2019 青小蛙 for <a href=\"http://www.appinn.com/?&amp;&amp;\">小众软件</a> | <a href=\"http://www.appinn.com/join-us/?&amp;&amp;\">加入我们</a> | <a href=\"https://meta.appinn.com/c/faxian/?&amp;&amp;\">投稿</a> | <a href=\"http://www.appinn.com/feeds-subscribe/?&amp;&amp;\">订阅指南</a><br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href=\"https://www.appinn.com/chrome-87-tabs-group/#comments\">点击这里留言、和原作者一起评论</a> <a href=\"https://www.appinn.com/chrome-87-tabs-group/\">https://www.appinn.com/chrome-87-tabs-group/</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<p>2020 年的最后一个版本 <a href=\"https://www.appinn.com/chrome-87-released/\">Chrome 87</a> 新增了很多实用性的功能，在支持 <a href=\"https://www.appinn.com/chrome-87-search-tabs-in-addressbar/\">地址栏切换标签页</a> 之后， <strong>标签页分组</strong> 功能页正式上线了，并且还可以为 <strong>同网站</strong> 自动创建标签页分组。@Appinn </p>\n<p><img src=\"assets/image1.jpeg\"></p>\n<p>倒也不是吹捧，见过这么多分组扩展，青小蛙的确觉得 Chrome 官方的标签页分组方式更科学一些。</p>\n<h2 id=\"标签页分组\"><a href=\"#标签页分组\" class=\"headerlink\" title=\"标签页分组\"></a>标签页分组</h2><p>升级至 Chrome 87 最新版本之后，就自动拥有了这个功能，只需要对着标签页右键，选择 <strong>向新群组中添加标签页</strong> ，即可创建分组： </p>\n<p><img src=\"assets/image2.jpeg\"></p>\n<p>之后便可在其他标签页标题右键时，同样选择 <strong>向新群组中添加标签页</strong> 就能移动至分组中： </p>\n<p><img src=\"assets/image3.jpeg\"></p>\n<p>之后，还可以对分组命名，并标记颜色，如果未命名，分组将以小圆点的方式表示，命名后就如下图，点击该名称还能折叠分组：</p>\n<p><img src=\"assets/image4.jpeg\"></p>\n<h2 id=\"自动分组\"><a href=\"#自动分组\" class=\"headerlink\" title=\"自动分组\"></a>自动分组</h2><p>自动分组目前还属于实验性功能，需要在 Chrome://flags 中开启：</p>\n<p><img src=\"assets/image5.jpeg\"></p>\n<p>开启后，新打开的标签页如果是同网站下，就会自动创建分组。</p>\n<hr>\n<h2 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h2><ul>\n<li><a href=\"https://www.appinn.com/lzzxt-game4/\">3000时代来临，赢空间活动继续</a></li>\n<li><a href=\"https://www.appinn.com/chrome-4-extensions-setup/\">Chrome 4.0，用扩展武装它</a></li>\n<li><a href=\"https://www.appinn.com/save-pinned-tabs-for-chrome/\">Save Pinned Tabs – 保存 Chrome 当前固定标签页、分组、同步</a></li>\n<li><a href=\"https://www.appinn.com/lzzxt-game3/\">赢空间游戏新高 3432 分</a></li>\n<li><a href=\"https://www.appinn.com/automatic-scrolling-tabs-for-chrome/\">求一个脱离鼠标仍可网页自动向下滚动的 Chrome 插件</a></li>\n</ul>\n<hr>\n<p><a href=\"http://www.appinn.com/copyright/?&amp;&amp;\">©</a> 2019 青小蛙 for <a href=\"http://www.appinn.com/?&amp;&amp;\">小众软件</a> | <a href=\"http://www.appinn.com/join-us/?&amp;&amp;\">加入我们</a> | <a href=\"https://meta.appinn.com/c/faxian/?&amp;&amp;\">投稿</a> | <a href=\"http://www.appinn.com/feeds-subscribe/?&amp;&amp;\">订阅指南</a><br>3659b075e72a5b7b1b87ea74aa7932ff<br><a href=\"https://www.appinn.com/chrome-87-tabs-group/#comments\">点击这里留言、和原作者一起评论</a> <a href=\"https://www.appinn.com/chrome-87-tabs-group/\">https://www.appinn.com/chrome-87-tabs-group/</a></p>\n"},{"title":"go垃圾回收","date":"2020-12-01T05:10:16.000Z","_content":"# 搞懂Go垃圾回收\n本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。\n\n\n## 什么是垃圾回收\n垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 [维基百科](https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29)\n\n简单地说， **垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。**\n\n\n## go的垃圾回收\n当前Golang使用的垃圾回收机制是 **三色标记发** 配合 **写屏障** 和 **辅助GC** ，三色标记法是 **标记-清除法** 的一种增强版本。\n\n\n### 标记清除法(mark and sweep)\n原始的标记清楚法分为两个步骤：\n\n1. 标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记\n2. 清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。\n\n这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。\n\n\n### 三色标记法\n三色标记法是对标记阶段的改进，原理如下：\n\n1. 初始状态所有对象都是白色。\n2. 从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）\n\n> 那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  \n\n![](assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png)\n\n1. 分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）\n2. 重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。\n\n也可以参考下面的动图辅助理解：\n\n![](assets/16c9abaa4032c7ea.gif)\n\n\n## Go GC如何工作\n上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 **Golang GC的大部分处理是和用户代码并行的** 。\n\nGC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：\n\n1. Mark:\n\t* Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 **这个过程需要STW**\n\t* GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 **该过程后台并行执行**\n\n2. Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 **这个过程也是会STW的。**\n\n3. Sweep: 按照标记结果回收所有的白色对象， **该过程后台并行执行**\n\n4. Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？\n\n\n## 写屏障(Write Barrier)\n写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。\n\n\n## 辅助GC\n从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码-->⼤段GC-->⽤户代码”，那么分散以后实际上变成了“⽤户代码-->⼩段 GC-->⽤户代码-->⼩段GC-->⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。\n\n\n## 如何进行GC调优\n衡量GC对程序的影响可以参考这篇文章， [Go 程序的性能调试问题](https://www.oschina.net/translate/debugging-performance-issues-in-go-programs) 。\n\n减少对象的分配，合理重复利用； 避免string与[]byte转化；\n\n> 两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  \n\n少量使用+连接 string；\n\n> Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  \n\n\n## GC触发条件\n自动垃圾回收的触发条件有两个：\n\n1. 超过内存大小阈值\n2. 达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。\n\n## 最后\n虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用`runtime.GC()`触发GC。\n\n参考：\n\n[string讨论](https://gocn.vip/question/265)\n\n[Go语言——垃圾回收GC](https://www.jianshu.com/p/8b0c0f7772da)\n\n[Golang 垃圾回收剖析](https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ)\n\n[Golang垃圾回收机制详解](https://blog.csdn.net/u010649766/article/details/80582153)\n\n[go垃圾回收概要](https://lihaoquan.me/2016/11/3/go-gc-general.html)\n\n[常见GC算法及Golang GC](https://wudaijun.com/2017/12/gc-study/)\n\n[搞懂Go垃圾回收](https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com%3Futm_campaign%3Dstudygolang.com&utm_source=studygolang.com)\n","source":"_posts/技术/go垃圾回收.md","raw":"---\ntitle: go垃圾回收\ncategories:\n  - 开发\ntags:\n  - golang\n  - 内存管理\ndate: 2020-12-01 13:10:16\n---\n# 搞懂Go垃圾回收\n本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。\n\n\n## 什么是垃圾回收\n垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 [维基百科](https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29)\n\n简单地说， **垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。**\n\n\n## go的垃圾回收\n当前Golang使用的垃圾回收机制是 **三色标记发** 配合 **写屏障** 和 **辅助GC** ，三色标记法是 **标记-清除法** 的一种增强版本。\n\n\n### 标记清除法(mark and sweep)\n原始的标记清楚法分为两个步骤：\n\n1. 标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记\n2. 清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。\n\n这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。\n\n\n### 三色标记法\n三色标记法是对标记阶段的改进，原理如下：\n\n1. 初始状态所有对象都是白色。\n2. 从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）\n\n> 那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  \n\n![](assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png)\n\n1. 分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）\n2. 重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。\n\n也可以参考下面的动图辅助理解：\n\n![](assets/16c9abaa4032c7ea.gif)\n\n\n## Go GC如何工作\n上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 **Golang GC的大部分处理是和用户代码并行的** 。\n\nGC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：\n\n1. Mark:\n\t* Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 **这个过程需要STW**\n\t* GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 **该过程后台并行执行**\n\n2. Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 **这个过程也是会STW的。**\n\n3. Sweep: 按照标记结果回收所有的白色对象， **该过程后台并行执行**\n\n4. Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？\n\n\n## 写屏障(Write Barrier)\n写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。\n\n\n## 辅助GC\n从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码-->⼤段GC-->⽤户代码”，那么分散以后实际上变成了“⽤户代码-->⼩段 GC-->⽤户代码-->⼩段GC-->⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。\n\n\n## 如何进行GC调优\n衡量GC对程序的影响可以参考这篇文章， [Go 程序的性能调试问题](https://www.oschina.net/translate/debugging-performance-issues-in-go-programs) 。\n\n减少对象的分配，合理重复利用； 避免string与[]byte转化；\n\n> 两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  \n\n少量使用+连接 string；\n\n> Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  \n\n\n## GC触发条件\n自动垃圾回收的触发条件有两个：\n\n1. 超过内存大小阈值\n2. 达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。\n\n## 最后\n虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用`runtime.GC()`触发GC。\n\n参考：\n\n[string讨论](https://gocn.vip/question/265)\n\n[Go语言——垃圾回收GC](https://www.jianshu.com/p/8b0c0f7772da)\n\n[Golang 垃圾回收剖析](https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ)\n\n[Golang垃圾回收机制详解](https://blog.csdn.net/u010649766/article/details/80582153)\n\n[go垃圾回收概要](https://lihaoquan.me/2016/11/3/go-gc-general.html)\n\n[常见GC算法及Golang GC](https://wudaijun.com/2017/12/gc-study/)\n\n[搞懂Go垃圾回收](https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com%3Futm_campaign%3Dstudygolang.com&utm_source=studygolang.com)\n","slug":"技术/go垃圾回收","published":1,"updated":"2020-12-01T05:11:48.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5ixzji0001qjpw91u33nz6","content":"<h1 id=\"搞懂Go垃圾回收\"><a href=\"#搞懂Go垃圾回收\" class=\"headerlink\" title=\"搞懂Go垃圾回收\"></a>搞懂Go垃圾回收</h1><p>本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。</p>\n<h2 id=\"什么是垃圾回收\"><a href=\"#什么是垃圾回收\" class=\"headerlink\" title=\"什么是垃圾回收\"></a>什么是垃圾回收</h2><p>垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29\">维基百科</a></p>\n<p>简单地说， <strong>垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。</strong></p>\n<h2 id=\"go的垃圾回收\"><a href=\"#go的垃圾回收\" class=\"headerlink\" title=\"go的垃圾回收\"></a>go的垃圾回收</h2><p>当前Golang使用的垃圾回收机制是 <strong>三色标记发</strong> 配合 <strong>写屏障</strong> 和 <strong>辅助GC</strong> ，三色标记法是 <strong>标记-清除法</strong> 的一种增强版本。</p>\n<h3 id=\"标记清除法-mark-and-sweep\"><a href=\"#标记清除法-mark-and-sweep\" class=\"headerlink\" title=\"标记清除法(mark and sweep)\"></a>标记清除法(mark and sweep)</h3><p>原始的标记清楚法分为两个步骤：</p>\n<ol>\n<li>标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记</li>\n<li>清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。</li>\n</ol>\n<p>这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。</p>\n<h3 id=\"三色标记法\"><a href=\"#三色标记法\" class=\"headerlink\" title=\"三色标记法\"></a>三色标记法</h3><p>三色标记法是对标记阶段的改进，原理如下：</p>\n<ol>\n<li>初始状态所有对象都是白色。</li>\n<li>从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）</li>\n</ol>\n<blockquote>\n<p>那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  </p>\n</blockquote>\n<p><img src=\"assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png\"></p>\n<ol>\n<li>分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）</li>\n<li>重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。</li>\n</ol>\n<p>也可以参考下面的动图辅助理解：</p>\n<p><img src=\"assets/16c9abaa4032c7ea.gif\"></p>\n<h2 id=\"Go-GC如何工作\"><a href=\"#Go-GC如何工作\" class=\"headerlink\" title=\"Go GC如何工作\"></a>Go GC如何工作</h2><p>上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 <strong>Golang GC的大部分处理是和用户代码并行的</strong> 。</p>\n<p>GC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：</p>\n<ol>\n<li><p>Mark:</p>\n<ul>\n<li>Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 <strong>这个过程需要STW</strong></li>\n<li>GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 <strong>该过程后台并行执行</strong></li>\n</ul>\n</li>\n<li><p>Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 <strong>这个过程也是会STW的。</strong></p>\n</li>\n<li><p>Sweep: 按照标记结果回收所有的白色对象， <strong>该过程后台并行执行</strong></p>\n</li>\n<li><p>Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？</p>\n</li>\n</ol>\n<h2 id=\"写屏障-Write-Barrier\"><a href=\"#写屏障-Write-Barrier\" class=\"headerlink\" title=\"写屏障(Write Barrier)\"></a>写屏障(Write Barrier)</h2><p>写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。</p>\n<h2 id=\"辅助GC\"><a href=\"#辅助GC\" class=\"headerlink\" title=\"辅助GC\"></a>辅助GC</h2><p>从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码–&gt;⼤段GC–&gt;⽤户代码”，那么分散以后实际上变成了“⽤户代码–&gt;⼩段 GC–&gt;⽤户代码–&gt;⼩段GC–&gt;⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。</p>\n<h2 id=\"如何进行GC调优\"><a href=\"#如何进行GC调优\" class=\"headerlink\" title=\"如何进行GC调优\"></a>如何进行GC调优</h2><p>衡量GC对程序的影响可以参考这篇文章， <a href=\"https://www.oschina.net/translate/debugging-performance-issues-in-go-programs\">Go 程序的性能调试问题</a> 。</p>\n<p>减少对象的分配，合理重复利用； 避免string与[]byte转化；</p>\n<blockquote>\n<p>两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  </p>\n</blockquote>\n<p>少量使用+连接 string；</p>\n<blockquote>\n<p>Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  </p>\n</blockquote>\n<h2 id=\"GC触发条件\"><a href=\"#GC触发条件\" class=\"headerlink\" title=\"GC触发条件\"></a>GC触发条件</h2><p>自动垃圾回收的触发条件有两个：</p>\n<ol>\n<li>超过内存大小阈值</li>\n<li>达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用<code>runtime.GC()</code>触发GC。</p>\n<p>参考：</p>\n<p><a href=\"https://gocn.vip/question/265\">string讨论</a></p>\n<p><a href=\"https://www.jianshu.com/p/8b0c0f7772da\">Go语言——垃圾回收GC</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ\">Golang 垃圾回收剖析</a></p>\n<p><a href=\"https://blog.csdn.net/u010649766/article/details/80582153\">Golang垃圾回收机制详解</a></p>\n<p><a href=\"https://lihaoquan.me/2016/11/3/go-gc-general.html\">go垃圾回收概要</a></p>\n<p><a href=\"https://wudaijun.com/2017/12/gc-study/\">常见GC算法及Golang GC</a></p>\n<p><a href=\"https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com?utm_campaign=studygolang.com&utm_source=studygolang.com\">搞懂Go垃圾回收</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<h1 id=\"搞懂Go垃圾回收\"><a href=\"#搞懂Go垃圾回收\" class=\"headerlink\" title=\"搞懂Go垃圾回收\"></a>搞懂Go垃圾回收</h1><p>本文主要介绍了垃圾回收的概念，Golang GC的垃圾回收算法和工作原理，看完本文可以让你对Golang垃圾回收机制有个全面的理解。由于本人不了解其他语言的GC，并未对比其他语言的垃圾回收算法，需要的可以自行Google。</p>\n<h2 id=\"什么是垃圾回收\"><a href=\"#什么是垃圾回收\" class=\"headerlink\" title=\"什么是垃圾回收\"></a>什么是垃圾回收</h2><p>垃圾回收（英语：Garbage Collection，缩写为GC），在计算机科学中是一种自动的存储器管理机制。当一个计算机上的动态存储器不再需要时，就应该予以释放，以让出存储器，这种存储器资源管理，称为垃圾回收。垃圾回收器可以让程序员减轻许多负担，也减少程序员犯错的机会。来自 <a href=\"https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_%28%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8%29\">维基百科</a></p>\n<p>简单地说， <strong>垃圾回收(GC)是在后台运行一个守护线程，它的作用是在监控各个对象的状态，识别并且丢弃不再使用的对象来释放和重用资源。</strong></p>\n<h2 id=\"go的垃圾回收\"><a href=\"#go的垃圾回收\" class=\"headerlink\" title=\"go的垃圾回收\"></a>go的垃圾回收</h2><p>当前Golang使用的垃圾回收机制是 <strong>三色标记发</strong> 配合 <strong>写屏障</strong> 和 <strong>辅助GC</strong> ，三色标记法是 <strong>标记-清除法</strong> 的一种增强版本。</p>\n<h3 id=\"标记清除法-mark-and-sweep\"><a href=\"#标记清除法-mark-and-sweep\" class=\"headerlink\" title=\"标记清除法(mark and sweep)\"></a>标记清除法(mark and sweep)</h3><p>原始的标记清楚法分为两个步骤：</p>\n<ol>\n<li>标记。先STP(Stop The World)，暂停整个程序的全部运行线程，将被引用的对象打上标记</li>\n<li>清除没有被打标机的对象，即回收内存资源，然后恢复运行线程。</li>\n</ol>\n<p>这样做有个很大的问题就是要通过STW保证GC期间标记对象的状态不能变化，整个程序都要暂停掉，在外部看来程序就会卡顿。</p>\n<h3 id=\"三色标记法\"><a href=\"#三色标记法\" class=\"headerlink\" title=\"三色标记法\"></a>三色标记法</h3><p>三色标记法是对标记阶段的改进，原理如下：</p>\n<ol>\n<li>初始状态所有对象都是白色。</li>\n<li>从root根出发扫描所有根对象（下图a,b），将他们引用的对象标记为灰色（图中A，B）</li>\n</ol>\n<blockquote>\n<p>那么什么是root呢？ 看了很多文章都没解释这这个概念，在这儿说明下：root区域主要是程序运行到当前时刻的栈和全局数据区域。  </p>\n</blockquote>\n<p><img src=\"assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png\"></p>\n<ol>\n<li>分析灰色对象是否引用了其他对象。如果没有引用其它对象则将该灰色对象标记为黑色（上图中A）；如果有引用则将它变为黑色的同时将它引用的对象也变为灰色（上图中B引用了D）</li>\n<li>重复步骤3，直到灰色对象队列为空。此时白色对象即为垃圾，进行回收。</li>\n</ol>\n<p>也可以参考下面的动图辅助理解：</p>\n<p><img src=\"assets/16c9abaa4032c7ea.gif\"></p>\n<h2 id=\"Go-GC如何工作\"><a href=\"#Go-GC如何工作\" class=\"headerlink\" title=\"Go GC如何工作\"></a>Go GC如何工作</h2><p>上面介绍的是GO GC采用的三色标记算法，但是好像并没有体现出来怎么减少STW对程序的影响呢？其实是因为 <strong>Golang GC的大部分处理是和用户代码并行的</strong> 。</p>\n<p>GC期间用户代码可能会改变某些对象的状态，如何实现GC和用户代码并行呢？先看下GC工作的完整流程：</p>\n<ol>\n<li><p>Mark:</p>\n<ul>\n<li>Mark Prepare: 初始化GC任务，包括开启写屏障(write barrier)和辅助GC(mutator assist)，统计root对象的任务数量等。 <strong>这个过程需要STW</strong></li>\n<li>GC Drains: 扫描所有root对象，包括全局指针和goroutine(G)栈上的指针（扫描对应G栈时需停止该G)，将其加入标记队列(灰色队列)，并循环处理灰色队列的对象，直到灰色队列为空。 <strong>该过程后台并行执行</strong></li>\n</ul>\n</li>\n<li><p>Mark Termination: 完成标记工作，重新扫描(re-scan)全局指针和栈。因为Mark和用户程序是并行的，所以在Mark过程中可能会有新的对象分配和指针赋值，这个时候就需要通过写屏障（write barrier）记录下来，re-scan 再检查一下。 <strong>这个过程也是会STW的。</strong></p>\n</li>\n<li><p>Sweep: 按照标记结果回收所有的白色对象， <strong>该过程后台并行执行</strong></p>\n</li>\n<li><p>Sweep Termination: 对未清扫的span进行清扫, 只有上一轮的GC的清扫工作完成才可以开始新一轮的GC。 如果标记期间用户逻辑改变了刚打完标记的对象的引用状态，怎么办呢？</p>\n</li>\n</ol>\n<h2 id=\"写屏障-Write-Barrier\"><a href=\"#写屏障-Write-Barrier\" class=\"headerlink\" title=\"写屏障(Write Barrier)\"></a>写屏障(Write Barrier)</h2><p>写屏障：该屏障之前的写操作和之后的写操作相比，先被系统其它组件感知。 好难懂哦，结合上面GC工作的完整流程就好理解了，就是在每一轮GC开始时会初始化一个叫做“屏障”的东西，然后由它记录第一次scan时各个对象的状态，以便和第二次re-scan进行比对，引用状态变化的对象被标记为灰色以防止丢失，将屏障前后状态未变化对象继续处理。</p>\n<h2 id=\"辅助GC\"><a href=\"#辅助GC\" class=\"headerlink\" title=\"辅助GC\"></a>辅助GC</h2><p>从上面的GC工作的完整流程可以看出Golang GC实际上把单次暂停时间分散掉了，本来程序执⾏可能是“⽤户代码–&gt;⼤段GC–&gt;⽤户代码”，那么分散以后实际上变成了“⽤户代码–&gt;⼩段 GC–&gt;⽤户代码–&gt;⼩段GC–&gt;⽤户代码”这样。如果GC回收的速度跟不上用户代码分配对象的速度呢？ Go 语⾔如果发现扫描后回收的速度跟不上分配的速度它依然会把⽤户逻辑暂停，⽤户逻辑暂停了以后也就意味着不会有新的对象出现，同时会把⽤户线程抢过来加⼊到垃圾回收⾥⾯加快垃圾回收的速度。这样⼀来原来的并发还是变成了STW，还是得把⽤户线程暂停掉，要不然扫描和回收没完没了了停不下来，因为新分配对象⽐回收快，所以这种东⻄叫做辅助回收。</p>\n<h2 id=\"如何进行GC调优\"><a href=\"#如何进行GC调优\" class=\"headerlink\" title=\"如何进行GC调优\"></a>如何进行GC调优</h2><p>衡量GC对程序的影响可以参考这篇文章， <a href=\"https://www.oschina.net/translate/debugging-performance-issues-in-go-programs\">Go 程序的性能调试问题</a> 。</p>\n<p>减少对象的分配，合理重复利用； 避免string与[]byte转化；</p>\n<blockquote>\n<p>两者发生转换的时候，底层数据结结构会进行复制，因此导致 gc 效率会变低。  </p>\n</blockquote>\n<p>少量使用+连接 string；</p>\n<blockquote>\n<p>Go里面string是最基础的类型，是一个只读类型，针对他的每一个操作都会创建一个新的string。 如果是少量小文本拼接，用 “+” 就好；如果是大量小文本拼接，用 strings.Join；如果是大量大文本拼接，用 bytes.Buffer。  </p>\n</blockquote>\n<h2 id=\"GC触发条件\"><a href=\"#GC触发条件\" class=\"headerlink\" title=\"GC触发条件\"></a>GC触发条件</h2><p>自动垃圾回收的触发条件有两个：</p>\n<ol>\n<li>超过内存大小阈值</li>\n<li>达到定时时间 阈值是由一个gcpercent的变量控制的,当新分配的内存占已在使用中的内存的比例超过gcprecent时就会触发。比如一次回收完毕后，内存的使用量为5M，那么下次回收的时机则是内存分配达到10M的时候。也就是说，并不是内存分配越多，垃圾回收频率越高。 如果一直达不到内存大小的阈值呢？这个时候GC就会被定时时间触发，比如一直达不到10M，那就定时（默认2min触发一次）触发一次GC保证资源的回收。</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>虽然Golang有自动垃圾回收机制，但是GC不是万能的，最好还是养成手动回收内存的习惯：比如手动把不再使用的内存释放，把对象置成nil，也可以考虑在合适的时候调用<code>runtime.GC()</code>触发GC。</p>\n<p>参考：</p>\n<p><a href=\"https://gocn.vip/question/265\">string讨论</a></p>\n<p><a href=\"https://www.jianshu.com/p/8b0c0f7772da\">Go语言——垃圾回收GC</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/Wh7A6czDIRofxveY_bEDNQ\">Golang 垃圾回收剖析</a></p>\n<p><a href=\"https://blog.csdn.net/u010649766/article/details/80582153\">Golang垃圾回收机制详解</a></p>\n<p><a href=\"https://lihaoquan.me/2016/11/3/go-gc-general.html\">go垃圾回收概要</a></p>\n<p><a href=\"https://wudaijun.com/2017/12/gc-study/\">常见GC算法及Golang GC</a></p>\n<p><a href=\"https://juejin.cn/post/6844903917650722829?utm_campaign=studygolang.com&utm_medium=studygolang.com&utm_medium=studygolang.com&utm_source=studygolang.com?utm_campaign=studygolang.com&utm_source=studygolang.com\">搞懂Go垃圾回收</a></p>\n"},{"title":"go逃逸分析与栈、堆分配分析","date":"2020-12-01T05:19:18.000Z","_content":"# golang 逃逸分析与栈、堆分配分析\n我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。\n\n还是从实际使用场景出发：\n\n## Question\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？\n\n## 什么是堆？什么是栈？\n\n简单说：\n\n* 堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多\n* 栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上\n\n今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点\n\n## 逃逸分析\n\n逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。\n\n通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：\n\n* 是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上\n* 即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上\n\n对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。\n\n## 在什么阶段确立逃逸\n\ngo 在编译阶段确立逃逸，注意并不是在运行时\n\n## 为什么需要逃逸\n\n其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：\n\n* 垃圾回收（GC）的压力不断增大\n* 申请、分配、回收内存的系统开销增大（相对于栈）\n* 动态分配产生一定量的内存碎片\n\n其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？\n\n## go怎么确定是否逃逸\n\n可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：\n\n* -m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了\n* -l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰\n\n`$ go build -gcflags '-m -l' main.go`\n\n\n## 第二：反编译命令查看\n\n`$ go tool compile -S main.go`\n\n注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数\n\n### 实际案例\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n看编译器命令执行结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis.go \n# command-line-arguments\n./escape_analysis.go:13:11: &User literal escapes to heap\n```\n\n通过查看分析结果，可得知 &User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：\n\n```bash\n$go tool compile -S escape_analysis.go       \n\n\"\".GetUserInfo STEXT size=190 args=0x8 locals=0x18\n\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t\"\".GetUserInfo(SB), ABIInternal, $24-8\n\t......\n\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)\n\t......\n\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156\n\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.\"sim lou\"(SB), CX\n\t......\n\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132\n\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.\"https://www.baidu.com/avatar/666666\"(SB), CX\n\t......\n```\n\n执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。\n\n那么所有的指针都在堆上？也不是：\n\n```go\nfunc PrintStr()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n}\n\nfunc main()  {\n\tPrintStr()\n}\n```\n\n看编译器逃逸分析的结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis3.go             \n# command-line-arguments\n./escape_analysis3.go:4:12: PrintStr new(string) does not escape\n```\n\n看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。\n\n### 不确定类型\n\n```go\nfunc main()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n\tfmt.Println(*str)\n}\n```\n\n执行命令观察一下，如下：\n\n```\n$go build -gcflags '-m -l' escape_analysis4.go\n# command-line-arguments\n./escape_analysis4.go:6:12: main new(string) does not escape\n./escape_analysis4.go:8:13: main ... argument does not escape\n./escape_analysis4.go:8:14: *str escapes to heap\n```\n\n通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？\n\n相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：\n`func Println(a ...interface{}) (n int, err error)`\n\n通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。\n\n如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。\n\n## 总结\n\n* 静态分配到栈上，性能一定比动态分配到堆上好\n* 底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心\n* 每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）\n* 直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果\n* 到处都用指针传递并不一定是最好的，要用对。\n\n[golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈](https://blog.csdn.net/u010853261/article/details/102846449#_34)\n","source":"_posts/技术/go逃逸分析与栈、堆分配分析.md","raw":"---\ntitle: go逃逸分析与栈、堆分配分析\ncategories:\n  - 开发\ntags:\n  - golang\n  - 内存管理\ndate: 2020-12-01 13:19:18\n---\n# golang 逃逸分析与栈、堆分配分析\n我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。\n\n还是从实际使用场景出发：\n\n## Question\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？\n\n## 什么是堆？什么是栈？\n\n简单说：\n\n* 堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多\n* 栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上\n\n今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点\n\n## 逃逸分析\n\n逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。\n\n通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：\n\n* 是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上\n* 即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上\n\n对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。\n\n## 在什么阶段确立逃逸\n\ngo 在编译阶段确立逃逸，注意并不是在运行时\n\n## 为什么需要逃逸\n\n其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：\n\n* 垃圾回收（GC）的压力不断增大\n* 申请、分配、回收内存的系统开销增大（相对于栈）\n* 动态分配产生一定量的内存碎片\n\n其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？\n\n## go怎么确定是否逃逸\n\n可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：\n\n* -m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了\n* -l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰\n\n`$ go build -gcflags '-m -l' main.go`\n\n\n## 第二：反编译命令查看\n\n`$ go tool compile -S main.go`\n\n注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数\n\n### 实际案例\n\n```go\npackage main\n\ntype User struct {\n\tID     int64\n\tName   string\n\tAvatar string\n}\n\nfunc GetUserInfo() *User {\n\treturn &User{\n\t\tID: 666666,\n\t\tName: \"sim lou\",\n\t\tAvatar: \"https://www.baidu.com/avatar/666666\",\n\t}\n}\n\nfunc main()  {\n\tu := GetUserInfo()\n\tprintln(u.Name)\n}\n```\n\n看编译器命令执行结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis.go \n# command-line-arguments\n./escape_analysis.go:13:11: &User literal escapes to heap\n```\n\n通过查看分析结果，可得知 &User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：\n\n```bash\n$go tool compile -S escape_analysis.go       \n\n\"\".GetUserInfo STEXT size=190 args=0x8 locals=0x18\n\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t\"\".GetUserInfo(SB), ABIInternal, $24-8\n\t......\n\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)\n\t......\n\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156\n\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.\"sim lou\"(SB), CX\n\t......\n\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), $0\n\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132\n\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.\"https://www.baidu.com/avatar/666666\"(SB), CX\n\t......\n```\n\n执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。\n\n那么所有的指针都在堆上？也不是：\n\n```go\nfunc PrintStr()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n}\n\nfunc main()  {\n\tPrintStr()\n}\n```\n\n看编译器逃逸分析的结果：\n\n```bash\n$go build -gcflags '-m -l' escape_analysis3.go             \n# command-line-arguments\n./escape_analysis3.go:4:12: PrintStr new(string) does not escape\n```\n\n看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。\n\n### 不确定类型\n\n```go\nfunc main()  {\n\tstr := new(string)\n\t*str = \"hello world\"\n\tfmt.Println(*str)\n}\n```\n\n执行命令观察一下，如下：\n\n```\n$go build -gcflags '-m -l' escape_analysis4.go\n# command-line-arguments\n./escape_analysis4.go:6:12: main new(string) does not escape\n./escape_analysis4.go:8:13: main ... argument does not escape\n./escape_analysis4.go:8:14: *str escapes to heap\n```\n\n通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？\n\n相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：\n`func Println(a ...interface{}) (n int, err error)`\n\n通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。\n\n如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。\n\n## 总结\n\n* 静态分配到栈上，性能一定比动态分配到堆上好\n* 底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心\n* 每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）\n* 直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果\n* 到处都用指针传递并不一定是最好的，要用对。\n\n[golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈](https://blog.csdn.net/u010853261/article/details/102846449#_34)\n","slug":"技术/go逃逸分析与栈、堆分配分析","published":1,"updated":"2020-12-01T05:20:00.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki5j8mct0000umpw7im5h74b","content":"<h1 id=\"golang-逃逸分析与栈、堆分配分析\"><a href=\"#golang-逃逸分析与栈、堆分配分析\" class=\"headerlink\" title=\"golang 逃逸分析与栈、堆分配分析\"></a>golang 逃逸分析与栈、堆分配分析</h1><p>我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。</p>\n<p>还是从实际使用场景出发：</p>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？</p>\n<h2 id=\"什么是堆？什么是栈？\"><a href=\"#什么是堆？什么是栈？\" class=\"headerlink\" title=\"什么是堆？什么是栈？\"></a>什么是堆？什么是栈？</h2><p>简单说：</p>\n<ul>\n<li>堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多</li>\n<li>栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上</li>\n</ul>\n<p>今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点</p>\n<h2 id=\"逃逸分析\"><a href=\"#逃逸分析\" class=\"headerlink\" title=\"逃逸分析\"></a>逃逸分析</h2><p>逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。</p>\n<p>通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：</p>\n<ul>\n<li>是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上</li>\n<li>即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上</li>\n</ul>\n<p>对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p>\n<h2 id=\"在什么阶段确立逃逸\"><a href=\"#在什么阶段确立逃逸\" class=\"headerlink\" title=\"在什么阶段确立逃逸\"></a>在什么阶段确立逃逸</h2><p>go 在编译阶段确立逃逸，注意并不是在运行时</p>\n<h2 id=\"为什么需要逃逸\"><a href=\"#为什么需要逃逸\" class=\"headerlink\" title=\"为什么需要逃逸\"></a>为什么需要逃逸</h2><p>其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：</p>\n<ul>\n<li>垃圾回收（GC）的压力不断增大</li>\n<li>申请、分配、回收内存的系统开销增大（相对于栈）</li>\n<li>动态分配产生一定量的内存碎片</li>\n</ul>\n<p>其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？</p>\n<h2 id=\"go怎么确定是否逃逸\"><a href=\"#go怎么确定是否逃逸\" class=\"headerlink\" title=\"go怎么确定是否逃逸\"></a>go怎么确定是否逃逸</h2><p>可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：</p>\n<ul>\n<li>-m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了</li>\n<li>-l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰</li>\n</ul>\n<p><code>$ go build -gcflags &#39;-m -l&#39; main.go</code></p>\n<h2 id=\"第二：反编译命令查看\"><a href=\"#第二：反编译命令查看\" class=\"headerlink\" title=\"第二：反编译命令查看\"></a>第二：反编译命令查看</h2><p><code>$ go tool compile -S main.go</code></p>\n<p>注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数</p>\n<h3 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看编译器命令执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis.go </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis.go:13:11: &amp;User literal escapes to heap</span><br></pre></td></tr></table></figure>\n\n<p>通过查看分析结果，可得知 &amp;User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> tool compile -S escape_analysis.go       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.GetUserInfo STEXT size=190 args=0x8 locals=0x18</span><br><span class=\"line\">\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t<span class=\"string\">&quot;&quot;</span>.GetUserInfo(SB), ABIInternal, <span class=\"variable\">$24</span>-8</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156</span><br><span class=\"line\">\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.<span class=\"string\">&quot;sim lou&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132</span><br><span class=\"line\">\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.<span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br></pre></td></tr></table></figure>\n\n<p>执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。</p>\n<p>那么所有的指针都在堆上？也不是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PrintStr</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tPrintStr()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看编译器逃逸分析的结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis3.go             </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis3.go:4:12: PrintStr new(string) does not escape</span><br></pre></td></tr></table></figure>\n\n<p>看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。</p>\n<h3 id=\"不确定类型\"><a href=\"#不确定类型\" class=\"headerlink\" title=\"不确定类型\"></a>不确定类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\tfmt.Println(*str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令观察一下，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$go build -gcflags &#39;-m -l&#39; escape_analysis4.go</span><br><span class=\"line\"># command-line-arguments</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:6:12: main new(string) does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:13: main ... argument does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:14: *str escapes to heap</span><br></pre></td></tr></table></figure>\n\n<p>通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？</p>\n<p>相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：<br><code>func Println(a ...interface&#123;&#125;) (n int, err error)</code></p>\n<p>通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。</p>\n<p>如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>静态分配到栈上，性能一定比动态分配到堆上好</li>\n<li>底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心</li>\n<li>每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）</li>\n<li>直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果</li>\n<li>到处都用指针传递并不一定是最好的，要用对。</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/u010853261/article/details/102846449#_34\">golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈</a></p>\n","site":{"data":{"projects":[{"name":"rss-epub","url":"https://github.com/gonejack/rss-epub","desc":"Archive RSS feeds to epub books."}]}},"excerpt":"","more":"<h1 id=\"golang-逃逸分析与栈、堆分配分析\"><a href=\"#golang-逃逸分析与栈、堆分配分析\" class=\"headerlink\" title=\"golang 逃逸分析与栈、堆分配分析\"></a>golang 逃逸分析与栈、堆分配分析</h1><p>我们在写 golang 代码时候定义变量，那么一个很常见的问题，申请的变量保存在哪里呢？栈？还是堆？会不会有一些特殊例子？这篇文章我们就来探索下具体的case以及如何做分析。</p>\n<p>还是从实际使用场景出发：</p>\n<h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里GetUserInfo 函数里面的 User 对象是存储在函数栈上还是堆上？</p>\n<h2 id=\"什么是堆？什么是栈？\"><a href=\"#什么是堆？什么是栈？\" class=\"headerlink\" title=\"什么是堆？什么是栈？\"></a>什么是堆？什么是栈？</h2><p>简单说：</p>\n<ul>\n<li>堆：一般来讲是人为手动进行管理，手动申请、分配、释放。一般所涉及的内存大小并不定，一般会存放较大的对象。另外其分配相对慢，涉及到的指令动作也相对多</li>\n<li>栈：由编译器进行管理，自动申请、分配、释放。一般不会太大，我们常见的函数参数（不同平台允许存放的数量不同），局部变量等等都会存放在栈上</li>\n</ul>\n<p>今天我们介绍的 Go 语言，它的堆栈分配是通过 Compiler 进行分析，GC 去管理的，而对其的分析选择动作就是今天探讨的重点</p>\n<h2 id=\"逃逸分析\"><a href=\"#逃逸分析\" class=\"headerlink\" title=\"逃逸分析\"></a>逃逸分析</h2><p>逃逸分析是一种确定指针动态范围的方法，简单来说就是分析在程序的哪些地方可以访问到该指针。</p>\n<p>通俗地讲，逃逸分析就是确定一个变量要放堆上还是栈上，规则如下：</p>\n<ul>\n<li>是否有在其他地方（非局部）被引用。只要有可能被引用了，那么它一定分配到堆上。否则分配到栈上</li>\n<li>即使没有被外部引用，但对象过大，无法存放在栈区上。依然有可能分配到堆上</li>\n</ul>\n<p>对此你可以理解为，逃逸分析是编译器用于决定变量分配到堆上还是栈上的一种行为。</p>\n<h2 id=\"在什么阶段确立逃逸\"><a href=\"#在什么阶段确立逃逸\" class=\"headerlink\" title=\"在什么阶段确立逃逸\"></a>在什么阶段确立逃逸</h2><p>go 在编译阶段确立逃逸，注意并不是在运行时</p>\n<h2 id=\"为什么需要逃逸\"><a href=\"#为什么需要逃逸\" class=\"headerlink\" title=\"为什么需要逃逸\"></a>为什么需要逃逸</h2><p>其实就是为了尽可能在栈上分配内存，我们可以反过来想，如果变量都分配到堆上了会出现什么事情？例如：</p>\n<ul>\n<li>垃圾回收（GC）的压力不断增大</li>\n<li>申请、分配、回收内存的系统开销增大（相对于栈）</li>\n<li>动态分配产生一定量的内存碎片</li>\n</ul>\n<p>其实总的来说，就是频繁申请、分配堆内存是有一定 “代价” 的。会影响应用程序运行的效率，间接影响到整体系统。因此 “按需分配” 最大限度的灵活利用资源，才是正确的治理之道。这就是为什么需要逃逸分析的原因，你觉得呢？</p>\n<h2 id=\"go怎么确定是否逃逸\"><a href=\"#go怎么确定是否逃逸\" class=\"headerlink\" title=\"go怎么确定是否逃逸\"></a>go怎么确定是否逃逸</h2><p>可以看到详细的逃逸分析过程。而指令集 -gcflags 用于将标识参数传递给 Go 编译器，涉及如下：</p>\n<ul>\n<li>-m 会打印出逃逸分析的优化策略，实际上最多总共可以用 4 个 -m，但是信息量较大，一般用 1 个就可以了</li>\n<li>-l 会禁用函数内联，在这里禁用掉 inline 能更好的观察逃逸情况，减少干扰</li>\n</ul>\n<p><code>$ go build -gcflags &#39;-m -l&#39; main.go</code></p>\n<h2 id=\"第二：反编译命令查看\"><a href=\"#第二：反编译命令查看\" class=\"headerlink\" title=\"第二：反编译命令查看\"></a>第二：反编译命令查看</h2><p><code>$ go tool compile -S main.go</code></p>\n<p>注：可以通过 go tool compile -help 查看所有允许传递给编译器的标识参数</p>\n<h3 id=\"实际案例\"><a href=\"#实际案例\" class=\"headerlink\" title=\"实际案例\"></a>实际案例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID     <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tName   <span class=\"keyword\">string</span></span><br><span class=\"line\">\tAvatar <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserInfo</span><span class=\"params\">()</span> *<span class=\"title\">User</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;User&#123;</span><br><span class=\"line\">\t\tID: <span class=\"number\">666666</span>,</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;sim lou&quot;</span>,</span><br><span class=\"line\">\t\tAvatar: <span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tu := GetUserInfo()</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(u.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看编译器命令执行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis.go </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis.go:13:11: &amp;User literal escapes to heap</span><br></pre></td></tr></table></figure>\n\n<p>通过查看分析结果，可得知 &amp;User 逃到了堆里，也就是分配到堆上了。这是不是有问题啊…再看看汇编代码确定一下，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> tool compile -S escape_analysis.go       </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.GetUserInfo STEXT size=190 args=0x8 locals=0x18</span><br><span class=\"line\">\t0x0000 00000 (escape_analysis.go:9)\tTEXT\t<span class=\"string\">&quot;&quot;</span>.GetUserInfo(SB), ABIInternal, <span class=\"variable\">$24</span>-8</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x002c 00044 (escape_analysis.go:13)\tCALL\truntime.newobject(SB)</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0045 00069 (escape_analysis.go:12)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x004c 00076 (escape_analysis.go:12)\tJNE\t156</span><br><span class=\"line\">\t0x004e 00078 (escape_analysis.go:12)\tLEAQ\tgo.string.<span class=\"string\">&quot;sim lou&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t0x0061 00097 (escape_analysis.go:13)\tCMPL\truntime.writeBarrier(SB), <span class=\"variable\">$0</span></span><br><span class=\"line\">\t0x0068 00104 (escape_analysis.go:13)\tJNE\t132</span><br><span class=\"line\">\t0x006a 00106 (escape_analysis.go:13)\tLEAQ\tgo.string.<span class=\"string\">&quot;https://www.baidu.com/avatar/666666&quot;</span>(SB), CX</span><br><span class=\"line\">\t......</span><br></pre></td></tr></table></figure>\n\n<p>执行了 runtime.newobject 方法，也就是确实是分配到了堆上。这是为什么呢？这是因为 GetUserInfo() 返回的是指针对象，引用被返回到了方法之外了。因此编译器会把该对象分配到堆上，而不是栈上。否则方法结束之后，局部变量就被回收了，岂不是翻车。所以最终分配到堆上是理所当然的。</p>\n<p>那么所有的指针都在堆上？也不是：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PrintStr</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tPrintStr()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看编译器逃逸分析的结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> build -gcflags <span class=\"string\">&#x27;-m -l&#x27;</span> escape_analysis3.go             </span><br><span class=\"line\"><span class=\"comment\"># command-line-arguments</span></span><br><span class=\"line\">./escape_analysis3.go:4:12: PrintStr new(string) does not escape</span><br></pre></td></tr></table></figure>\n\n<p>看，该对象分配到栈上了。很核心的一点就是它有没有被作用域之外所引用，而这里作用域仍然保留在 main 中，因此它没有发生逃逸。</p>\n<h3 id=\"不确定类型\"><a href=\"#不确定类型\" class=\"headerlink\" title=\"不确定类型\"></a>不确定类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tstr := <span class=\"built_in\">new</span>(<span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t*str = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">\tfmt.Println(*str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行命令观察一下，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$go build -gcflags &#39;-m -l&#39; escape_analysis4.go</span><br><span class=\"line\"># command-line-arguments</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:6:12: main new(string) does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:13: main ... argument does not escape</span><br><span class=\"line\">.&#x2F;escape_analysis4.go:8:14: *str escapes to heap</span><br></pre></td></tr></table></figure>\n\n<p>通过查看分析结果，可得知 str 变量逃到了堆上，也就是该对象在堆上分配。但上个案例时它还在栈上，我们也就 fmt 输出了它而已。这…到底发生了什么事？</p>\n<p>相对案例一，案例二只加了一行代码 fmt.Println(str)，问题肯定出在它身上。其原型：<br><code>func Println(a ...interface&#123;&#125;) (n int, err error)</code></p>\n<p>通过对其分析，可得知当形参为 interface 类型时，在编译阶段编译器无法确定其具体的类型。因此会产生逃逸，最终分配到堆上。</p>\n<p>如果你有兴趣追源码的话，可以看下内部的 reflect.TypeOf(arg).Kind() 语句，其会造成堆逃逸，而表象就是 interface 类型会导致该对象分配到堆上。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>静态分配到栈上，性能一定比动态分配到堆上好</li>\n<li>底层分配到堆，还是栈。实际上对你来说是透明的，不需要过度关心</li>\n<li>每个 Go 版本的逃逸分析都会有所不同（会改变，会优化）</li>\n<li>直接通过 go build -gcflags ‘-m -l’ 就可以看到逃逸分析的过程和结果</li>\n<li>到处都用指针传递并不一定是最好的，要用对。</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/u010853261/article/details/102846449#_34\">golang 逃逸分析与栈、堆分配分析_惜暮-CSDN博客_golang 堆和栈</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/技术/git-show-chinese-filenames/assets/status-dig.jpg","slug":"assets/status-dig.jpg","post":"cki5icqql0002ifpwbjed7z48","modified":0,"renderable":0},{"_id":"source/_posts/技术/go程序初始化顺序/assets/20170831112523944.jpeg","slug":"assets/20170831112523944.jpeg","post":"cki5icqqr0006ifpw13akdxza","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image1.jpeg","slug":"assets/image1.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image2.jpeg","slug":"assets/image2.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image3.jpeg","slug":"assets/image3.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image4.jpeg","slug":"assets/image4.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/工具/chrome_87_新功能/assets/image5.jpeg","slug":"assets/image5.jpeg","post":"cki5ixzjf0000qjpwd4nwa526","modified":0,"renderable":0},{"_id":"source/_posts/技术/go垃圾回收/assets/16c9abaa4032c7ea.gif","slug":"assets/16c9abaa4032c7ea.gif","post":"cki5ixzji0001qjpw91u33nz6","modified":0,"renderable":0},{"_id":"source/_posts/技术/go垃圾回收/assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","slug":"assets/856B62B8-5E17-4E1D-A023-FCE9412A5924.png","post":"cki5ixzji0001qjpw91u33nz6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cki5icqql0002ifpwbjed7z48","category_id":"cki5icqqo0004ifpw7y024st8","_id":"cki5icqqt000aifpw5rfofqni"},{"post_id":"cki5ixzjf0000qjpwd4nwa526","category_id":"cki5icqqs0007ifpwdjco0okt","_id":"cki5ixzjp0005qjpw4q4c53d7"},{"post_id":"cki5ixzji0001qjpw91u33nz6","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"cki5ixzjr0008qjpwhz3rfczp"},{"post_id":"cki5icqqr0006ifpw13akdxza","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"cki5ixzjs000bqjpwey00b9k8"},{"post_id":"cki5j8mct0000umpw7im5h74b","category_id":"cki5ixzjl0003qjpw1heqcm2e","_id":"cki5j8mcx0003umpw8xsydog2"}],"PostTag":[{"post_id":"cki5icqql0002ifpwbjed7z48","tag_id":"cki5icqqq0005ifpw2ksn5xva","_id":"cki5icqqt0009ifpwf5bcgoid"},{"post_id":"cki5ixzjf0000qjpwd4nwa526","tag_id":"cki5icqqt0008ifpwdex61a6a","_id":"cki5ixzjk0002qjpw6fat8bdf"},{"post_id":"cki5ixzji0001qjpw91u33nz6","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"cki5ixzjs000aqjpwc52123an"},{"post_id":"cki5ixzji0001qjpw91u33nz6","tag_id":"cki5ixzjp0007qjpw9wwgay45","_id":"cki5ixzjs000cqjpwh8npdwyd"},{"post_id":"cki5icqqr0006ifpw13akdxza","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"cki5ixzjt000dqjpw0dfi3pva"},{"post_id":"cki5j8mct0000umpw7im5h74b","tag_id":"cki5ixzjo0004qjpwgk0a2w9r","_id":"cki5j8mcx0001umpwctlzaijs"},{"post_id":"cki5j8mct0000umpw7im5h74b","tag_id":"cki5ixzjp0007qjpw9wwgay45","_id":"cki5j8mcx0002umpw1hvud03h"}],"Tag":[{"name":"git","_id":"cki5icqqq0005ifpw2ksn5xva"},{"name":"chrome","_id":"cki5icqqt0008ifpwdex61a6a"},{"name":"无标","_id":"cki5icqqu000cifpw5h1226in"},{"name":"golang","_id":"cki5ixzjo0004qjpwgk0a2w9r"},{"name":"内存管理","_id":"cki5ixzjp0007qjpw9wwgay45"}]}}